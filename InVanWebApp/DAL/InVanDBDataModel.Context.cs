

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace InVanWebApp.DAL
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class InVanDBContext : DbContext
{
    public InVanDBContext()
        : base("name=InVanDBContext")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<BatchNumberMaster> BatchNumberMasters { get; set; }

    public virtual DbSet<BatchPlanning_Details> BatchPlanning_Details { get; set; }

    public virtual DbSet<BatchPlanningMaster> BatchPlanningMasters { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<CalibrationLog> CalibrationLogs { get; set; }

    public virtual DbSet<CertificateAnalysi> CertificateAnalysis { get; set; }

    public virtual DbSet<ChillerCCP> ChillerCCPs { get; set; }

    public virtual DbSet<CityMaster> CityMasters { get; set; }

    public virtual DbSet<ClorinationLog> ClorinationLogs { get; set; }

    public virtual DbSet<COAMaster> COAMasters { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CountryMaster> CountryMasters { get; set; }

    public virtual DbSet<CreditNote> CreditNotes { get; set; }

    public virtual DbSet<CreditNoteDetail> CreditNoteDetails { get; set; }

    public virtual DbSet<CurrencyMaster> CurrencyMasters { get; set; }

    public virtual DbSet<DailyMonitoring> DailyMonitorings { get; set; }

    public virtual DbSet<DebitNote> DebitNotes { get; set; }

    public virtual DbSet<DebitNoteDetail> DebitNoteDetails { get; set; }

    public virtual DbSet<DeliveryChallan> DeliveryChallans { get; set; }

    public virtual DbSet<DeliveryChallanItemDetail> DeliveryChallanItemDetails { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<DesignationMaster> DesignationMasters { get; set; }

    public virtual DbSet<FinishGoodSery> FinishGoodSeries { get; set; }

    public virtual DbSet<ForeignBodyFound> ForeignBodyFounds { get; set; }

    public virtual DbSet<GRN_Master> GRN_Master { get; set; }

    public virtual DbSet<GRNDetail> GRNDetails { get; set; }

    public virtual DbSet<GSTMaster> GSTMasters { get; set; }

    public virtual DbSet<HotFillingPackingLineLogSheetCCP> HotFillingPackingLineLogSheetCCPs { get; set; }

    public virtual DbSet<Indent> Indents { get; set; }

    public virtual DbSet<Indent_Details> Indent_Details { get; set; }

    public virtual DbSet<InquiryFormItemDetail> InquiryFormItemDetails { get; set; }

    public virtual DbSet<InquiryMaster> InquiryMasters { get; set; }

    public virtual DbSet<InvoiceMaster> InvoiceMasters { get; set; }

    public virtual DbSet<InwardNote> InwardNotes { get; set; }

    public virtual DbSet<InwardNoteDetail> InwardNoteDetails { get; set; }

    public virtual DbSet<InwardQC> InwardQCs { get; set; }

    public virtual DbSet<InwardQCDetail> InwardQCDetails { get; set; }

    public virtual DbSet<IssueNote> IssueNotes { get; set; }

    public virtual DbSet<IssueNoteDetail> IssueNoteDetails { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemCategoryMaster> ItemCategoryMasters { get; set; }

    public virtual DbSet<ItemCostMaster> ItemCostMasters { get; set; }

    public virtual DbSet<ItemTaxMaster> ItemTaxMasters { get; set; }

    public virtual DbSet<ItemType> ItemTypes { get; set; }

    public virtual DbSet<LabMaster> LabMasters { get; set; }

    public virtual DbSet<LocationMaster> LocationMasters { get; set; }

    public virtual DbSet<LocationWiseStock> LocationWiseStocks { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<MicroAnalysi> MicroAnalysis { get; set; }

    public virtual DbSet<OilAnalysi> OilAnalysis { get; set; }

    public virtual DbSet<OrganisationGroup> OrganisationGroups { get; set; }

    public virtual DbSet<Organisation> Organisations { get; set; }

    public virtual DbSet<OutwardNote> OutwardNotes { get; set; }

    public virtual DbSet<OutwardNoteDetail> OutwardNoteDetails { get; set; }

    public virtual DbSet<PestControlLog> PestControlLogs { get; set; }

    public virtual DbSet<PostProductionRejectionNote> PostProductionRejectionNotes { get; set; }

    public virtual DbSet<PostProductionRejectionNote_Details> PostProductionRejectionNote_Details { get; set; }

    public virtual DbSet<PreProduction_QC> PreProduction_QC { get; set; }

    public virtual DbSet<PreProduction_QC_Details> PreProduction_QC_Details { get; set; }

    public virtual DbSet<PreStartUpHygineCheck> PreStartUpHygineChecks { get; set; }

    public virtual DbSet<ProcessMaster> ProcessMasters { get; set; }

    public virtual DbSet<ProductEvaluationLog> ProductEvaluationLogs { get; set; }

    public virtual DbSet<ProductionIndent> ProductionIndents { get; set; }

    public virtual DbSet<ProductionIndentIngredientsDetail> ProductionIndentIngredientsDetails { get; set; }

    public virtual DbSet<ProductionMaterialIssueNote> ProductionMaterialIssueNotes { get; set; }

    public virtual DbSet<ProductionMaterialIssueNoteDetail> ProductionMaterialIssueNoteDetails { get; set; }

    public virtual DbSet<ProductMaster> ProductMasters { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderItemsDetail> PurchaseOrderItemsDetails { get; set; }

    public virtual DbSet<PurchaseOrderPaymentDetail> PurchaseOrderPaymentDetails { get; set; }

    public virtual DbSet<QCProductionSpecificationMaster> QCProductionSpecificationMasters { get; set; }

    public virtual DbSet<QCProductioObservationMaster> QCProductioObservationMasters { get; set; }

    public virtual DbSet<RecipeIngredientsDetail> RecipeIngredientsDetails { get; set; }

    public virtual DbSet<RecipeMaster> RecipeMasters { get; set; }

    public virtual DbSet<RejectionNote> RejectionNotes { get; set; }

    public virtual DbSet<RejectionNoteItemDetail> RejectionNoteItemDetails { get; set; }

    public virtual DbSet<RequestForQuotation> RequestForQuotations { get; set; }

    public virtual DbSet<RequestForQuotationItemDetail> RequestForQuotationItemDetails { get; set; }

    public virtual DbSet<RFQ_Vendor_ItemDetails> RFQ_Vendor_ItemDetails { get; set; }

    public virtual DbSet<RFQ_VendorDetails> RFQ_VendorDetails { get; set; }

    public virtual DbSet<RoleRight> RoleRights { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<SalesOrder> SalesOrders { get; set; }

    public virtual DbSet<SalesOrderItemsDetail> SalesOrderItemsDetails { get; set; }

    public virtual DbSet<SalesOrderPaymentDetail> SalesOrderPaymentDetails { get; set; }

    public virtual DbSet<SanitizationAndHygine> SanitizationAndHygines { get; set; }

    public virtual DbSet<ScreenName> ScreenNames { get; set; }

    public virtual DbSet<SILOCCP> SILOCCPs { get; set; }

    public virtual DbSet<SOItemSchedule> SOItemSchedules { get; set; }

    public virtual DbSet<StateMaster> StateMasters { get; set; }

    public virtual DbSet<Status> Status { get; set; }

    public virtual DbSet<StockAdjustment> StockAdjustments { get; set; }

    public virtual DbSet<StockAdjustmentDetail> StockAdjustmentDetails { get; set; }

    public virtual DbSet<StockMaster> StockMasters { get; set; }

    public virtual DbSet<StockTransfer> StockTransfers { get; set; }

    public virtual DbSet<TaxMaster> TaxMasters { get; set; }

    public virtual DbSet<TermsAndConditionMaster> TermsAndConditionMasters { get; set; }

    public virtual DbSet<UnitMaster> UnitMasters { get; set; }

    public virtual DbSet<UserDetail> UserDetails { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<VegWasherDosageLog> VegWasherDosageLogs { get; set; }

    public virtual DbSet<WaterAnalysi> WaterAnalysis { get; set; }

    public virtual DbSet<WorkOrder> WorkOrders { get; set; }

    public virtual DbSet<WorkOrderDetail> WorkOrderDetails { get; set; }

    public virtual DbSet<YearMaster> YearMasters { get; set; }

    public virtual DbSet<RQCCP> RQCCPs { get; set; }

    public virtual DbSet<Vw_PurchaseOrder_PaymentDetails> Vw_PurchaseOrder_PaymentDetails { get; set; }

    public virtual DbSet<Vw_SalesOrder_PaymentDetails> Vw_SalesOrder_PaymentDetails { get; set; }

    public virtual DbSet<Vw_Sotck_Report> Vw_Sotck_Report { get; set; }


    public virtual ObjectResult<usp_dash_Inventory_FIFO_Report_Result> usp_dash_Inventory_FIFO_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dash_Inventory_FIFO_Report_Result>("usp_dash_Inventory_FIFO_Report", fromDateParameter, toDateParameter);
    }


    public virtual int usp_dash_UtilityConsumptionVsProduction(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sO_Id)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_dash_UtilityConsumptionVsProduction", fromDateParameter, toDateParameter, sO_IdParameter);
    }


    public virtual ObjectResult<usp_dashb_BatchwiseProductionCost_Result> usp_dashb_BatchwiseProductionCost(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sOID, string batchNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var sOIDParameter = sOID.HasValue ?
            new ObjectParameter("SOID", sOID) :
            new ObjectParameter("SOID", typeof(int));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_BatchwiseProductionCost_Result>("usp_dashb_BatchwiseProductionCost", fromDateParameter, toDateParameter, sOIDParameter, batchNumberParameter);
    }


    public virtual ObjectResult<usp_dashb_FIFOWithExpiryHighlighting_Result> usp_dashb_FIFOWithExpiryHighlighting(Nullable<int> itemId, Nullable<int> locationId)
    {

        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("locationId", locationId) :
            new ObjectParameter("locationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_FIFOWithExpiryHighlighting_Result>("usp_dashb_FIFOWithExpiryHighlighting", itemIdParameter, locationIdParameter);
    }


    public virtual ObjectResult<usp_dashb_RealTimeWarehouseWiseStock_Result> usp_dashb_RealTimeWarehouseWiseStock(Nullable<int> locationId, Nullable<int> itemId)
    {

        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_RealTimeWarehouseWiseStock_Result>("usp_dashb_RealTimeWarehouseWiseStock", locationIdParameter, itemIdParameter);
    }


    public virtual ObjectResult<usp_dashb_ReorderPoint_CalibrationLog_Result> usp_dashb_ReorderPoint_CalibrationLog()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_ReorderPoint_CalibrationLog_Result>("usp_dashb_ReorderPoint_CalibrationLog");
    }


    public virtual ObjectResult<usp_dashb_ReorderPoint_OnMinStock_Result> usp_dashb_ReorderPoint_OnMinStock(Nullable<int> itemId)
    {

        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_ReorderPoint_OnMinStock_Result>("usp_dashb_ReorderPoint_OnMinStock", itemIdParameter);
    }


    public virtual ObjectResult<usp_dashb_ReorderPoint_PurchaseOrderPaymentDetails_Result> usp_dashb_ReorderPoint_PurchaseOrderPaymentDetails()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_ReorderPoint_PurchaseOrderPaymentDetails_Result>("usp_dashb_ReorderPoint_PurchaseOrderPaymentDetails");
    }


    public virtual ObjectResult<usp_dashb_ReorderPoint_SalesOrderPaymentDetails_Result> usp_dashb_ReorderPoint_SalesOrderPaymentDetails()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_ReorderPoint_SalesOrderPaymentDetails_Result>("usp_dashb_ReorderPoint_SalesOrderPaymentDetails");
    }


    public virtual ObjectResult<usp_dashb_ReorderPointOnAvailableStock_Result> usp_dashb_ReorderPointOnAvailableStock(Nullable<int> itemId)
    {

        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_ReorderPointOnAvailableStock_Result>("usp_dashb_ReorderPointOnAvailableStock", itemIdParameter);
    }


    public virtual ObjectResult<usp_dashb_TotalInventoryValueWarehouseWise_Result> usp_dashb_TotalInventoryValueWarehouseWise()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_TotalInventoryValueWarehouseWise_Result>("usp_dashb_TotalInventoryValueWarehouseWise");
    }


    public virtual ObjectResult<usp_dashb_UtilityConsumptionbybatchDashboard_Result> usp_dashb_UtilityConsumptionbybatchDashboard(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string batchNumber, string workOrderNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        var workOrderNumberParameter = workOrderNumber != null ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_UtilityConsumptionbybatchDashboard_Result>("usp_dashb_UtilityConsumptionbybatchDashboard", fromDateParameter, toDateParameter, batchNumberParameter, workOrderNumberParameter);
    }


    public virtual int usp_dashb_WorkOrderwiseProductionCost(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sO_ID)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var sO_IDParameter = sO_ID.HasValue ?
            new ObjectParameter("SO_ID", sO_ID) :
            new ObjectParameter("SO_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_dashb_WorkOrderwiseProductionCost", fromDateParameter, toDateParameter, sO_IDParameter);
    }


    public virtual ObjectResult<usp_dashb_Yeild_Result> usp_dashb_Yeild(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string batchNumber, Nullable<int> workOrderNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        var workOrderNumberParameter = workOrderNumber.HasValue ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_dashb_Yeild_Result>("usp_dashb_Yeild", fromDateParameter, toDateParameter, batchNumberParameter, workOrderNumberParameter);
    }


    public virtual int Usp_Dashboard_OderSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> flag)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var flagParameter = flag.HasValue ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_Dashboard_OderSummary", fromDateParameter, toDateParameter, flagParameter);
    }


    public virtual ObjectResult<usp_rpt_BatchwiseProductionCost_Report_Result> usp_rpt_BatchwiseProductionCost_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string batchNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_BatchwiseProductionCost_Report_Result>("usp_rpt_BatchwiseProductionCost_Report", fromDateParameter, toDateParameter, batchNumberParameter);
    }


    public virtual ObjectResult<usp_rpt_Company_Report_Result> usp_rpt_Company_Report(string companyType)
    {

        var companyTypeParameter = companyType != null ?
            new ObjectParameter("CompanyType", companyType) :
            new ObjectParameter("CompanyType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Company_Report_Result>("usp_rpt_Company_Report", companyTypeParameter);
    }


    public virtual ObjectResult<usp_rpt_DBNoteReport_Result> usp_rpt_DBNoteReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> dBNoteNumberId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var dBNoteNumberIdParameter = dBNoteNumberId.HasValue ?
            new ObjectParameter("DBNoteNumberId", dBNoteNumberId) :
            new ObjectParameter("DBNoteNumberId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_DBNoteReport_Result>("usp_rpt_DBNoteReport", fromDateParameter, toDateParameter, dBNoteNumberIdParameter);
    }


    public virtual ObjectResult<usp_rpt_DeliveryChallanAgainstSO_Report_Result> usp_rpt_DeliveryChallanAgainstSO_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string sONumberId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var sONumberIdParameter = sONumberId != null ?
            new ObjectParameter("SONumberId", sONumberId) :
            new ObjectParameter("SONumberId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_DeliveryChallanAgainstSO_Report_Result>("usp_rpt_DeliveryChallanAgainstSO_Report", fromDateParameter, toDateParameter, sONumberIdParameter);
    }


    public virtual ObjectResult<usp_rpt_FGLocationwise_Report_Result> usp_rpt_FGLocationwise_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locationId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_FGLocationwise_Report_Result>("usp_rpt_FGLocationwise_Report", fromDateParameter, toDateParameter, locationIdParameter);
    }


    public virtual ObjectResult<usp_rpt_FinishGoodDispatch_Report_Result> usp_rpt_FinishGoodDispatch_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_FinishGoodDispatch_Report_Result>("usp_rpt_FinishGoodDispatch_Report", fromDateParameter, toDateParameter, itemIDParameter);
    }


    public virtual ObjectResult<usp_rpt_GetRawMaterialReceived_Report_Result> usp_rpt_GetRawMaterialReceived_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> wearhouseId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        var wearhouseIdParameter = wearhouseId.HasValue ?
            new ObjectParameter("WearhouseId", wearhouseId) :
            new ObjectParameter("WearhouseId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_GetRawMaterialReceived_Report_Result>("usp_rpt_GetRawMaterialReceived_Report", fromDateParameter, toDateParameter, itemIDParameter, wearhouseIdParameter);
    }


    public virtual ObjectResult<usp_rpt_GRN_Report_Result> usp_rpt_GRN_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> gRNCode)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var gRNCodeParameter = gRNCode.HasValue ?
            new ObjectParameter("GRNCode", gRNCode) :
            new ObjectParameter("GRNCode", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_GRN_Report_Result>("usp_rpt_GRN_Report", fromDateParameter, toDateParameter, gRNCodeParameter);
    }


    public virtual ObjectResult<usp_rpt_Inventory_FIFO_Report_Result> usp_rpt_Inventory_FIFO_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Inventory_FIFO_Report_Result>("usp_rpt_Inventory_FIFO_Report", fromDateParameter, toDateParameter, itemIDParameter);
    }


    public virtual int usp_rpt_InventoryAnalysis_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_rpt_InventoryAnalysis_Report", fromDateParameter, toDateParameter, itemIDParameter);
    }


    public virtual ObjectResult<usp_rpt_IssueNote_Report_Result> usp_rpt_IssueNote_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> issueNoteNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var issueNoteNumberParameter = issueNoteNumber.HasValue ?
            new ObjectParameter("IssueNoteNumber", issueNoteNumber) :
            new ObjectParameter("IssueNoteNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_IssueNote_Report_Result>("usp_rpt_IssueNote_Report", fromDateParameter, toDateParameter, issueNoteNumberParameter);
    }


    public virtual ObjectResult<usp_rpt_Item_GetAll_For_Report_Result> usp_rpt_Item_GetAll_For_Report()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Item_GetAll_For_Report_Result>("usp_rpt_Item_GetAll_For_Report");
    }


    public virtual ObjectResult<usp_rpt_PostProductionRejection_Report_Result> usp_rpt_PostProductionRejection_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> batchNumber, Nullable<int> workOrderNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var batchNumberParameter = batchNumber.HasValue ?
            new ObjectParameter("batchNumber", batchNumber) :
            new ObjectParameter("batchNumber", typeof(int));


        var workOrderNumberParameter = workOrderNumber.HasValue ?
            new ObjectParameter("workOrderNumber", workOrderNumber) :
            new ObjectParameter("workOrderNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_PostProductionRejection_Report_Result>("usp_rpt_PostProductionRejection_Report", fromDateParameter, toDateParameter, batchNumberParameter, workOrderNumberParameter);
    }


    public virtual ObjectResult<usp_rpt_PreProduction_QC_Report_Result> usp_rpt_PreProduction_QC_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> preProductionQCId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var preProductionQCIdParameter = preProductionQCId.HasValue ?
            new ObjectParameter("PreProductionQCId", preProductionQCId) :
            new ObjectParameter("PreProductionQCId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_PreProduction_QC_Report_Result>("usp_rpt_PreProduction_QC_Report", fromDateParameter, toDateParameter, preProductionQCIdParameter);
    }


    public virtual ObjectResult<usp_rpt_PurchaseInvoice_Report_Result> usp_rpt_PurchaseInvoice_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pONumber, string paymentStatus)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var pONumberParameter = pONumber.HasValue ?
            new ObjectParameter("PONumber", pONumber) :
            new ObjectParameter("PONumber", typeof(int));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_PurchaseInvoice_Report_Result>("usp_rpt_PurchaseInvoice_Report", fromDateParameter, toDateParameter, pONumberParameter, paymentStatusParameter);
    }


    public virtual ObjectResult<usp_rpt_PurchaseOrder_Report_Result> usp_rpt_PurchaseOrder_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string status, Nullable<int> vendors)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var statusParameter = status != null ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(string));


        var vendorsParameter = vendors.HasValue ?
            new ObjectParameter("Vendors", vendors) :
            new ObjectParameter("Vendors", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_PurchaseOrder_Report_Result>("usp_rpt_PurchaseOrder_Report", fromDateParameter, toDateParameter, statusParameter, vendorsParameter);
    }


    public virtual ObjectResult<usp_rpt_RawMaterialCostAnalysis_Report_Result> usp_rpt_RawMaterialCostAnalysis_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("itemId", itemId) :
            new ObjectParameter("itemId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_RawMaterialCostAnalysis_Report_Result>("usp_rpt_RawMaterialCostAnalysis_Report", fromDateParameter, toDateParameter, itemIdParameter);
    }


    public virtual ObjectResult<usp_rpt_Rejection_Report_Result> usp_rpt_Rejection_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> rejectionNumber, Nullable<int> flag)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var rejectionNumberParameter = rejectionNumber.HasValue ?
            new ObjectParameter("rejectionNumber", rejectionNumber) :
            new ObjectParameter("rejectionNumber", typeof(int));


        var flagParameter = flag.HasValue ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Rejection_Report_Result>("usp_rpt_Rejection_Report", fromDateParameter, toDateParameter, rejectionNumberParameter, flagParameter);
    }


    public virtual ObjectResult<usp_rpt_RejectionNote_Report_Result> usp_rpt_RejectionNote_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_RejectionNote_Report_Result>("usp_rpt_RejectionNote_Report", fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_rpt_Sales_Report_Result> usp_rpt_Sales_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string sONumberId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var sONumberIdParameter = sONumberId != null ?
            new ObjectParameter("SONumberId", sONumberId) :
            new ObjectParameter("SONumberId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Sales_Report_Result>("usp_rpt_Sales_Report", fromDateParameter, toDateParameter, sONumberIdParameter);
    }


    public virtual ObjectResult<usp_rpt_SalesInvoice_Report_Result> usp_rpt_SalesInvoice_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string sONumberId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var sONumberIdParameter = sONumberId != null ?
            new ObjectParameter("SONumberId", sONumberId) :
            new ObjectParameter("SONumberId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_SalesInvoice_Report_Result>("usp_rpt_SalesInvoice_Report", fromDateParameter, toDateParameter, sONumberIdParameter);
    }


    public virtual ObjectResult<usp_rpt_stock_report_Result> usp_rpt_stock_report(Nullable<int> itemId)
    {

        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_stock_report_Result>("usp_rpt_stock_report", itemIdParameter);
    }


    public virtual ObjectResult<usp_rpt_StockMovement_Result> usp_rpt_StockMovement(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_StockMovement_Result>("usp_rpt_StockMovement", fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_rpt_StockReconciliation_Report_Result> usp_rpt_StockReconciliation_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> wearhouseId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        var wearhouseIdParameter = wearhouseId.HasValue ?
            new ObjectParameter("WearhouseId", wearhouseId) :
            new ObjectParameter("WearhouseId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_StockReconciliation_Report_Result>("usp_rpt_StockReconciliation_Report", fromDateParameter, toDateParameter, itemIDParameter, wearhouseIdParameter);
    }


    public virtual ObjectResult<usp_rpt_TotalInventoryCostWarehouseWiseStock_Result> usp_rpt_TotalInventoryCostWarehouseWiseStock(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> locationId)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_TotalInventoryCostWarehouseWiseStock_Result>("usp_rpt_TotalInventoryCostWarehouseWiseStock", fromDateParameter, toDateParameter, itemIDParameter, locationIdParameter);
    }


    public virtual ObjectResult<usp_rpt_Wastage_Report_Result> usp_rpt_Wastage_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> inwardNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var inwardNumberParameter = inwardNumber.HasValue ?
            new ObjectParameter("inwardNumber", inwardNumber) :
            new ObjectParameter("inwardNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Wastage_Report_Result>("usp_rpt_Wastage_Report", fromDateParameter, toDateParameter, inwardNumberParameter);
    }


    public virtual ObjectResult<usp_rpt_Yeild_Report_Result> usp_rpt_Yeild_Report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> batchNumber)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var batchNumberParameter = batchNumber.HasValue ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_rpt_Yeild_Report_Result>("usp_rpt_Yeild_Report", fromDateParameter, toDateParameter, batchNumberParameter);
    }


    public virtual ObjectResult<usp_tbl_BatchNumber_Get_Result> usp_tbl_BatchNumber_Get()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_BatchNumber_Get_Result>("usp_tbl_BatchNumber_Get");
    }


    public virtual int usp_tbl_BatchNumberMaster_ProductionIndent_GetbyId(Nullable<int> sO_ID, Nullable<int> total_Batches)
    {

        var sO_IDParameter = sO_ID.HasValue ?
            new ObjectParameter("SO_ID", sO_ID) :
            new ObjectParameter("SO_ID", typeof(int));


        var total_BatchesParameter = total_Batches.HasValue ?
            new ObjectParameter("Total_Batches", total_Batches) :
            new ObjectParameter("Total_Batches", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_BatchNumberMaster_ProductionIndent_GetbyId", sO_IDParameter, total_BatchesParameter);
    }


    public virtual ObjectResult<usp_tbl_BatchPlanning_GetAll_Result> usp_tbl_BatchPlanning_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_BatchPlanning_GetAll_Result>("usp_tbl_BatchPlanning_GetAll");
    }


    public virtual int usp_tbl_BatchPlanning_Insert(string batchPlanningDocumentNo, Nullable<int> sO_Id, string sONumber, string workOrderNumber, Nullable<int> locationId, string locationName, Nullable<int> productId, Nullable<int> itemId, string productName, Nullable<decimal> packingSize, string packingSizeUnit, Nullable<decimal> totalRawMaterialYeild, string packingType, Nullable<decimal> orderQuantity, string orderQuantityUnit, Nullable<decimal> requiredQuantityInKG, Nullable<decimal> totalBatchSize, Nullable<decimal> totalNoBatches, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var batchPlanningDocumentNoParameter = batchPlanningDocumentNo != null ?
            new ObjectParameter("BatchPlanningDocumentNo", batchPlanningDocumentNo) :
            new ObjectParameter("BatchPlanningDocumentNo", typeof(string));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var sONumberParameter = sONumber != null ?
            new ObjectParameter("SONumber", sONumber) :
            new ObjectParameter("SONumber", typeof(string));


        var workOrderNumberParameter = workOrderNumber != null ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var productIdParameter = productId.HasValue ?
            new ObjectParameter("ProductId", productId) :
            new ObjectParameter("ProductId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var packingSizeParameter = packingSize.HasValue ?
            new ObjectParameter("PackingSize", packingSize) :
            new ObjectParameter("PackingSize", typeof(decimal));


        var packingSizeUnitParameter = packingSizeUnit != null ?
            new ObjectParameter("PackingSizeUnit", packingSizeUnit) :
            new ObjectParameter("PackingSizeUnit", typeof(string));


        var totalRawMaterialYeildParameter = totalRawMaterialYeild.HasValue ?
            new ObjectParameter("TotalRawMaterialYeild", totalRawMaterialYeild) :
            new ObjectParameter("TotalRawMaterialYeild", typeof(decimal));


        var packingTypeParameter = packingType != null ?
            new ObjectParameter("PackingType", packingType) :
            new ObjectParameter("PackingType", typeof(string));


        var orderQuantityParameter = orderQuantity.HasValue ?
            new ObjectParameter("OrderQuantity", orderQuantity) :
            new ObjectParameter("OrderQuantity", typeof(decimal));


        var orderQuantityUnitParameter = orderQuantityUnit != null ?
            new ObjectParameter("OrderQuantityUnit", orderQuantityUnit) :
            new ObjectParameter("OrderQuantityUnit", typeof(string));


        var requiredQuantityInKGParameter = requiredQuantityInKG.HasValue ?
            new ObjectParameter("RequiredQuantityInKG", requiredQuantityInKG) :
            new ObjectParameter("RequiredQuantityInKG", typeof(decimal));


        var totalBatchSizeParameter = totalBatchSize.HasValue ?
            new ObjectParameter("TotalBatchSize", totalBatchSize) :
            new ObjectParameter("TotalBatchSize", typeof(decimal));


        var totalNoBatchesParameter = totalNoBatches.HasValue ?
            new ObjectParameter("TotalNoBatches", totalNoBatches) :
            new ObjectParameter("TotalNoBatches", typeof(decimal));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_BatchPlanning_Insert", batchPlanningDocumentNoParameter, sO_IdParameter, sONumberParameter, workOrderNumberParameter, locationIdParameter, locationNameParameter, productIdParameter, itemIdParameter, productNameParameter, packingSizeParameter, packingSizeUnitParameter, totalRawMaterialYeildParameter, packingTypeParameter, orderQuantityParameter, orderQuantityUnitParameter, requiredQuantityInKGParameter, totalBatchSizeParameter, totalNoBatchesParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_BatchPlanningDetails_Insert(Nullable<int> batchPlanningId, Nullable<decimal> totalNoBatches, Nullable<int> sO_Id, string workOrderNumber, Nullable<int> itemId, string itemName, string itemCode, Nullable<decimal> quantityPercentage, Nullable<decimal> batchSize, Nullable<decimal> totalQuantityInBatch, Nullable<decimal> yieldPercentage, Nullable<decimal> actualRequirement, Nullable<decimal> stockInHand, Nullable<decimal> toBeProcured, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var batchPlanningIdParameter = batchPlanningId.HasValue ?
            new ObjectParameter("BatchPlanningId", batchPlanningId) :
            new ObjectParameter("BatchPlanningId", typeof(int));


        var totalNoBatchesParameter = totalNoBatches.HasValue ?
            new ObjectParameter("TotalNoBatches", totalNoBatches) :
            new ObjectParameter("TotalNoBatches", typeof(decimal));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var workOrderNumberParameter = workOrderNumber != null ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(string));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var itemCodeParameter = itemCode != null ?
            new ObjectParameter("ItemCode", itemCode) :
            new ObjectParameter("ItemCode", typeof(string));


        var quantityPercentageParameter = quantityPercentage.HasValue ?
            new ObjectParameter("QuantityPercentage", quantityPercentage) :
            new ObjectParameter("QuantityPercentage", typeof(decimal));


        var batchSizeParameter = batchSize.HasValue ?
            new ObjectParameter("BatchSize", batchSize) :
            new ObjectParameter("BatchSize", typeof(decimal));


        var totalQuantityInBatchParameter = totalQuantityInBatch.HasValue ?
            new ObjectParameter("TotalQuantityInBatch", totalQuantityInBatch) :
            new ObjectParameter("TotalQuantityInBatch", typeof(decimal));


        var yieldPercentageParameter = yieldPercentage.HasValue ?
            new ObjectParameter("YieldPercentage", yieldPercentage) :
            new ObjectParameter("YieldPercentage", typeof(decimal));


        var actualRequirementParameter = actualRequirement.HasValue ?
            new ObjectParameter("ActualRequirement", actualRequirement) :
            new ObjectParameter("ActualRequirement", typeof(decimal));


        var stockInHandParameter = stockInHand.HasValue ?
            new ObjectParameter("StockInHand", stockInHand) :
            new ObjectParameter("StockInHand", typeof(decimal));


        var toBeProcuredParameter = toBeProcured.HasValue ?
            new ObjectParameter("ToBeProcured", toBeProcured) :
            new ObjectParameter("ToBeProcured", typeof(decimal));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_BatchPlanningDetails_Insert", batchPlanningIdParameter, totalNoBatchesParameter, sO_IdParameter, workOrderNumberParameter, itemIdParameter, itemNameParameter, itemCodeParameter, quantityPercentageParameter, batchSizeParameter, totalQuantityInBatchParameter, yieldPercentageParameter, actualRequirementParameter, stockInHandParameter, toBeProcuredParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_BatchPlanningOrder_Delete(Nullable<int> batchID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var batchIDParameter = batchID.HasValue ?
            new ObjectParameter("BatchID", batchID) :
            new ObjectParameter("BatchID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_BatchPlanningOrder_Delete", batchIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_BindPreProductionQCForRejectionNote_GetAll_Result> usp_tbl_BindPreProductionQCForRejectionNote_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_BindPreProductionQCForRejectionNote_GetAll_Result>("usp_tbl_BindPreProductionQCForRejectionNote_GetAll");
    }


    public virtual ObjectResult<usp_tbl_BindRejectionNoteDD_ForDebitNote_Result> usp_tbl_BindRejectionNoteDD_ForDebitNote()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_BindRejectionNoteDD_ForDebitNote_Result>("usp_tbl_BindRejectionNoteDD_ForDebitNote");
    }


    public virtual int usp_tbl_CalibrationLog_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_CalibrationLog_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CalibrationLog_GetAll_Result> usp_tbl_CalibrationLog_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CalibrationLog_GetAll_Result>("usp_tbl_CalibrationLog_GetAll");
    }


    public virtual ObjectResult<usp_tbl_CalibrationLog_GetAllByDate_Result> usp_tbl_CalibrationLog_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CalibrationLog_GetAllByDate_Result>("usp_tbl_CalibrationLog_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CalibrationLog_GetByID_Result> usp_tbl_CalibrationLog_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CalibrationLog_GetByID_Result>("usp_tbl_CalibrationLog_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_CalibrationLog_Insert(string nameOfEquipment, string idNo, string department, string range, string rangeFrom, string rangeTo, string frequencyOfCalibration, Nullable<System.DateTime> calibrationDoneDate, Nullable<System.DateTime> calibrationDueDate, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var nameOfEquipmentParameter = nameOfEquipment != null ?
            new ObjectParameter("NameOfEquipment", nameOfEquipment) :
            new ObjectParameter("NameOfEquipment", typeof(string));


        var idNoParameter = idNo != null ?
            new ObjectParameter("IdNo", idNo) :
            new ObjectParameter("IdNo", typeof(string));


        var departmentParameter = department != null ?
            new ObjectParameter("Department", department) :
            new ObjectParameter("Department", typeof(string));


        var rangeParameter = range != null ?
            new ObjectParameter("Range", range) :
            new ObjectParameter("Range", typeof(string));


        var rangeFromParameter = rangeFrom != null ?
            new ObjectParameter("RangeFrom", rangeFrom) :
            new ObjectParameter("RangeFrom", typeof(string));


        var rangeToParameter = rangeTo != null ?
            new ObjectParameter("RangeTo", rangeTo) :
            new ObjectParameter("RangeTo", typeof(string));


        var frequencyOfCalibrationParameter = frequencyOfCalibration != null ?
            new ObjectParameter("FrequencyOfCalibration", frequencyOfCalibration) :
            new ObjectParameter("FrequencyOfCalibration", typeof(string));


        var calibrationDoneDateParameter = calibrationDoneDate.HasValue ?
            new ObjectParameter("CalibrationDoneDate", calibrationDoneDate) :
            new ObjectParameter("CalibrationDoneDate", typeof(System.DateTime));


        var calibrationDueDateParameter = calibrationDueDate.HasValue ?
            new ObjectParameter("CalibrationDueDate", calibrationDueDate) :
            new ObjectParameter("CalibrationDueDate", typeof(System.DateTime));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_CalibrationLog_Insert", nameOfEquipmentParameter, idNoParameter, departmentParameter, rangeParameter, rangeFromParameter, rangeToParameter, frequencyOfCalibrationParameter, calibrationDoneDateParameter, calibrationDueDateParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_CalibrationLog_Update(Nullable<int> id, string nameOfEquipment, string idNo, string department, string range, string rangeFrom, string rangeTo, string frequencyOfCalibration, Nullable<System.DateTime> calibrationDoneDate, Nullable<System.DateTime> calibrationDueDate, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var nameOfEquipmentParameter = nameOfEquipment != null ?
            new ObjectParameter("NameOfEquipment", nameOfEquipment) :
            new ObjectParameter("NameOfEquipment", typeof(string));


        var idNoParameter = idNo != null ?
            new ObjectParameter("IdNo", idNo) :
            new ObjectParameter("IdNo", typeof(string));


        var departmentParameter = department != null ?
            new ObjectParameter("Department", department) :
            new ObjectParameter("Department", typeof(string));


        var rangeParameter = range != null ?
            new ObjectParameter("Range", range) :
            new ObjectParameter("Range", typeof(string));


        var rangeFromParameter = rangeFrom != null ?
            new ObjectParameter("RangeFrom", rangeFrom) :
            new ObjectParameter("RangeFrom", typeof(string));


        var rangeToParameter = rangeTo != null ?
            new ObjectParameter("RangeTo", rangeTo) :
            new ObjectParameter("RangeTo", typeof(string));


        var frequencyOfCalibrationParameter = frequencyOfCalibration != null ?
            new ObjectParameter("FrequencyOfCalibration", frequencyOfCalibration) :
            new ObjectParameter("FrequencyOfCalibration", typeof(string));


        var calibrationDoneDateParameter = calibrationDoneDate.HasValue ?
            new ObjectParameter("CalibrationDoneDate", calibrationDoneDate) :
            new ObjectParameter("CalibrationDoneDate", typeof(System.DateTime));


        var calibrationDueDateParameter = calibrationDueDate.HasValue ?
            new ObjectParameter("CalibrationDueDate", calibrationDueDate) :
            new ObjectParameter("CalibrationDueDate", typeof(System.DateTime));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_CalibrationLog_Update", idParameter, nameOfEquipmentParameter, idNoParameter, departmentParameter, rangeParameter, rangeFromParameter, rangeToParameter, frequencyOfCalibrationParameter, calibrationDoneDateParameter, calibrationDueDateParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_CertificateAnalysis_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_CertificateAnalysis_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CertificateAnalysis_GetAllByDate_Result> usp_tbl_CertificateAnalysis_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CertificateAnalysis_GetAllByDate_Result>("usp_tbl_CertificateAnalysis_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CertificateAnalysis_GetByID_Result> usp_tbl_CertificateAnalysis_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CertificateAnalysis_GetByID_Result>("usp_tbl_CertificateAnalysis_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_CertificateAnalysis_Insert(string source, Nullable<System.DateTime> date, string wOPO, string productName, string batchNo, string packingSize, Nullable<System.DateTime> bestBeforeDate, string clostridiumPerfringens, string escherichiaColi, string salmonella, string totalPlateCountNumber, string yeastandMould, string coliform, string acidity, string pH, string totalSolubleSolids, string peroxideValue, string saltContent, string labAnalysisReportNo, string labAnalysisReport, string verifyByName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var sourceParameter = source != null ?
            new ObjectParameter("Source", source) :
            new ObjectParameter("Source", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var wOPOParameter = wOPO != null ?
            new ObjectParameter("WOPO", wOPO) :
            new ObjectParameter("WOPO", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var packingSizeParameter = packingSize != null ?
            new ObjectParameter("PackingSize", packingSize) :
            new ObjectParameter("PackingSize", typeof(string));


        var bestBeforeDateParameter = bestBeforeDate.HasValue ?
            new ObjectParameter("BestBeforeDate", bestBeforeDate) :
            new ObjectParameter("BestBeforeDate", typeof(System.DateTime));


        var clostridiumPerfringensParameter = clostridiumPerfringens != null ?
            new ObjectParameter("ClostridiumPerfringens", clostridiumPerfringens) :
            new ObjectParameter("ClostridiumPerfringens", typeof(string));


        var escherichiaColiParameter = escherichiaColi != null ?
            new ObjectParameter("EscherichiaColi", escherichiaColi) :
            new ObjectParameter("EscherichiaColi", typeof(string));


        var salmonellaParameter = salmonella != null ?
            new ObjectParameter("Salmonella", salmonella) :
            new ObjectParameter("Salmonella", typeof(string));


        var totalPlateCountNumberParameter = totalPlateCountNumber != null ?
            new ObjectParameter("TotalPlateCountNumber", totalPlateCountNumber) :
            new ObjectParameter("TotalPlateCountNumber", typeof(string));


        var yeastandMouldParameter = yeastandMould != null ?
            new ObjectParameter("YeastandMould", yeastandMould) :
            new ObjectParameter("YeastandMould", typeof(string));


        var coliformParameter = coliform != null ?
            new ObjectParameter("Coliform", coliform) :
            new ObjectParameter("Coliform", typeof(string));


        var acidityParameter = acidity != null ?
            new ObjectParameter("Acidity", acidity) :
            new ObjectParameter("Acidity", typeof(string));


        var pHParameter = pH != null ?
            new ObjectParameter("PH", pH) :
            new ObjectParameter("PH", typeof(string));


        var totalSolubleSolidsParameter = totalSolubleSolids != null ?
            new ObjectParameter("TotalSolubleSolids", totalSolubleSolids) :
            new ObjectParameter("TotalSolubleSolids", typeof(string));


        var peroxideValueParameter = peroxideValue != null ?
            new ObjectParameter("PeroxideValue", peroxideValue) :
            new ObjectParameter("PeroxideValue", typeof(string));


        var saltContentParameter = saltContent != null ?
            new ObjectParameter("SaltContent", saltContent) :
            new ObjectParameter("SaltContent", typeof(string));


        var labAnalysisReportNoParameter = labAnalysisReportNo != null ?
            new ObjectParameter("LabAnalysisReportNo", labAnalysisReportNo) :
            new ObjectParameter("LabAnalysisReportNo", typeof(string));


        var labAnalysisReportParameter = labAnalysisReport != null ?
            new ObjectParameter("LabAnalysisReport", labAnalysisReport) :
            new ObjectParameter("LabAnalysisReport", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_CertificateAnalysis_Insert", sourceParameter, dateParameter, wOPOParameter, productNameParameter, batchNoParameter, packingSizeParameter, bestBeforeDateParameter, clostridiumPerfringensParameter, escherichiaColiParameter, salmonellaParameter, totalPlateCountNumberParameter, yeastandMouldParameter, coliformParameter, acidityParameter, pHParameter, totalSolubleSolidsParameter, peroxideValueParameter, saltContentParameter, labAnalysisReportNoParameter, labAnalysisReportParameter, verifyByNameParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_CertificateAnalysis_Update(Nullable<int> id, string source, Nullable<System.DateTime> date, string wOPO, string productName, string batchNo, string packingSize, Nullable<System.DateTime> bestBeforeDate, string clostridiumPerfringens, string escherichiaColi, string salmonella, string totalPlateCountNumber, string yeastandMould, string coliform, string acidity, string pH, string totalSolubleSolids, string peroxideValue, string saltContent, string labAnalysisReportNo, string labAnalysisReport, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var sourceParameter = source != null ?
            new ObjectParameter("Source", source) :
            new ObjectParameter("Source", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var wOPOParameter = wOPO != null ?
            new ObjectParameter("WOPO", wOPO) :
            new ObjectParameter("WOPO", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var packingSizeParameter = packingSize != null ?
            new ObjectParameter("PackingSize", packingSize) :
            new ObjectParameter("PackingSize", typeof(string));


        var bestBeforeDateParameter = bestBeforeDate.HasValue ?
            new ObjectParameter("BestBeforeDate", bestBeforeDate) :
            new ObjectParameter("BestBeforeDate", typeof(System.DateTime));


        var clostridiumPerfringensParameter = clostridiumPerfringens != null ?
            new ObjectParameter("ClostridiumPerfringens", clostridiumPerfringens) :
            new ObjectParameter("ClostridiumPerfringens", typeof(string));


        var escherichiaColiParameter = escherichiaColi != null ?
            new ObjectParameter("EscherichiaColi", escherichiaColi) :
            new ObjectParameter("EscherichiaColi", typeof(string));


        var salmonellaParameter = salmonella != null ?
            new ObjectParameter("Salmonella", salmonella) :
            new ObjectParameter("Salmonella", typeof(string));


        var totalPlateCountNumberParameter = totalPlateCountNumber != null ?
            new ObjectParameter("TotalPlateCountNumber", totalPlateCountNumber) :
            new ObjectParameter("TotalPlateCountNumber", typeof(string));


        var yeastandMouldParameter = yeastandMould != null ?
            new ObjectParameter("YeastandMould", yeastandMould) :
            new ObjectParameter("YeastandMould", typeof(string));


        var coliformParameter = coliform != null ?
            new ObjectParameter("Coliform", coliform) :
            new ObjectParameter("Coliform", typeof(string));


        var acidityParameter = acidity != null ?
            new ObjectParameter("Acidity", acidity) :
            new ObjectParameter("Acidity", typeof(string));


        var pHParameter = pH != null ?
            new ObjectParameter("PH", pH) :
            new ObjectParameter("PH", typeof(string));


        var totalSolubleSolidsParameter = totalSolubleSolids != null ?
            new ObjectParameter("TotalSolubleSolids", totalSolubleSolids) :
            new ObjectParameter("TotalSolubleSolids", typeof(string));


        var peroxideValueParameter = peroxideValue != null ?
            new ObjectParameter("PeroxideValue", peroxideValue) :
            new ObjectParameter("PeroxideValue", typeof(string));


        var saltContentParameter = saltContent != null ?
            new ObjectParameter("SaltContent", saltContent) :
            new ObjectParameter("SaltContent", typeof(string));


        var labAnalysisReportNoParameter = labAnalysisReportNo != null ?
            new ObjectParameter("LabAnalysisReportNo", labAnalysisReportNo) :
            new ObjectParameter("LabAnalysisReportNo", typeof(string));


        var labAnalysisReportParameter = labAnalysisReport != null ?
            new ObjectParameter("LabAnalysisReport", labAnalysisReport) :
            new ObjectParameter("LabAnalysisReport", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_CertificateAnalysis_Update", idParameter, sourceParameter, dateParameter, wOPOParameter, productNameParameter, batchNoParameter, packingSizeParameter, bestBeforeDateParameter, clostridiumPerfringensParameter, escherichiaColiParameter, salmonellaParameter, totalPlateCountNumberParameter, yeastandMouldParameter, coliformParameter, acidityParameter, pHParameter, totalSolubleSolidsParameter, peroxideValueParameter, saltContentParameter, labAnalysisReportNoParameter, labAnalysisReportParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_ChillerCCP_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ChillerCCP_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ChillerCCP_GetAll_Result> usp_tbl_ChillerCCP_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ChillerCCP_GetAll_Result>("usp_tbl_ChillerCCP_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ChillerCCP_GetByID_Result> usp_tbl_ChillerCCP_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ChillerCCP_GetByID_Result>("usp_tbl_ChillerCCP_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ChillerCCP_Insert(Nullable<System.DateTime> date, string waterClorinated, string totleTimeInChiller, string quntityOfPakedProduct, string noOfCrates, string mandatotyTemperature, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var waterClorinatedParameter = waterClorinated != null ?
            new ObjectParameter("WaterClorinated", waterClorinated) :
            new ObjectParameter("WaterClorinated", typeof(string));


        var totleTimeInChillerParameter = totleTimeInChiller != null ?
            new ObjectParameter("TotleTimeInChiller", totleTimeInChiller) :
            new ObjectParameter("TotleTimeInChiller", typeof(string));


        var quntityOfPakedProductParameter = quntityOfPakedProduct != null ?
            new ObjectParameter("QuntityOfPakedProduct", quntityOfPakedProduct) :
            new ObjectParameter("QuntityOfPakedProduct", typeof(string));


        var noOfCratesParameter = noOfCrates != null ?
            new ObjectParameter("NoOfCrates", noOfCrates) :
            new ObjectParameter("NoOfCrates", typeof(string));


        var mandatotyTemperatureParameter = mandatotyTemperature != null ?
            new ObjectParameter("MandatotyTemperature", mandatotyTemperature) :
            new ObjectParameter("MandatotyTemperature", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ChillerCCP_Insert", dateParameter, waterClorinatedParameter, totleTimeInChillerParameter, quntityOfPakedProductParameter, noOfCratesParameter, mandatotyTemperatureParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ChillerCCP_Update(Nullable<int> id, Nullable<System.DateTime> date, string waterClorinated, string totleTimeInChiller, string quntityOfPakedProduct, string noOfCrates, string mandatotyTemperature, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var waterClorinatedParameter = waterClorinated != null ?
            new ObjectParameter("WaterClorinated", waterClorinated) :
            new ObjectParameter("WaterClorinated", typeof(string));


        var totleTimeInChillerParameter = totleTimeInChiller != null ?
            new ObjectParameter("TotleTimeInChiller", totleTimeInChiller) :
            new ObjectParameter("TotleTimeInChiller", typeof(string));


        var quntityOfPakedProductParameter = quntityOfPakedProduct != null ?
            new ObjectParameter("QuntityOfPakedProduct", quntityOfPakedProduct) :
            new ObjectParameter("QuntityOfPakedProduct", typeof(string));


        var noOfCratesParameter = noOfCrates != null ?
            new ObjectParameter("NoOfCrates", noOfCrates) :
            new ObjectParameter("NoOfCrates", typeof(string));


        var mandatotyTemperatureParameter = mandatotyTemperature != null ?
            new ObjectParameter("MandatotyTemperature", mandatotyTemperature) :
            new ObjectParameter("MandatotyTemperature", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ChillerCCP_Update", idParameter, dateParameter, waterClorinatedParameter, totleTimeInChillerParameter, quntityOfPakedProductParameter, noOfCratesParameter, mandatotyTemperatureParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_City_GetAll_Result> usp_tbl_City_GetAll(Nullable<int> stateID)
    {

        var stateIDParameter = stateID.HasValue ?
            new ObjectParameter("StateID", stateID) :
            new ObjectParameter("StateID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_City_GetAll_Result>("usp_tbl_City_GetAll", stateIDParameter);
    }


    public virtual int usp_tbl_ClorinationLog_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ClorinationLog_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ClorinationLog_GetAll_Result> usp_tbl_ClorinationLog_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ClorinationLog_GetAll_Result>("usp_tbl_ClorinationLog_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ClorinationLog_GetAllByDate_Result> usp_tbl_ClorinationLog_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ClorinationLog_GetAllByDate_Result>("usp_tbl_ClorinationLog_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ClorinationLog_GetByID_Result> usp_tbl_ClorinationLog_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ClorinationLog_GetByID_Result>("usp_tbl_ClorinationLog_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ClorinationLog_Insert(Nullable<System.DateTime> date, string footWasher, string roWater, string softWater, string coolingWaterTank, string processingWater, string cIPWaterTank, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var footWasherParameter = footWasher != null ?
            new ObjectParameter("FootWasher", footWasher) :
            new ObjectParameter("FootWasher", typeof(string));


        var roWaterParameter = roWater != null ?
            new ObjectParameter("RoWater", roWater) :
            new ObjectParameter("RoWater", typeof(string));


        var softWaterParameter = softWater != null ?
            new ObjectParameter("SoftWater", softWater) :
            new ObjectParameter("SoftWater", typeof(string));


        var coolingWaterTankParameter = coolingWaterTank != null ?
            new ObjectParameter("CoolingWaterTank", coolingWaterTank) :
            new ObjectParameter("CoolingWaterTank", typeof(string));


        var processingWaterParameter = processingWater != null ?
            new ObjectParameter("ProcessingWater", processingWater) :
            new ObjectParameter("ProcessingWater", typeof(string));


        var cIPWaterTankParameter = cIPWaterTank != null ?
            new ObjectParameter("CIPWaterTank", cIPWaterTank) :
            new ObjectParameter("CIPWaterTank", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ClorinationLog_Insert", dateParameter, footWasherParameter, roWaterParameter, softWaterParameter, coolingWaterTankParameter, processingWaterParameter, cIPWaterTankParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ClorinationLog_Update(Nullable<int> id, Nullable<System.DateTime> date, string footWasher, string roWater, string softWater, string coolingWaterTank, string processingWater, string cIPWaterTank, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var footWasherParameter = footWasher != null ?
            new ObjectParameter("FootWasher", footWasher) :
            new ObjectParameter("FootWasher", typeof(string));


        var roWaterParameter = roWater != null ?
            new ObjectParameter("RoWater", roWater) :
            new ObjectParameter("RoWater", typeof(string));


        var softWaterParameter = softWater != null ?
            new ObjectParameter("SoftWater", softWater) :
            new ObjectParameter("SoftWater", typeof(string));


        var coolingWaterTankParameter = coolingWaterTank != null ?
            new ObjectParameter("CoolingWaterTank", coolingWaterTank) :
            new ObjectParameter("CoolingWaterTank", typeof(string));


        var processingWaterParameter = processingWater != null ?
            new ObjectParameter("ProcessingWater", processingWater) :
            new ObjectParameter("ProcessingWater", typeof(string));


        var cIPWaterTankParameter = cIPWaterTank != null ?
            new ObjectParameter("CIPWaterTank", cIPWaterTank) :
            new ObjectParameter("CIPWaterTank", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ClorinationLog_Update", idParameter, dateParameter, footWasherParameter, roWaterParameter, softWaterParameter, coolingWaterTankParameter, processingWaterParameter, cIPWaterTankParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<string> usp_tbl_CompanyAddressList_GetAll(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_tbl_CompanyAddressList_GetAll", iDParameter);
    }


    public virtual int usp_tbl_CompanyDetails_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_CompanyDetails_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CompanyDetails_GetAll_Result> usp_tbl_CompanyDetails_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CompanyDetails_GetAll_Result>("usp_tbl_CompanyDetails_GetAll");
    }


    public virtual ObjectResult<usp_tbl_CompanyDetails_GetByID_Result> usp_tbl_CompanyDetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CompanyDetails_GetByID_Result>("usp_tbl_CompanyDetails_GetByID", iDParameter);
    }


    public virtual int usp_tbl_CompanyDetails_Insert(string companyType, string companyName, string emailId, string contactPersonName, string contactPersonNo, string address, string gSTNumber, string remarks, Nullable<bool> isActive, Nullable<bool> isBlackListed, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var companyTypeParameter = companyType != null ?
            new ObjectParameter("CompanyType", companyType) :
            new ObjectParameter("CompanyType", typeof(string));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactPersonNoParameter = contactPersonNo != null ?
            new ObjectParameter("ContactPersonNo", contactPersonNo) :
            new ObjectParameter("ContactPersonNo", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var gSTNumberParameter = gSTNumber != null ?
            new ObjectParameter("GSTNumber", gSTNumber) :
            new ObjectParameter("GSTNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var isBlackListedParameter = isBlackListed.HasValue ?
            new ObjectParameter("IsBlackListed", isBlackListed) :
            new ObjectParameter("IsBlackListed", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_CompanyDetails_Insert", companyTypeParameter, companyNameParameter, emailIdParameter, contactPersonNameParameter, contactPersonNoParameter, addressParameter, gSTNumberParameter, remarksParameter, isActiveParameter, isBlackListedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_CompanyDetails_Update(Nullable<int> iD, string companyType, string companyName, string emailId, string contactPersonName, string contactPersonNo, string address, string gSTNumber, string remarks, Nullable<bool> isActive, Nullable<bool> isBlackListed, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var companyTypeParameter = companyType != null ?
            new ObjectParameter("CompanyType", companyType) :
            new ObjectParameter("CompanyType", typeof(string));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactPersonNoParameter = contactPersonNo != null ?
            new ObjectParameter("ContactPersonNo", contactPersonNo) :
            new ObjectParameter("ContactPersonNo", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var gSTNumberParameter = gSTNumber != null ?
            new ObjectParameter("GSTNumber", gSTNumber) :
            new ObjectParameter("GSTNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var isBlackListedParameter = isBlackListed.HasValue ?
            new ObjectParameter("IsBlackListed", isBlackListed) :
            new ObjectParameter("IsBlackListed", typeof(bool));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_CompanyDetails_Update", iDParameter, companyTypeParameter, companyNameParameter, emailIdParameter, contactPersonNameParameter, contactPersonNoParameter, addressParameter, gSTNumberParameter, remarksParameter, isActiveParameter, isBlackListedParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CompanyList_GetAll_Result> usp_tbl_CompanyList_GetAll(Nullable<int> type)
    {

        var typeParameter = type.HasValue ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CompanyList_GetAll_Result>("usp_tbl_CompanyList_GetAll", typeParameter);
    }


    public virtual int usp_tbl_CompanyList_RFQview_GetAll(Nullable<int> rFQ_ID)
    {

        var rFQ_IDParameter = rFQ_ID.HasValue ?
            new ObjectParameter("RFQ_ID", rFQ_ID) :
            new ObjectParameter("RFQ_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_CompanyList_RFQview_GetAll", rFQ_IDParameter);
    }


    public virtual ObjectResult<usp_tbl_Country_GetAll_Result> usp_tbl_Country_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Country_GetAll_Result>("usp_tbl_Country_GetAll");
    }


    public virtual int usp_tbl_CreditNote_Delete(Nullable<int> creditNoteId, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var creditNoteIdParameter = creditNoteId.HasValue ?
            new ObjectParameter("CreditNoteId", creditNoteId) :
            new ObjectParameter("CreditNoteId", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_CreditNote_Delete", creditNoteIdParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CreditNote_GetAll_Result> usp_tbl_CreditNote_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CreditNote_GetAll_Result>("usp_tbl_CreditNote_GetAll");
    }


    public virtual ObjectResult<usp_tbl_CreditNote_GetByID_Result> usp_tbl_CreditNote_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CreditNote_GetByID_Result>("usp_tbl_CreditNote_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_CreditNote_Insert_Result> usp_tbl_CreditNote_Insert(string creditNoteNo, Nullable<System.DateTime> creditNoteDate, Nullable<int> pO_ID, string pO_Number, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice, Nullable<int> locationId, string locationName, string deliveryAddress, Nullable<int> vendorID, string vendorName, string vendorAddress, Nullable<double> totalBeforeTax, Nullable<double> totalTax, Nullable<double> otherTax, Nullable<double> grandTotal, Nullable<int> termsAndConditionID, string terms, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var creditNoteNoParameter = creditNoteNo != null ?
            new ObjectParameter("CreditNoteNo", creditNoteNo) :
            new ObjectParameter("CreditNoteNo", typeof(string));


        var creditNoteDateParameter = creditNoteDate.HasValue ?
            new ObjectParameter("CreditNoteDate", creditNoteDate) :
            new ObjectParameter("CreditNoteDate", typeof(System.DateTime));


        var pO_IDParameter = pO_ID.HasValue ?
            new ObjectParameter("PO_ID", pO_ID) :
            new ObjectParameter("PO_ID", typeof(int));


        var pO_NumberParameter = pO_Number != null ?
            new ObjectParameter("PO_Number", pO_Number) :
            new ObjectParameter("PO_Number", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var vendorIDParameter = vendorID.HasValue ?
            new ObjectParameter("VendorID", vendorID) :
            new ObjectParameter("VendorID", typeof(int));


        var vendorNameParameter = vendorName != null ?
            new ObjectParameter("VendorName", vendorName) :
            new ObjectParameter("VendorName", typeof(string));


        var vendorAddressParameter = vendorAddress != null ?
            new ObjectParameter("VendorAddress", vendorAddress) :
            new ObjectParameter("VendorAddress", typeof(string));


        var totalBeforeTaxParameter = totalBeforeTax.HasValue ?
            new ObjectParameter("TotalBeforeTax", totalBeforeTax) :
            new ObjectParameter("TotalBeforeTax", typeof(double));


        var totalTaxParameter = totalTax.HasValue ?
            new ObjectParameter("TotalTax", totalTax) :
            new ObjectParameter("TotalTax", typeof(double));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(double));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var termsParameter = terms != null ?
            new ObjectParameter("Terms", terms) :
            new ObjectParameter("Terms", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CreditNote_Insert_Result>("usp_tbl_CreditNote_Insert", creditNoteNoParameter, creditNoteDateParameter, pO_IDParameter, pO_NumberParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, vendorIDParameter, vendorNameParameter, vendorAddressParameter, totalBeforeTaxParameter, totalTaxParameter, otherTaxParameter, grandTotalParameter, termsAndConditionIDParameter, termsParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CreditNoteDetails_GetByID_Result> usp_tbl_CreditNoteDetails_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CreditNoteDetails_GetByID_Result>("usp_tbl_CreditNoteDetails_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_CreditNoteDetails_Insert(Nullable<int> creditNote_ID, Nullable<int> itemId, string item_Name, string item_Code, Nullable<decimal> pOQuantity, Nullable<decimal> rejectedQuantity, Nullable<double> itemUnitPrice, string itemUnit, Nullable<decimal> itemTaxValue, Nullable<double> itemTotalAmount, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice)
    {

        var creditNote_IDParameter = creditNote_ID.HasValue ?
            new ObjectParameter("CreditNote_ID", creditNote_ID) :
            new ObjectParameter("CreditNote_ID", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var pOQuantityParameter = pOQuantity.HasValue ?
            new ObjectParameter("POQuantity", pOQuantity) :
            new ObjectParameter("POQuantity", typeof(decimal));


        var rejectedQuantityParameter = rejectedQuantity.HasValue ?
            new ObjectParameter("RejectedQuantity", rejectedQuantity) :
            new ObjectParameter("RejectedQuantity", typeof(decimal));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(double));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemTotalAmountParameter = itemTotalAmount.HasValue ?
            new ObjectParameter("ItemTotalAmount", itemTotalAmount) :
            new ObjectParameter("ItemTotalAmount", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_CreditNoteDetails_Insert", creditNote_IDParameter, itemIdParameter, item_NameParameter, item_CodeParameter, pOQuantityParameter, rejectedQuantityParameter, itemUnitPriceParameter, itemUnitParameter, itemTaxValueParameter, itemTotalAmountParameter, remarksParameter, createdByParameter, createdDateParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter);
    }


    public virtual int usp_tbl_Currency_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Currency_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Currency_GetAll_Result> usp_tbl_Currency_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Currency_GetAll_Result>("usp_tbl_Currency_GetAll");
    }


    public virtual ObjectResult<usp_tbl_Currency_GetByID_Result> usp_tbl_Currency_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Currency_GetByID_Result>("usp_tbl_Currency_GetByID", iDParameter);
    }


    public virtual int usp_tbl_Currency_Insert(string currencyName, Nullable<decimal> value, Nullable<decimal> indianCurrencyValue, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var valueParameter = value.HasValue ?
            new ObjectParameter("Value", value) :
            new ObjectParameter("Value", typeof(decimal));


        var indianCurrencyValueParameter = indianCurrencyValue.HasValue ?
            new ObjectParameter("IndianCurrencyValue", indianCurrencyValue) :
            new ObjectParameter("IndianCurrencyValue", typeof(decimal));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Currency_Insert", currencyNameParameter, valueParameter, indianCurrencyValueParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Currency_Update(Nullable<int> iD, string currencyName, Nullable<decimal> value, Nullable<decimal> indianCurrencyValue, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var valueParameter = value.HasValue ?
            new ObjectParameter("Value", value) :
            new ObjectParameter("Value", typeof(decimal));


        var indianCurrencyValueParameter = indianCurrencyValue.HasValue ?
            new ObjectParameter("IndianCurrencyValue", indianCurrencyValue) :
            new ObjectParameter("IndianCurrencyValue", typeof(decimal));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Currency_Update", iDParameter, currencyNameParameter, valueParameter, indianCurrencyValueParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_CurrencyMaster_GetAll_Result> usp_tbl_CurrencyMaster_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_CurrencyMaster_GetAll_Result>("usp_tbl_CurrencyMaster_GetAll");
    }


    public virtual int usp_tbl_DailyMonitoring_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DailyMonitoring_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_DailyMonitoring_GetAll_Result> usp_tbl_DailyMonitoring_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_DailyMonitoring_GetAll_Result>("usp_tbl_DailyMonitoring_GetAll");
    }


    public virtual ObjectResult<usp_tbl_DailyMonitoring_GetAllByDate_Result> usp_tbl_DailyMonitoring_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_DailyMonitoring_GetAllByDate_Result>("usp_tbl_DailyMonitoring_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_DailyMonitoring_GetByID_Result> usp_tbl_DailyMonitoring_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_DailyMonitoring_GetByID_Result>("usp_tbl_DailyMonitoring_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_DailyMonitoring_Insert(Nullable<System.DateTime> date, string personalHygine, string cleaningAndSanitation, string cleaningOfEquipment, string waterPotability, string allergic, string nonAllergic, string vegetableProcessingArea, string packagingLabellingArea, string fgsArea, string inside, string outSide, string dry, string wet, string outSiders, string productionArea, string officeStaff, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var personalHygineParameter = personalHygine != null ?
            new ObjectParameter("PersonalHygine", personalHygine) :
            new ObjectParameter("PersonalHygine", typeof(string));


        var cleaningAndSanitationParameter = cleaningAndSanitation != null ?
            new ObjectParameter("CleaningAndSanitation", cleaningAndSanitation) :
            new ObjectParameter("CleaningAndSanitation", typeof(string));


        var cleaningOfEquipmentParameter = cleaningOfEquipment != null ?
            new ObjectParameter("CleaningOfEquipment", cleaningOfEquipment) :
            new ObjectParameter("CleaningOfEquipment", typeof(string));


        var waterPotabilityParameter = waterPotability != null ?
            new ObjectParameter("WaterPotability", waterPotability) :
            new ObjectParameter("WaterPotability", typeof(string));


        var allergicParameter = allergic != null ?
            new ObjectParameter("Allergic", allergic) :
            new ObjectParameter("Allergic", typeof(string));


        var nonAllergicParameter = nonAllergic != null ?
            new ObjectParameter("NonAllergic", nonAllergic) :
            new ObjectParameter("NonAllergic", typeof(string));


        var vegetableProcessingAreaParameter = vegetableProcessingArea != null ?
            new ObjectParameter("VegetableProcessingArea", vegetableProcessingArea) :
            new ObjectParameter("VegetableProcessingArea", typeof(string));


        var packagingLabellingAreaParameter = packagingLabellingArea != null ?
            new ObjectParameter("PackagingLabellingArea", packagingLabellingArea) :
            new ObjectParameter("PackagingLabellingArea", typeof(string));


        var fgsAreaParameter = fgsArea != null ?
            new ObjectParameter("FgsArea", fgsArea) :
            new ObjectParameter("FgsArea", typeof(string));


        var insideParameter = inside != null ?
            new ObjectParameter("Inside", inside) :
            new ObjectParameter("Inside", typeof(string));


        var outSideParameter = outSide != null ?
            new ObjectParameter("OutSide", outSide) :
            new ObjectParameter("OutSide", typeof(string));


        var dryParameter = dry != null ?
            new ObjectParameter("Dry", dry) :
            new ObjectParameter("Dry", typeof(string));


        var wetParameter = wet != null ?
            new ObjectParameter("Wet", wet) :
            new ObjectParameter("Wet", typeof(string));


        var outSidersParameter = outSiders != null ?
            new ObjectParameter("OutSiders", outSiders) :
            new ObjectParameter("OutSiders", typeof(string));


        var productionAreaParameter = productionArea != null ?
            new ObjectParameter("ProductionArea", productionArea) :
            new ObjectParameter("ProductionArea", typeof(string));


        var officeStaffParameter = officeStaff != null ?
            new ObjectParameter("OfficeStaff", officeStaff) :
            new ObjectParameter("OfficeStaff", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_DailyMonitoring_Insert", dateParameter, personalHygineParameter, cleaningAndSanitationParameter, cleaningOfEquipmentParameter, waterPotabilityParameter, allergicParameter, nonAllergicParameter, vegetableProcessingAreaParameter, packagingLabellingAreaParameter, fgsAreaParameter, insideParameter, outSideParameter, dryParameter, wetParameter, outSidersParameter, productionAreaParameter, officeStaffParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_DailyMonitoring_Update(Nullable<int> id, Nullable<System.DateTime> date, string personalHygine, string cleaningAndSanitation, string cleaningOfEquipment, string waterPotability, string allergic, string nonAllergic, string vegetableProcessingArea, string packagingLabellingArea, string fgsArea, string inside, string outSide, string dry, string wet, string outSiders, string productionArea, string officeStaff, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var personalHygineParameter = personalHygine != null ?
            new ObjectParameter("PersonalHygine", personalHygine) :
            new ObjectParameter("PersonalHygine", typeof(string));


        var cleaningAndSanitationParameter = cleaningAndSanitation != null ?
            new ObjectParameter("CleaningAndSanitation", cleaningAndSanitation) :
            new ObjectParameter("CleaningAndSanitation", typeof(string));


        var cleaningOfEquipmentParameter = cleaningOfEquipment != null ?
            new ObjectParameter("CleaningOfEquipment", cleaningOfEquipment) :
            new ObjectParameter("CleaningOfEquipment", typeof(string));


        var waterPotabilityParameter = waterPotability != null ?
            new ObjectParameter("WaterPotability", waterPotability) :
            new ObjectParameter("WaterPotability", typeof(string));


        var allergicParameter = allergic != null ?
            new ObjectParameter("Allergic", allergic) :
            new ObjectParameter("Allergic", typeof(string));


        var nonAllergicParameter = nonAllergic != null ?
            new ObjectParameter("NonAllergic", nonAllergic) :
            new ObjectParameter("NonAllergic", typeof(string));


        var vegetableProcessingAreaParameter = vegetableProcessingArea != null ?
            new ObjectParameter("VegetableProcessingArea", vegetableProcessingArea) :
            new ObjectParameter("VegetableProcessingArea", typeof(string));


        var packagingLabellingAreaParameter = packagingLabellingArea != null ?
            new ObjectParameter("PackagingLabellingArea", packagingLabellingArea) :
            new ObjectParameter("PackagingLabellingArea", typeof(string));


        var fgsAreaParameter = fgsArea != null ?
            new ObjectParameter("FgsArea", fgsArea) :
            new ObjectParameter("FgsArea", typeof(string));


        var insideParameter = inside != null ?
            new ObjectParameter("Inside", inside) :
            new ObjectParameter("Inside", typeof(string));


        var outSideParameter = outSide != null ?
            new ObjectParameter("OutSide", outSide) :
            new ObjectParameter("OutSide", typeof(string));


        var dryParameter = dry != null ?
            new ObjectParameter("Dry", dry) :
            new ObjectParameter("Dry", typeof(string));


        var wetParameter = wet != null ?
            new ObjectParameter("Wet", wet) :
            new ObjectParameter("Wet", typeof(string));


        var outSidersParameter = outSiders != null ?
            new ObjectParameter("OutSiders", outSiders) :
            new ObjectParameter("OutSiders", typeof(string));


        var productionAreaParameter = productionArea != null ?
            new ObjectParameter("ProductionArea", productionArea) :
            new ObjectParameter("ProductionArea", typeof(string));


        var officeStaffParameter = officeStaff != null ?
            new ObjectParameter("OfficeStaff", officeStaff) :
            new ObjectParameter("OfficeStaff", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_DailyMonitoring_Update", idParameter, dateParameter, personalHygineParameter, cleaningAndSanitationParameter, cleaningOfEquipmentParameter, waterPotabilityParameter, allergicParameter, nonAllergicParameter, vegetableProcessingAreaParameter, packagingLabellingAreaParameter, fgsAreaParameter, insideParameter, outSideParameter, dryParameter, wetParameter, outSidersParameter, productionAreaParameter, officeStaffParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_DBBoteNumber_Get_Result> usp_tbl_DBBoteNumber_Get()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_DBBoteNumber_Get_Result>("usp_tbl_DBBoteNumber_Get");
    }


    public virtual int usp_tbl_DebitNote_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DebitNote_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_DebitNote_Insert_Result> usp_tbl_DebitNote_Insert(string debitNoteNo, Nullable<System.DateTime> debitNoteDate, Nullable<int> pO_ID, string pO_Number, Nullable<int> rejectionId, string rejectionNoteNo, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice, Nullable<int> locationId, string locationName, string deliveryAddress, Nullable<int> vendorID, string vendorName, string vendorAddress, Nullable<double> totalBeforeTax, Nullable<double> totalTax, Nullable<double> otherTax, Nullable<double> grandTotal, Nullable<int> termsAndConditionID, string terms, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var debitNoteNoParameter = debitNoteNo != null ?
            new ObjectParameter("DebitNoteNo", debitNoteNo) :
            new ObjectParameter("DebitNoteNo", typeof(string));


        var debitNoteDateParameter = debitNoteDate.HasValue ?
            new ObjectParameter("DebitNoteDate", debitNoteDate) :
            new ObjectParameter("DebitNoteDate", typeof(System.DateTime));


        var pO_IDParameter = pO_ID.HasValue ?
            new ObjectParameter("PO_ID", pO_ID) :
            new ObjectParameter("PO_ID", typeof(int));


        var pO_NumberParameter = pO_Number != null ?
            new ObjectParameter("PO_Number", pO_Number) :
            new ObjectParameter("PO_Number", typeof(string));


        var rejectionIdParameter = rejectionId.HasValue ?
            new ObjectParameter("RejectionId", rejectionId) :
            new ObjectParameter("RejectionId", typeof(int));


        var rejectionNoteNoParameter = rejectionNoteNo != null ?
            new ObjectParameter("RejectionNoteNo", rejectionNoteNo) :
            new ObjectParameter("RejectionNoteNo", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var vendorIDParameter = vendorID.HasValue ?
            new ObjectParameter("VendorID", vendorID) :
            new ObjectParameter("VendorID", typeof(int));


        var vendorNameParameter = vendorName != null ?
            new ObjectParameter("VendorName", vendorName) :
            new ObjectParameter("VendorName", typeof(string));


        var vendorAddressParameter = vendorAddress != null ?
            new ObjectParameter("VendorAddress", vendorAddress) :
            new ObjectParameter("VendorAddress", typeof(string));


        var totalBeforeTaxParameter = totalBeforeTax.HasValue ?
            new ObjectParameter("TotalBeforeTax", totalBeforeTax) :
            new ObjectParameter("TotalBeforeTax", typeof(double));


        var totalTaxParameter = totalTax.HasValue ?
            new ObjectParameter("TotalTax", totalTax) :
            new ObjectParameter("TotalTax", typeof(double));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(double));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var termsParameter = terms != null ?
            new ObjectParameter("Terms", terms) :
            new ObjectParameter("Terms", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_DebitNote_Insert_Result>("usp_tbl_DebitNote_Insert", debitNoteNoParameter, debitNoteDateParameter, pO_IDParameter, pO_NumberParameter, rejectionIdParameter, rejectionNoteNoParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, vendorIDParameter, vendorNameParameter, vendorAddressParameter, totalBeforeTaxParameter, totalTaxParameter, otherTaxParameter, grandTotalParameter, termsAndConditionIDParameter, termsParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_DebitNoteDetails_Insert(Nullable<int> debitNoteId, Nullable<int> itemId, string item_Name, string item_Code, Nullable<decimal> pOQuantity, Nullable<decimal> debitedQuantity, Nullable<double> itemUnitPrice, string itemUnit, Nullable<decimal> itemTaxValue, Nullable<double> itemTotalAmount, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice)
    {

        var debitNoteIdParameter = debitNoteId.HasValue ?
            new ObjectParameter("DebitNoteId", debitNoteId) :
            new ObjectParameter("DebitNoteId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var pOQuantityParameter = pOQuantity.HasValue ?
            new ObjectParameter("POQuantity", pOQuantity) :
            new ObjectParameter("POQuantity", typeof(decimal));


        var debitedQuantityParameter = debitedQuantity.HasValue ?
            new ObjectParameter("DebitedQuantity", debitedQuantity) :
            new ObjectParameter("DebitedQuantity", typeof(decimal));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(double));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemTotalAmountParameter = itemTotalAmount.HasValue ?
            new ObjectParameter("ItemTotalAmount", itemTotalAmount) :
            new ObjectParameter("ItemTotalAmount", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_DebitNoteDetails_Insert", debitNoteIdParameter, itemIdParameter, item_NameParameter, item_CodeParameter, pOQuantityParameter, debitedQuantityParameter, itemUnitPriceParameter, itemUnitParameter, itemTaxValueParameter, itemTotalAmountParameter, remarksParameter, createdByParameter, createdDateParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter);
    }


    public virtual int usp_tbl_DeletePurchaseOrder_Delete(Nullable<int> purchaseOrderId, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DeletePurchaseOrder_Delete", purchaseOrderIdParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_DeleteRejectionNoteAndItemDteails_Delete(Nullable<int> rejectionID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var rejectionIDParameter = rejectionID.HasValue ?
            new ObjectParameter("RejectionID", rejectionID) :
            new ObjectParameter("RejectionID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DeleteRejectionNoteAndItemDteails_Delete", rejectionIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_DeleteRequestForQuotation_Delete(Nullable<int> requestForQuotationId, Nullable<int> lastModifiedByID, Nullable<System.DateTime> lastModifiedByDate)
    {

        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var lastModifiedByIDParameter = lastModifiedByID.HasValue ?
            new ObjectParameter("LastModifiedByID", lastModifiedByID) :
            new ObjectParameter("LastModifiedByID", typeof(int));


        var lastModifiedByDateParameter = lastModifiedByDate.HasValue ?
            new ObjectParameter("LastModifiedByDate", lastModifiedByDate) :
            new ObjectParameter("LastModifiedByDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DeleteRequestForQuotation_Delete", requestForQuotationIdParameter, lastModifiedByIDParameter, lastModifiedByDateParameter);
    }


    public virtual int usp_tbl_DeliveryChallan_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DeliveryChallan_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_DeliveryChallan_Insert_Result> usp_tbl_DeliveryChallan_Insert(string deliveryChallanNumber, Nullable<System.DateTime> deliveryChallanDate, Nullable<int> sO_Id, string sONumber, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice, Nullable<int> locationId, string locationName, Nullable<int> vendorsID, string companyName, string supplierAddress, string shippingAddress, string remarks, Nullable<int> termsAndCondition_ID, string terms, Nullable<double> totalAfterTax, Nullable<double> otherTax, Nullable<double> grandTotal, Nullable<double> discountPercentage, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string signature)
    {

        var deliveryChallanNumberParameter = deliveryChallanNumber != null ?
            new ObjectParameter("DeliveryChallanNumber", deliveryChallanNumber) :
            new ObjectParameter("DeliveryChallanNumber", typeof(string));


        var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
            new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
            new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var sONumberParameter = sONumber != null ?
            new ObjectParameter("SONumber", sONumber) :
            new ObjectParameter("SONumber", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var shippingAddressParameter = shippingAddress != null ?
            new ObjectParameter("ShippingAddress", shippingAddress) :
            new ObjectParameter("ShippingAddress", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var termsAndCondition_IDParameter = termsAndCondition_ID.HasValue ?
            new ObjectParameter("TermsAndCondition_ID", termsAndCondition_ID) :
            new ObjectParameter("TermsAndCondition_ID", typeof(int));


        var termsParameter = terms != null ?
            new ObjectParameter("Terms", terms) :
            new ObjectParameter("Terms", typeof(string));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(double));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(double));


        var discountPercentageParameter = discountPercentage.HasValue ?
            new ObjectParameter("DiscountPercentage", discountPercentage) :
            new ObjectParameter("DiscountPercentage", typeof(double));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_DeliveryChallan_Insert_Result>("usp_tbl_DeliveryChallan_Insert", deliveryChallanNumberParameter, deliveryChallanDateParameter, sO_IdParameter, sONumberParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter, locationIdParameter, locationNameParameter, vendorsIDParameter, companyNameParameter, supplierAddressParameter, shippingAddressParameter, remarksParameter, termsAndCondition_IDParameter, termsParameter, totalAfterTaxParameter, otherTaxParameter, grandTotalParameter, discountPercentageParameter, createdByParameter, createdDateParameter, signatureParameter);
    }


    public virtual int usp_tbl_DeliveryChallanDetails_Insert(Nullable<int> deliveryChallanID, Nullable<int> itemId, string item_Name, string item_Code, Nullable<decimal> orderedQuantity, Nullable<decimal> balanceQuantity, Nullable<decimal> outwardQuantity, string itemUnit, Nullable<decimal> itemUnitPrice, string currencyName, string itemTaxValue, Nullable<decimal> totalItemCost, Nullable<int> locationId, Nullable<int> sO_Id, Nullable<decimal> avlStockQty, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var deliveryChallanIDParameter = deliveryChallanID.HasValue ?
            new ObjectParameter("DeliveryChallanID", deliveryChallanID) :
            new ObjectParameter("DeliveryChallanID", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var orderedQuantityParameter = orderedQuantity.HasValue ?
            new ObjectParameter("OrderedQuantity", orderedQuantity) :
            new ObjectParameter("OrderedQuantity", typeof(decimal));


        var balanceQuantityParameter = balanceQuantity.HasValue ?
            new ObjectParameter("BalanceQuantity", balanceQuantity) :
            new ObjectParameter("BalanceQuantity", typeof(decimal));


        var outwardQuantityParameter = outwardQuantity.HasValue ?
            new ObjectParameter("OutwardQuantity", outwardQuantity) :
            new ObjectParameter("OutwardQuantity", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var itemTaxValueParameter = itemTaxValue != null ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(decimal));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var avlStockQtyParameter = avlStockQty.HasValue ?
            new ObjectParameter("AvlStockQty", avlStockQty) :
            new ObjectParameter("AvlStockQty", typeof(decimal));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_DeliveryChallanDetails_Insert", deliveryChallanIDParameter, itemIdParameter, item_NameParameter, item_CodeParameter, orderedQuantityParameter, balanceQuantityParameter, outwardQuantityParameter, itemUnitParameter, itemUnitPriceParameter, currencyNameParameter, itemTaxValueParameter, totalItemCostParameter, locationIdParameter, sO_IdParameter, avlStockQtyParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Designation_GetAll_Result> usp_tbl_Designation_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Designation_GetAll_Result>("usp_tbl_Designation_GetAll");
    }


    public virtual ObjectResult<usp_tbl_FGLocationBatchNumber_Get_Result> usp_tbl_FGLocationBatchNumber_Get()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_FGLocationBatchNumber_Get_Result>("usp_tbl_FGLocationBatchNumber_Get");
    }


    public virtual int usp_tbl_FinishGoodSeries_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_FinishGoodSeries_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_FinishGoodSeries_GetAll_Result> usp_tbl_FinishGoodSeries_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_FinishGoodSeries_GetAll_Result>("usp_tbl_FinishGoodSeries_GetAll");
    }


    public virtual ObjectResult<usp_tbl_FinishGoodSeries_GetByID_Result> usp_tbl_FinishGoodSeries_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_FinishGoodSeries_GetByID_Result>("usp_tbl_FinishGoodSeries_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_FinishGoodSeries_Insert(Nullable<int> locationId, string locationName, string productName, Nullable<int> itemId, string packageSize, Nullable<System.DateTime> mfgDate, Nullable<int> noOfCartonBox, Nullable<double> quantityInKG, string batchNo, Nullable<int> salesOrderId, string sONo, string packaging, string sealing, string labeling, string qCCheck, string actualPackets, string expectedPackets, Nullable<decimal> expectedYield, Nullable<decimal> actualYield, string workOrderNo, string remarks, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var packageSizeParameter = packageSize != null ?
            new ObjectParameter("PackageSize", packageSize) :
            new ObjectParameter("PackageSize", typeof(string));


        var mfgDateParameter = mfgDate.HasValue ?
            new ObjectParameter("MfgDate", mfgDate) :
            new ObjectParameter("MfgDate", typeof(System.DateTime));


        var noOfCartonBoxParameter = noOfCartonBox.HasValue ?
            new ObjectParameter("NoOfCartonBox", noOfCartonBox) :
            new ObjectParameter("NoOfCartonBox", typeof(int));


        var quantityInKGParameter = quantityInKG.HasValue ?
            new ObjectParameter("QuantityInKG", quantityInKG) :
            new ObjectParameter("QuantityInKG", typeof(double));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var sONoParameter = sONo != null ?
            new ObjectParameter("SONo", sONo) :
            new ObjectParameter("SONo", typeof(string));


        var packagingParameter = packaging != null ?
            new ObjectParameter("Packaging", packaging) :
            new ObjectParameter("Packaging", typeof(string));


        var sealingParameter = sealing != null ?
            new ObjectParameter("Sealing", sealing) :
            new ObjectParameter("Sealing", typeof(string));


        var labelingParameter = labeling != null ?
            new ObjectParameter("Labeling", labeling) :
            new ObjectParameter("Labeling", typeof(string));


        var qCCheckParameter = qCCheck != null ?
            new ObjectParameter("QCCheck", qCCheck) :
            new ObjectParameter("QCCheck", typeof(string));


        var actualPacketsParameter = actualPackets != null ?
            new ObjectParameter("ActualPackets", actualPackets) :
            new ObjectParameter("ActualPackets", typeof(string));


        var expectedPacketsParameter = expectedPackets != null ?
            new ObjectParameter("ExpectedPackets", expectedPackets) :
            new ObjectParameter("ExpectedPackets", typeof(string));


        var expectedYieldParameter = expectedYield.HasValue ?
            new ObjectParameter("ExpectedYield", expectedYield) :
            new ObjectParameter("ExpectedYield", typeof(decimal));


        var actualYieldParameter = actualYield.HasValue ?
            new ObjectParameter("ActualYield", actualYield) :
            new ObjectParameter("ActualYield", typeof(decimal));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_FinishGoodSeries_Insert", locationIdParameter, locationNameParameter, productNameParameter, itemIdParameter, packageSizeParameter, mfgDateParameter, noOfCartonBoxParameter, quantityInKGParameter, batchNoParameter, salesOrderIdParameter, sONoParameter, packagingParameter, sealingParameter, labelingParameter, qCCheckParameter, actualPacketsParameter, expectedPacketsParameter, expectedYieldParameter, actualYieldParameter, workOrderNoParameter, remarksParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_FinishGoodSeries_Update(Nullable<int> fGSID, string productName, string packageSize, Nullable<System.DateTime> mfgDate, Nullable<int> noOfCartonBox, Nullable<double> quantityInKG, string batchNo, Nullable<int> salesOrderId, string sONo, string packaging, string sealing, string labeling, string qCCheck, string actualPackets, string expectedPackets, Nullable<decimal> expectedYield, Nullable<decimal> actualYield, string workOrderNo, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var fGSIDParameter = fGSID.HasValue ?
            new ObjectParameter("FGSID", fGSID) :
            new ObjectParameter("FGSID", typeof(int));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var packageSizeParameter = packageSize != null ?
            new ObjectParameter("PackageSize", packageSize) :
            new ObjectParameter("PackageSize", typeof(string));


        var mfgDateParameter = mfgDate.HasValue ?
            new ObjectParameter("MfgDate", mfgDate) :
            new ObjectParameter("MfgDate", typeof(System.DateTime));


        var noOfCartonBoxParameter = noOfCartonBox.HasValue ?
            new ObjectParameter("NoOfCartonBox", noOfCartonBox) :
            new ObjectParameter("NoOfCartonBox", typeof(int));


        var quantityInKGParameter = quantityInKG.HasValue ?
            new ObjectParameter("QuantityInKG", quantityInKG) :
            new ObjectParameter("QuantityInKG", typeof(double));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var sONoParameter = sONo != null ?
            new ObjectParameter("SONo", sONo) :
            new ObjectParameter("SONo", typeof(string));


        var packagingParameter = packaging != null ?
            new ObjectParameter("Packaging", packaging) :
            new ObjectParameter("Packaging", typeof(string));


        var sealingParameter = sealing != null ?
            new ObjectParameter("Sealing", sealing) :
            new ObjectParameter("Sealing", typeof(string));


        var labelingParameter = labeling != null ?
            new ObjectParameter("Labeling", labeling) :
            new ObjectParameter("Labeling", typeof(string));


        var qCCheckParameter = qCCheck != null ?
            new ObjectParameter("QCCheck", qCCheck) :
            new ObjectParameter("QCCheck", typeof(string));


        var actualPacketsParameter = actualPackets != null ?
            new ObjectParameter("ActualPackets", actualPackets) :
            new ObjectParameter("ActualPackets", typeof(string));


        var expectedPacketsParameter = expectedPackets != null ?
            new ObjectParameter("ExpectedPackets", expectedPackets) :
            new ObjectParameter("ExpectedPackets", typeof(string));


        var expectedYieldParameter = expectedYield.HasValue ?
            new ObjectParameter("ExpectedYield", expectedYield) :
            new ObjectParameter("ExpectedYield", typeof(decimal));


        var actualYieldParameter = actualYield.HasValue ?
            new ObjectParameter("ActualYield", actualYield) :
            new ObjectParameter("ActualYield", typeof(decimal));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_FinishGoodSeries_Update", fGSIDParameter, productNameParameter, packageSizeParameter, mfgDateParameter, noOfCartonBoxParameter, quantityInKGParameter, batchNoParameter, salesOrderIdParameter, sONoParameter, packagingParameter, sealingParameter, labelingParameter, qCCheckParameter, actualPacketsParameter, expectedPacketsParameter, expectedYieldParameter, actualYieldParameter, workOrderNoParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_ForeignBodyFound_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ForeignBodyFound_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ForeignBodyFound_GetAll_Result> usp_tbl_ForeignBodyFound_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ForeignBodyFound_GetAll_Result>("usp_tbl_ForeignBodyFound_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ForeignBodyFound_GetAllByDate_Result> usp_tbl_ForeignBodyFound_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ForeignBodyFound_GetAllByDate_Result>("usp_tbl_ForeignBodyFound_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ForeignBodyFound_GetByID_Result> usp_tbl_ForeignBodyFound_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ForeignBodyFound_GetByID_Result>("usp_tbl_ForeignBodyFound_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ForeignBodyFound_Insert(Nullable<System.DateTime> date, string rawMaterial, string onGoingProcessing, string batching, string postProcessing, string correctiveAction, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var rawMaterialParameter = rawMaterial != null ?
            new ObjectParameter("RawMaterial", rawMaterial) :
            new ObjectParameter("RawMaterial", typeof(string));


        var onGoingProcessingParameter = onGoingProcessing != null ?
            new ObjectParameter("OnGoingProcessing", onGoingProcessing) :
            new ObjectParameter("OnGoingProcessing", typeof(string));


        var batchingParameter = batching != null ?
            new ObjectParameter("Batching", batching) :
            new ObjectParameter("Batching", typeof(string));


        var postProcessingParameter = postProcessing != null ?
            new ObjectParameter("PostProcessing", postProcessing) :
            new ObjectParameter("PostProcessing", typeof(string));


        var correctiveActionParameter = correctiveAction != null ?
            new ObjectParameter("CorrectiveAction", correctiveAction) :
            new ObjectParameter("CorrectiveAction", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ForeignBodyFound_Insert", dateParameter, rawMaterialParameter, onGoingProcessingParameter, batchingParameter, postProcessingParameter, correctiveActionParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ForeignBodyFound_Update(Nullable<int> id, Nullable<System.DateTime> date, string rawMaterial, string onGoingProcessing, string batching, string postProcessing, string correctiveAction, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var rawMaterialParameter = rawMaterial != null ?
            new ObjectParameter("RawMaterial", rawMaterial) :
            new ObjectParameter("RawMaterial", typeof(string));


        var onGoingProcessingParameter = onGoingProcessing != null ?
            new ObjectParameter("OnGoingProcessing", onGoingProcessing) :
            new ObjectParameter("OnGoingProcessing", typeof(string));


        var batchingParameter = batching != null ?
            new ObjectParameter("Batching", batching) :
            new ObjectParameter("Batching", typeof(string));


        var postProcessingParameter = postProcessing != null ?
            new ObjectParameter("PostProcessing", postProcessing) :
            new ObjectParameter("PostProcessing", typeof(string));


        var correctiveActionParameter = correctiveAction != null ?
            new ObjectParameter("CorrectiveAction", correctiveAction) :
            new ObjectParameter("CorrectiveAction", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ForeignBodyFound_Update", idParameter, dateParameter, rawMaterialParameter, onGoingProcessingParameter, batchingParameter, postProcessingParameter, correctiveActionParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<string> usp_tbl_GenerateBatchNumber(string workOrderNumber)
    {

        var workOrderNumberParameter = workOrderNumber != null ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_tbl_GenerateBatchNumber", workOrderNumberParameter);
    }


    public virtual ObjectResult<string> usp_tbl_GenerateBatchNumberByProductName(Nullable<int> itemID)
    {

        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_tbl_GenerateBatchNumberByProductName", itemIDParameter);
    }


    public virtual ObjectResult<string> usp_tbl_GenerateDocumentNo(Nullable<int> documentType, string workOrderType)
    {

        var documentTypeParameter = documentType.HasValue ?
            new ObjectParameter("DocumentType", documentType) :
            new ObjectParameter("DocumentType", typeof(int));


        var workOrderTypeParameter = workOrderType != null ?
            new ObjectParameter("WorkOrderType", workOrderType) :
            new ObjectParameter("WorkOrderType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_tbl_GenerateDocumentNo", documentTypeParameter, workOrderTypeParameter);
    }


    public virtual ObjectResult<usp_tbl_GetInquiryListForSO_Result> usp_tbl_GetInquiryListForSO()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetInquiryListForSO_Result>("usp_tbl_GetInquiryListForSO");
    }


    public virtual int usp_tbl_GetInwardNote_ForInwardQC()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_GetInwardNote_ForInwardQC");
    }


    public virtual ObjectResult<usp_tbl_GetItemCodeListForStockTransfer_Result> usp_tbl_GetItemCodeListForStockTransfer(Nullable<int> locationID)
    {

        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemCodeListForStockTransfer_Result>("usp_tbl_GetItemCodeListForStockTransfer", locationIDParameter);
    }


    public virtual ObjectResult<usp_tbl_GetItemDetailsByIdForPOandOC_Result> usp_tbl_GetItemDetailsByIdForPOandOC(Nullable<int> itemId, Nullable<int> currencyID)
    {

        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemDetailsByIdForPOandOC_Result>("usp_tbl_GetItemDetailsByIdForPOandOC", itemIdParameter, currencyIDParameter);
    }


    public virtual ObjectResult<usp_tbl_GetItemDetailsByIdForStockTransfer_Result> usp_tbl_GetItemDetailsByIdForStockTransfer(Nullable<int> itemId, Nullable<int> locationId, Nullable<System.DateTime> createdDate)
    {

        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemDetailsByIdForStockTransfer_Result>("usp_tbl_GetItemDetailsByIdForStockTransfer", itemIdParameter, locationIdParameter, createdDateParameter);
    }


    public virtual ObjectResult<usp_tbl_GetItemListForIndent_Result> usp_tbl_GetItemListForIndent()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemListForIndent_Result>("usp_tbl_GetItemListForIndent");
    }


    public virtual ObjectResult<usp_tbl_GetItemListForPOandOC_Result> usp_tbl_GetItemListForPOandOC(Nullable<int> itemType)
    {

        var itemTypeParameter = itemType.HasValue ?
            new ObjectParameter("ItemType", itemType) :
            new ObjectParameter("ItemType", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemListForPOandOC_Result>("usp_tbl_GetItemListForPOandOC", itemTypeParameter);
    }


    public virtual ObjectResult<usp_tbl_GetItemListForRecipe_Result> usp_tbl_GetItemListForRecipe()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemListForRecipe_Result>("usp_tbl_GetItemListForRecipe");
    }


    public virtual ObjectResult<usp_tbl_GetItemListForStockTransfer_Result> usp_tbl_GetItemListForStockTransfer(Nullable<int> itemType)
    {

        var itemTypeParameter = itemType.HasValue ?
            new ObjectParameter("ItemType", itemType) :
            new ObjectParameter("ItemType", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetItemListForStockTransfer_Result>("usp_tbl_GetItemListForStockTransfer", itemTypeParameter);
    }


    public virtual ObjectResult<usp_tbl_GetSalesOrder_ForSOPayment_Result> usp_tbl_GetSalesOrder_ForSOPayment()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetSalesOrder_ForSOPayment_Result>("usp_tbl_GetSalesOrder_ForSOPayment");
    }


    public virtual ObjectResult<usp_tbl_GetScreenNamesByRoleId_Result> usp_tbl_GetScreenNamesByRoleId(Nullable<int> roleId)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetScreenNamesByRoleId_Result>("usp_tbl_GetScreenNamesByRoleId", roleIdParameter);
    }


    public virtual ObjectResult<usp_tbl_GetScreensNotInRoleRightsById_Result> usp_tbl_GetScreensNotInRoleRightsById(Nullable<int> roleId)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GetScreensNotInRoleRightsById_Result>("usp_tbl_GetScreensNotInRoleRightsById", roleIdParameter);
    }


    public virtual int usp_tbl_GRN_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_GRN_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_GRN_GetAll_Result> usp_tbl_GRN_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GRN_GetAll_Result>("usp_tbl_GRN_GetAll");
    }


    public virtual ObjectResult<usp_tbl_GRN_GetByID_Result> usp_tbl_GRN_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GRN_GetByID_Result>("usp_tbl_GRN_GetByID", iDParameter);
    }


    public virtual int usp_tbl_GRN_Insert(string gRNCode, Nullable<System.DateTime> gRNDate, Nullable<int> inwardQCId, Nullable<int> pO_Id, string pONumber, Nullable<int> locationId, string deliveryAddress, string remark, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var gRNCodeParameter = gRNCode != null ?
            new ObjectParameter("GRNCode", gRNCode) :
            new ObjectParameter("GRNCode", typeof(string));


        var gRNDateParameter = gRNDate.HasValue ?
            new ObjectParameter("GRNDate", gRNDate) :
            new ObjectParameter("GRNDate", typeof(System.DateTime));


        var inwardQCIdParameter = inwardQCId.HasValue ?
            new ObjectParameter("InwardQCId", inwardQCId) :
            new ObjectParameter("InwardQCId", typeof(int));


        var pO_IdParameter = pO_Id.HasValue ?
            new ObjectParameter("PO_Id", pO_Id) :
            new ObjectParameter("PO_Id", typeof(int));


        var pONumberParameter = pONumber != null ?
            new ObjectParameter("PONumber", pONumber) :
            new ObjectParameter("PONumber", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_GRN_Insert", gRNCodeParameter, gRNDateParameter, inwardQCIdParameter, pO_IdParameter, pONumberParameter, locationIdParameter, deliveryAddressParameter, remarkParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<usp_tbl_GRNItemDetails_GetByID_Result> usp_tbl_GRNItemDetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_GRNItemDetails_GetByID_Result>("usp_tbl_GRNItemDetails_GetByID", iDParameter);
    }


    public virtual int usp_tbl_HotFillingPackingLineLogSheetCCP_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_HotFillingPackingLineLogSheetCCP_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_HotFillingPackingLineLogSheetCCP_GetAll_Result> usp_tbl_HotFillingPackingLineLogSheetCCP_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_HotFillingPackingLineLogSheetCCP_GetAll_Result>("usp_tbl_HotFillingPackingLineLogSheetCCP_GetAll");
    }


    public virtual ObjectResult<usp_tbl_HotFillingPackingLineLogSheetCCP_GetByID_Result> usp_tbl_HotFillingPackingLineLogSheetCCP_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_HotFillingPackingLineLogSheetCCP_GetByID_Result>("usp_tbl_HotFillingPackingLineLogSheetCCP_GetByID", iDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_HotFillingPackingLineLogSheetCCP_Insert(Nullable<System.DateTime> date, string itemName, Nullable<System.TimeSpan> releaseTime, string hotLineTemp, string productTemp, string cleaningHygine, Nullable<decimal> randomWeight, string monitoringParameters, string monitoringFilling, string noOfPouches, string remarks, string correctiveActions, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var releaseTimeParameter = releaseTime.HasValue ?
            new ObjectParameter("ReleaseTime", releaseTime) :
            new ObjectParameter("ReleaseTime", typeof(System.TimeSpan));


        var hotLineTempParameter = hotLineTemp != null ?
            new ObjectParameter("HotLineTemp", hotLineTemp) :
            new ObjectParameter("HotLineTemp", typeof(string));


        var productTempParameter = productTemp != null ?
            new ObjectParameter("ProductTemp", productTemp) :
            new ObjectParameter("ProductTemp", typeof(string));


        var cleaningHygineParameter = cleaningHygine != null ?
            new ObjectParameter("CleaningHygine", cleaningHygine) :
            new ObjectParameter("CleaningHygine", typeof(string));


        var randomWeightParameter = randomWeight.HasValue ?
            new ObjectParameter("RandomWeight", randomWeight) :
            new ObjectParameter("RandomWeight", typeof(decimal));


        var monitoringParametersParameter = monitoringParameters != null ?
            new ObjectParameter("MonitoringParameters", monitoringParameters) :
            new ObjectParameter("MonitoringParameters", typeof(string));


        var monitoringFillingParameter = monitoringFilling != null ?
            new ObjectParameter("MonitoringFilling", monitoringFilling) :
            new ObjectParameter("MonitoringFilling", typeof(string));


        var noOfPouchesParameter = noOfPouches != null ?
            new ObjectParameter("NoOfPouches", noOfPouches) :
            new ObjectParameter("NoOfPouches", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var correctiveActionsParameter = correctiveActions != null ?
            new ObjectParameter("CorrectiveActions", correctiveActions) :
            new ObjectParameter("CorrectiveActions", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_HotFillingPackingLineLogSheetCCP_Insert", dateParameter, itemNameParameter, releaseTimeParameter, hotLineTempParameter, productTempParameter, cleaningHygineParameter, randomWeightParameter, monitoringParametersParameter, monitoringFillingParameter, noOfPouchesParameter, remarksParameter, correctiveActionsParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_HotFillingPackingLineLogSheetCCP_Update(Nullable<int> iD, Nullable<System.DateTime> date, string itemName, Nullable<System.TimeSpan> releaseTime, string hotLineTemp, string productTemp, string cleaningHygine, Nullable<decimal> randomWeight, string monitoringParameters, string monitoringFilling, string noOfPouches, string remarks, string correctiveActions, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var releaseTimeParameter = releaseTime.HasValue ?
            new ObjectParameter("ReleaseTime", releaseTime) :
            new ObjectParameter("ReleaseTime", typeof(System.TimeSpan));


        var hotLineTempParameter = hotLineTemp != null ?
            new ObjectParameter("HotLineTemp", hotLineTemp) :
            new ObjectParameter("HotLineTemp", typeof(string));


        var productTempParameter = productTemp != null ?
            new ObjectParameter("ProductTemp", productTemp) :
            new ObjectParameter("ProductTemp", typeof(string));


        var cleaningHygineParameter = cleaningHygine != null ?
            new ObjectParameter("CleaningHygine", cleaningHygine) :
            new ObjectParameter("CleaningHygine", typeof(string));


        var randomWeightParameter = randomWeight.HasValue ?
            new ObjectParameter("RandomWeight", randomWeight) :
            new ObjectParameter("RandomWeight", typeof(decimal));


        var monitoringParametersParameter = monitoringParameters != null ?
            new ObjectParameter("MonitoringParameters", monitoringParameters) :
            new ObjectParameter("MonitoringParameters", typeof(string));


        var monitoringFillingParameter = monitoringFilling != null ?
            new ObjectParameter("MonitoringFilling", monitoringFilling) :
            new ObjectParameter("MonitoringFilling", typeof(string));


        var noOfPouchesParameter = noOfPouches != null ?
            new ObjectParameter("NoOfPouches", noOfPouches) :
            new ObjectParameter("NoOfPouches", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var correctiveActionsParameter = correctiveActions != null ?
            new ObjectParameter("CorrectiveActions", correctiveActions) :
            new ObjectParameter("CorrectiveActions", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_HotFillingPackingLineLogSheetCCP_Update", iDParameter, dateParameter, itemNameParameter, releaseTimeParameter, hotLineTempParameter, productTempParameter, cleaningHygineParameter, randomWeightParameter, monitoringParametersParameter, monitoringFillingParameter, noOfPouchesParameter, remarksParameter, correctiveActionsParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_Indent_Delete(Nullable<int> indentId, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var indentIdParameter = indentId.HasValue ?
            new ObjectParameter("IndentId", indentId) :
            new ObjectParameter("IndentId", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Indent_Delete", indentIdParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Indent_GetAll_Result> usp_tbl_Indent_GetAll(string type)
    {

        var typeParameter = type != null ?
            new ObjectParameter("type", type) :
            new ObjectParameter("type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Indent_GetAll_Result>("usp_tbl_Indent_GetAll", typeParameter);
    }


    public virtual ObjectResult<usp_tbl_Indent_GetAllForIndent_Result> usp_tbl_Indent_GetAllForIndent()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Indent_GetAllForIndent_Result>("usp_tbl_Indent_GetAllForIndent");
    }


    public virtual ObjectResult<usp_tbl_Indent_GetByID_Result> usp_tbl_Indent_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Indent_GetByID_Result>("usp_tbl_Indent_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_Indent_Insert_Result> usp_tbl_Indent_Insert(string indentNumber, Nullable<System.DateTime> indentDate, Nullable<int> locationId, string locationName, string userName, Nullable<int> indentBy, Nullable<int> designationId, string designationName, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var indentDateParameter = indentDate.HasValue ?
            new ObjectParameter("IndentDate", indentDate) :
            new ObjectParameter("IndentDate", typeof(System.DateTime));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var indentByParameter = indentBy.HasValue ?
            new ObjectParameter("IndentBy", indentBy) :
            new ObjectParameter("IndentBy", typeof(int));


        var designationIdParameter = designationId.HasValue ?
            new ObjectParameter("DesignationId", designationId) :
            new ObjectParameter("DesignationId", typeof(int));


        var designationNameParameter = designationName != null ?
            new ObjectParameter("DesignationName", designationName) :
            new ObjectParameter("DesignationName", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Indent_Insert_Result>("usp_tbl_Indent_Insert", indentNumberParameter, indentDateParameter, locationIdParameter, locationNameParameter, userNameParameter, indentByParameter, designationIdParameter, designationNameParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Indent_Update(Nullable<int> indentId, string indentNumber, Nullable<System.DateTime> indentDate, Nullable<int> locationId, string locationName, string userName, Nullable<int> indentBy, Nullable<int> designationId, string designationName, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var indentIdParameter = indentId.HasValue ?
            new ObjectParameter("IndentId", indentId) :
            new ObjectParameter("IndentId", typeof(int));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var indentDateParameter = indentDate.HasValue ?
            new ObjectParameter("IndentDate", indentDate) :
            new ObjectParameter("IndentDate", typeof(System.DateTime));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var indentByParameter = indentBy.HasValue ?
            new ObjectParameter("IndentBy", indentBy) :
            new ObjectParameter("IndentBy", typeof(int));


        var designationIdParameter = designationId.HasValue ?
            new ObjectParameter("DesignationId", designationId) :
            new ObjectParameter("DesignationId", typeof(int));


        var designationNameParameter = designationName != null ?
            new ObjectParameter("DesignationName", designationName) :
            new ObjectParameter("DesignationName", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Indent_Update", indentIdParameter, indentNumberParameter, indentDateParameter, locationIdParameter, locationNameParameter, userNameParameter, indentByParameter, designationIdParameter, designationNameParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_IndentDetails_Insert(Nullable<int> indentId, Nullable<int> item_ID, string itemName, string item_Code, string itemUnit, Nullable<decimal> itemQuantity, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var indentIdParameter = indentId.HasValue ?
            new ObjectParameter("IndentId", indentId) :
            new ObjectParameter("IndentId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_IndentDetails_Insert", indentIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitParameter, itemQuantityParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_IndentDetails_Update(Nullable<int> indentId, Nullable<int> item_ID, string itemName, string item_Code, string itemUnit, Nullable<decimal> itemQuantity, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var indentIdParameter = indentId.HasValue ?
            new ObjectParameter("IndentId", indentId) :
            new ObjectParameter("IndentId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_IndentDetails_Update", indentIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitParameter, itemQuantityParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual ObjectResult<usp_tbl_IndentItemDetails_GetByID_Result> usp_tbl_IndentItemDetails_GetByID(Nullable<int> id, Nullable<int> currencyId)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var currencyIdParameter = currencyId.HasValue ?
            new ObjectParameter("CurrencyId", currencyId) :
            new ObjectParameter("CurrencyId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_IndentItemDetails_GetByID_Result>("usp_tbl_IndentItemDetails_GetByID", idParameter, currencyIdParameter);
    }


    public virtual ObjectResult<usp_tbl_InquiryForm_GetAll_Result> usp_tbl_InquiryForm_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InquiryForm_GetAll_Result>("usp_tbl_InquiryForm_GetAll");
    }


    public virtual ObjectResult<usp_tbl_InquiryForm_Insert_Result> usp_tbl_InquiryForm_Insert(string inquiryNumber, Nullable<int> inquiryStatusID, Nullable<System.DateTime> dateOfInquiry, string contactPersonName, string clientEmail, string contactNo, Nullable<int> vendorsID, string companyName, Nullable<int> locationId, string locationName, string deliveryAddress, string supplierAddress, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<decimal> grandTotal, Nullable<decimal> totalAfterTax, Nullable<decimal> advancedPayment, string sONumber, Nullable<int> currencyID, string currencyName, string remarks, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var inquiryNumberParameter = inquiryNumber != null ?
            new ObjectParameter("InquiryNumber", inquiryNumber) :
            new ObjectParameter("InquiryNumber", typeof(string));


        var inquiryStatusIDParameter = inquiryStatusID.HasValue ?
            new ObjectParameter("InquiryStatusID", inquiryStatusID) :
            new ObjectParameter("InquiryStatusID", typeof(int));


        var dateOfInquiryParameter = dateOfInquiry.HasValue ?
            new ObjectParameter("DateOfInquiry", dateOfInquiry) :
            new ObjectParameter("DateOfInquiry", typeof(System.DateTime));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var clientEmailParameter = clientEmail != null ?
            new ObjectParameter("ClientEmail", clientEmail) :
            new ObjectParameter("ClientEmail", typeof(string));


        var contactNoParameter = contactNo != null ?
            new ObjectParameter("ContactNo", contactNo) :
            new ObjectParameter("ContactNo", typeof(string));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(decimal));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(decimal));


        var advancedPaymentParameter = advancedPayment.HasValue ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(decimal));


        var sONumberParameter = sONumber != null ?
            new ObjectParameter("SONumber", sONumber) :
            new ObjectParameter("SONumber", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InquiryForm_Insert_Result>("usp_tbl_InquiryForm_Insert", inquiryNumberParameter, inquiryStatusIDParameter, dateOfInquiryParameter, contactPersonNameParameter, clientEmailParameter, contactNoParameter, vendorsIDParameter, companyNameParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, supplierAddressParameter, cGSTParameter, sGSTParameter, iGSTParameter, grandTotalParameter, totalAfterTaxParameter, advancedPaymentParameter, sONumberParameter, currencyIDParameter, currencyNameParameter, remarksParameter, isDeletedParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_InquiryFormItemDetails_Insert(Nullable<int> inquiryID, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, Nullable<decimal> quotedPrice, Nullable<decimal> expectedPrice, Nullable<decimal> closerPrice, string itemUnit, Nullable<decimal> totalItemCost, string hSN_Code, Nullable<System.DateTime> deliveryDate, string remarks, Nullable<int> currencyID, string currencyName, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var quotedPriceParameter = quotedPrice.HasValue ?
            new ObjectParameter("QuotedPrice", quotedPrice) :
            new ObjectParameter("QuotedPrice", typeof(decimal));


        var expectedPriceParameter = expectedPrice.HasValue ?
            new ObjectParameter("ExpectedPrice", expectedPrice) :
            new ObjectParameter("ExpectedPrice", typeof(decimal));


        var closerPriceParameter = closerPrice.HasValue ?
            new ObjectParameter("CloserPrice", closerPrice) :
            new ObjectParameter("CloserPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(decimal));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InquiryFormItemDetails_Insert", inquiryIDParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, quotedPriceParameter, expectedPriceParameter, closerPriceParameter, itemUnitParameter, totalItemCostParameter, hSN_CodeParameter, deliveryDateParameter, remarksParameter, currencyIDParameter, currencyNameParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_InquiryFormItemDetails_Update(Nullable<int> inquiryID, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, Nullable<decimal> quotedPrice, Nullable<decimal> expectedPrice, Nullable<decimal> closerPrice, string itemUnit, Nullable<decimal> totalItemCost, string hSN_Code, Nullable<System.DateTime> deliveryDate, string remarks, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> currencyID, string currencyName)
    {

        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var quotedPriceParameter = quotedPrice.HasValue ?
            new ObjectParameter("QuotedPrice", quotedPrice) :
            new ObjectParameter("QuotedPrice", typeof(decimal));


        var expectedPriceParameter = expectedPrice.HasValue ?
            new ObjectParameter("ExpectedPrice", expectedPrice) :
            new ObjectParameter("ExpectedPrice", typeof(decimal));


        var closerPriceParameter = closerPrice.HasValue ?
            new ObjectParameter("CloserPrice", closerPrice) :
            new ObjectParameter("CloserPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(decimal));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InquiryFormItemDetails_Update", inquiryIDParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, quotedPriceParameter, expectedPriceParameter, closerPriceParameter, itemUnitParameter, totalItemCostParameter, hSN_CodeParameter, deliveryDateParameter, remarksParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, currencyIDParameter, currencyNameParameter);
    }


    public virtual ObjectResult<usp_tbl_InquiryItemDetailsForSO_GetByID_Result> usp_tbl_InquiryItemDetailsForSO_GetByID(Nullable<int> id, Nullable<int> currencyId)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var currencyIdParameter = currencyId.HasValue ?
            new ObjectParameter("CurrencyId", currencyId) :
            new ObjectParameter("CurrencyId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InquiryItemDetailsForSO_GetByID_Result>("usp_tbl_InquiryItemDetailsForSO_GetByID", idParameter, currencyIdParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_InquiryMaster_Update(Nullable<int> inquiryID, string inquiryNumber, Nullable<int> inquiryStatusID, Nullable<System.DateTime> dateOfInquiry, string contactPersonName, string clientEmail, string contactNo, Nullable<int> vendorsID, string companyName, Nullable<int> locationId, string locationName, string deliveryAddress, string supplierAddress, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<decimal> grandTotal, Nullable<decimal> totalAfterTax, Nullable<decimal> advancedPayment, string sONumber, Nullable<int> currencyID, string currencyName, string remarks, Nullable<bool> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var inquiryNumberParameter = inquiryNumber != null ?
            new ObjectParameter("InquiryNumber", inquiryNumber) :
            new ObjectParameter("InquiryNumber", typeof(string));


        var inquiryStatusIDParameter = inquiryStatusID.HasValue ?
            new ObjectParameter("InquiryStatusID", inquiryStatusID) :
            new ObjectParameter("InquiryStatusID", typeof(int));


        var dateOfInquiryParameter = dateOfInquiry.HasValue ?
            new ObjectParameter("DateOfInquiry", dateOfInquiry) :
            new ObjectParameter("DateOfInquiry", typeof(System.DateTime));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var clientEmailParameter = clientEmail != null ?
            new ObjectParameter("ClientEmail", clientEmail) :
            new ObjectParameter("ClientEmail", typeof(string));


        var contactNoParameter = contactNo != null ?
            new ObjectParameter("ContactNo", contactNo) :
            new ObjectParameter("ContactNo", typeof(string));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(decimal));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(decimal));


        var advancedPaymentParameter = advancedPayment.HasValue ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(decimal));


        var sONumberParameter = sONumber != null ?
            new ObjectParameter("SONumber", sONumber) :
            new ObjectParameter("SONumber", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_InquiryMaster_Update", inquiryIDParameter, inquiryNumberParameter, inquiryStatusIDParameter, dateOfInquiryParameter, contactPersonNameParameter, clientEmailParameter, contactNoParameter, vendorsIDParameter, companyNameParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, supplierAddressParameter, cGSTParameter, sGSTParameter, iGSTParameter, grandTotalParameter, totalAfterTaxParameter, advancedPaymentParameter, sONumberParameter, currencyIDParameter, currencyNameParameter, remarksParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_InquiryMasterDetails_Delete(Nullable<int> inquiryID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InquiryMasterDetails_Delete", inquiryIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_InvoiceNoteNumber_GetAll_Result> usp_tbl_InvoiceNoteNumber_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InvoiceNoteNumber_GetAll_Result>("usp_tbl_InvoiceNoteNumber_GetAll");
    }


    public virtual int usp_tbl_InwardItemDetails_GetByID(Nullable<int> pO_Id)
    {

        var pO_IdParameter = pO_Id.HasValue ?
            new ObjectParameter("PO_Id", pO_Id) :
            new ObjectParameter("PO_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardItemDetails_GetByID", pO_IdParameter);
    }


    public virtual int usp_tbl_InwardItemDetails_Insert(Nullable<int> purchaseOrderId, Nullable<int> inwardNoteId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<double> pOQuantity, Nullable<decimal> itemTaxValue, Nullable<decimal> itemUnitPrice, string itemUnit, Nullable<decimal> inwardQuantity, Nullable<double> balanceQuantity, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string currencyName)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var inwardNoteIdParameter = inwardNoteId.HasValue ?
            new ObjectParameter("InwardNoteId", inwardNoteId) :
            new ObjectParameter("InwardNoteId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var pOQuantityParameter = pOQuantity.HasValue ?
            new ObjectParameter("POQuantity", pOQuantity) :
            new ObjectParameter("POQuantity", typeof(double));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var inwardQuantityParameter = inwardQuantity.HasValue ?
            new ObjectParameter("InwardQuantity", inwardQuantity) :
            new ObjectParameter("InwardQuantity", typeof(decimal));


        var balanceQuantityParameter = balanceQuantity.HasValue ?
            new ObjectParameter("BalanceQuantity", balanceQuantity) :
            new ObjectParameter("BalanceQuantity", typeof(double));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardItemDetails_Insert", purchaseOrderIdParameter, inwardNoteIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, pOQuantityParameter, itemTaxValueParameter, itemUnitPriceParameter, itemUnitParameter, inwardQuantityParameter, balanceQuantityParameter, isDeletedParameter, createdByParameter, createdDateParameter, currencyNameParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardItemDetailsForGRN_GetByID_Result> usp_tbl_InwardItemDetailsForGRN_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardItemDetailsForGRN_GetByID_Result>("usp_tbl_InwardItemDetailsForGRN_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardItemDetailsForView_GetByID_Result> usp_tbl_InwardItemDetailsForView_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardItemDetailsForView_GetByID_Result>("usp_tbl_InwardItemDetailsForView_GetByID", iDParameter);
    }


    public virtual int usp_tbl_InwardNote_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardNote_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardNote_GetAll_Result> usp_tbl_InwardNote_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardNote_GetAll_Result>("usp_tbl_InwardNote_GetAll");
    }


    public virtual ObjectResult<usp_tbl_InwardNote_GetByID_Result> usp_tbl_InwardNote_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardNote_GetByID_Result>("usp_tbl_InwardNote_GetByID", iDParameter);
    }


    public virtual int usp_tbl_InwardNote_Insert(Nullable<int> pO_Id, string inwardNumber, Nullable<System.DateTime> inwardDate, string signature, string challanNo, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var pO_IdParameter = pO_Id.HasValue ?
            new ObjectParameter("PO_Id", pO_Id) :
            new ObjectParameter("PO_Id", typeof(int));


        var inwardNumberParameter = inwardNumber != null ?
            new ObjectParameter("InwardNumber", inwardNumber) :
            new ObjectParameter("InwardNumber", typeof(string));


        var inwardDateParameter = inwardDate.HasValue ?
            new ObjectParameter("InwardDate", inwardDate) :
            new ObjectParameter("InwardDate", typeof(System.DateTime));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var challanNoParameter = challanNo != null ?
            new ObjectParameter("ChallanNo", challanNo) :
            new ObjectParameter("ChallanNo", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardNote_Insert", pO_IdParameter, inwardNumberParameter, inwardDateParameter, signatureParameter, challanNoParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_InwardNote_Update(Nullable<int> iD, Nullable<int> pO_Id, string inwardNumber, Nullable<System.DateTime> inwardDate, string signature, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var pO_IdParameter = pO_Id.HasValue ?
            new ObjectParameter("PO_Id", pO_Id) :
            new ObjectParameter("PO_Id", typeof(int));


        var inwardNumberParameter = inwardNumber != null ?
            new ObjectParameter("InwardNumber", inwardNumber) :
            new ObjectParameter("InwardNumber", typeof(string));


        var inwardDateParameter = inwardDate.HasValue ?
            new ObjectParameter("InwardDate", inwardDate) :
            new ObjectParameter("InwardDate", typeof(System.DateTime));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardNote_Update", iDParameter, pO_IdParameter, inwardNumberParameter, inwardDateParameter, signatureParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardNoteForGRN_GetAll_Result> usp_tbl_InwardNoteForGRN_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardNoteForGRN_GetAll_Result>("usp_tbl_InwardNoteForGRN_GetAll");
    }


    public virtual int usp_tbl_InwardQC_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardQC_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardQC_GetByID_Result> usp_tbl_InwardQC_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardQC_GetByID_Result>("usp_tbl_InwardQC_GetByID", iDParameter);
    }


    public virtual int usp_tbl_InwardQCItemDetails_GetByInwId(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_InwardQCItemDetails_GetByInwId", iDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_InwardQCItemDetails_Insert(Nullable<int> inwardNote_Id, Nullable<int> inwardQCId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, string itemUnit, string itemTaxValue, Nullable<decimal> inwardQuantity, Nullable<double> quantityTookForSorting, Nullable<double> balanceQuantity, Nullable<double> rejectedQuantity, Nullable<double> wastageQuantityInPercentage, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string currencyName, string supplierName)
    {

        var inwardNote_IdParameter = inwardNote_Id.HasValue ?
            new ObjectParameter("InwardNote_Id", inwardNote_Id) :
            new ObjectParameter("InwardNote_Id", typeof(int));


        var inwardQCIdParameter = inwardQCId.HasValue ?
            new ObjectParameter("InwardQCId", inwardQCId) :
            new ObjectParameter("InwardQCId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemTaxValueParameter = itemTaxValue != null ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(string));


        var inwardQuantityParameter = inwardQuantity.HasValue ?
            new ObjectParameter("InwardQuantity", inwardQuantity) :
            new ObjectParameter("InwardQuantity", typeof(decimal));


        var quantityTookForSortingParameter = quantityTookForSorting.HasValue ?
            new ObjectParameter("QuantityTookForSorting", quantityTookForSorting) :
            new ObjectParameter("QuantityTookForSorting", typeof(double));


        var balanceQuantityParameter = balanceQuantity.HasValue ?
            new ObjectParameter("BalanceQuantity", balanceQuantity) :
            new ObjectParameter("BalanceQuantity", typeof(double));


        var rejectedQuantityParameter = rejectedQuantity.HasValue ?
            new ObjectParameter("RejectedQuantity", rejectedQuantity) :
            new ObjectParameter("RejectedQuantity", typeof(double));


        var wastageQuantityInPercentageParameter = wastageQuantityInPercentage.HasValue ?
            new ObjectParameter("WastageQuantityInPercentage", wastageQuantityInPercentage) :
            new ObjectParameter("WastageQuantityInPercentage", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var supplierNameParameter = supplierName != null ?
            new ObjectParameter("SupplierName", supplierName) :
            new ObjectParameter("SupplierName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_InwardQCItemDetails_Insert", inwardNote_IdParameter, inwardQCIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemUnitParameter, itemTaxValueParameter, inwardQuantityParameter, quantityTookForSortingParameter, balanceQuantityParameter, rejectedQuantityParameter, wastageQuantityInPercentageParameter, remarksParameter, createdByParameter, createdDateParameter, currencyNameParameter, supplierNameParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardQCItemDetailsFor_RN_ItemDetails_GetByID_Result> usp_tbl_InwardQCItemDetailsFor_RN_ItemDetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardQCItemDetailsFor_RN_ItemDetails_GetByID_Result>("usp_tbl_InwardQCItemDetailsFor_RN_ItemDetails_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardQCItemDetailsForView_GetByID_Result> usp_tbl_InwardQCItemDetailsForView_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardQCItemDetailsForView_GetByID_Result>("usp_tbl_InwardQCItemDetailsForView_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_InwardQCSorting_GetAll_Result> usp_tbl_InwardQCSorting_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardQCSorting_GetAll_Result>("usp_tbl_InwardQCSorting_GetAll");
    }


    public virtual ObjectResult<usp_tbl_InwardQCSorting_Insert_Result> usp_tbl_InwardQCSorting_Insert(string inwardQCNo, Nullable<int> inwardNote_Id, Nullable<System.DateTime> inwardQCDate, string remarks, string quantitiesForSorting, string balanceQuantities, string rejectedQuantities, string wastageQuantities, string reasonsForRejection, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var inwardQCNoParameter = inwardQCNo != null ?
            new ObjectParameter("InwardQCNo", inwardQCNo) :
            new ObjectParameter("InwardQCNo", typeof(string));


        var inwardNote_IdParameter = inwardNote_Id.HasValue ?
            new ObjectParameter("InwardNote_Id", inwardNote_Id) :
            new ObjectParameter("InwardNote_Id", typeof(int));


        var inwardQCDateParameter = inwardQCDate.HasValue ?
            new ObjectParameter("InwardQCDate", inwardQCDate) :
            new ObjectParameter("InwardQCDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var quantitiesForSortingParameter = quantitiesForSorting != null ?
            new ObjectParameter("QuantitiesForSorting", quantitiesForSorting) :
            new ObjectParameter("QuantitiesForSorting", typeof(string));


        var balanceQuantitiesParameter = balanceQuantities != null ?
            new ObjectParameter("BalanceQuantities", balanceQuantities) :
            new ObjectParameter("BalanceQuantities", typeof(string));


        var rejectedQuantitiesParameter = rejectedQuantities != null ?
            new ObjectParameter("RejectedQuantities", rejectedQuantities) :
            new ObjectParameter("RejectedQuantities", typeof(string));


        var wastageQuantitiesParameter = wastageQuantities != null ?
            new ObjectParameter("WastageQuantities", wastageQuantities) :
            new ObjectParameter("WastageQuantities", typeof(string));


        var reasonsForRejectionParameter = reasonsForRejection != null ?
            new ObjectParameter("ReasonsForRejection", reasonsForRejection) :
            new ObjectParameter("ReasonsForRejection", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwardQCSorting_Insert_Result>("usp_tbl_InwardQCSorting_Insert", inwardQCNoParameter, inwardNote_IdParameter, inwardQCDateParameter, remarksParameter, quantitiesForSortingParameter, balanceQuantitiesParameter, rejectedQuantitiesParameter, wastageQuantitiesParameter, reasonsForRejectionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<usp_tbl_InwdDetailsForGRN_GetByID_Result> usp_tbl_InwdDetailsForGRN_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwdDetailsForGRN_GetByID_Result>("usp_tbl_InwdDetailsForGRN_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_InwNoteForInwQC_GetByID_Result> usp_tbl_InwNoteForInwQC_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_InwNoteForInwQC_GetByID_Result>("usp_tbl_InwNoteForInwQC_GetByID", iDParameter);
    }


    public virtual int usp_tbl_IssueNote_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_IssueNote_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_IssueNote_Insert_Result> usp_tbl_IssueNote_Insert(string issueNoteNo, Nullable<System.DateTime> issueNoteDate, Nullable<int> issueBy, string issueByName, Nullable<int> locationId, string locationName, string purpose, string workOrderNumber, string qCNumber, string sONumber, string otherPurpose, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var issueNoteNoParameter = issueNoteNo != null ?
            new ObjectParameter("IssueNoteNo", issueNoteNo) :
            new ObjectParameter("IssueNoteNo", typeof(string));


        var issueNoteDateParameter = issueNoteDate.HasValue ?
            new ObjectParameter("IssueNoteDate", issueNoteDate) :
            new ObjectParameter("IssueNoteDate", typeof(System.DateTime));


        var issueByParameter = issueBy.HasValue ?
            new ObjectParameter("IssueBy", issueBy) :
            new ObjectParameter("IssueBy", typeof(int));


        var issueByNameParameter = issueByName != null ?
            new ObjectParameter("IssueByName", issueByName) :
            new ObjectParameter("IssueByName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var purposeParameter = purpose != null ?
            new ObjectParameter("Purpose", purpose) :
            new ObjectParameter("Purpose", typeof(string));


        var workOrderNumberParameter = workOrderNumber != null ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(string));


        var qCNumberParameter = qCNumber != null ?
            new ObjectParameter("QCNumber", qCNumber) :
            new ObjectParameter("QCNumber", typeof(string));


        var sONumberParameter = sONumber != null ?
            new ObjectParameter("SONumber", sONumber) :
            new ObjectParameter("SONumber", typeof(string));


        var otherPurposeParameter = otherPurpose != null ?
            new ObjectParameter("OtherPurpose", otherPurpose) :
            new ObjectParameter("OtherPurpose", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_IssueNote_Insert_Result>("usp_tbl_IssueNote_Insert", issueNoteNoParameter, issueNoteDateParameter, issueByParameter, issueByNameParameter, locationIdParameter, locationNameParameter, purposeParameter, workOrderNumberParameter, qCNumberParameter, sONumberParameter, otherPurposeParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_IssueNoteDetails_Insert(Nullable<int> issueNoteId, Nullable<int> itemId, string item_Name, string item_Code, Nullable<decimal> itemUnitPrice, string currencyName, Nullable<decimal> quantityRequested, string itemUnit, Nullable<decimal> availableStockBeforeIssue, Nullable<decimal> stockAfterIssuing, Nullable<decimal> quantityIssued, string description, Nullable<int> isDeleted, Nullable<int> locationId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var issueNoteIdParameter = issueNoteId.HasValue ?
            new ObjectParameter("IssueNoteId", issueNoteId) :
            new ObjectParameter("IssueNoteId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var quantityRequestedParameter = quantityRequested.HasValue ?
            new ObjectParameter("QuantityRequested", quantityRequested) :
            new ObjectParameter("QuantityRequested", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var availableStockBeforeIssueParameter = availableStockBeforeIssue.HasValue ?
            new ObjectParameter("AvailableStockBeforeIssue", availableStockBeforeIssue) :
            new ObjectParameter("AvailableStockBeforeIssue", typeof(decimal));


        var stockAfterIssuingParameter = stockAfterIssuing.HasValue ?
            new ObjectParameter("StockAfterIssuing", stockAfterIssuing) :
            new ObjectParameter("StockAfterIssuing", typeof(decimal));


        var quantityIssuedParameter = quantityIssued.HasValue ?
            new ObjectParameter("QuantityIssued", quantityIssued) :
            new ObjectParameter("QuantityIssued", typeof(decimal));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_IssueNoteDetails_Insert", issueNoteIdParameter, itemIdParameter, item_NameParameter, item_CodeParameter, itemUnitPriceParameter, currencyNameParameter, quantityRequestedParameter, itemUnitParameter, availableStockBeforeIssueParameter, stockAfterIssuingParameter, quantityIssuedParameter, descriptionParameter, isDeletedParameter, locationIdParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_Item_Delete(Nullable<int> item_ID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Item_Delete", item_IDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Item_GetAll_Result> usp_tbl_Item_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Item_GetAll_Result>("usp_tbl_Item_GetAll");
    }


    public virtual ObjectResult<usp_tbl_Item_GetByID_Result> usp_tbl_Item_GetByID(Nullable<int> item_ID)
    {

        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Item_GetByID_Result>("usp_tbl_Item_GetByID", item_IDParameter);
    }


    public virtual int usp_tbl_Item_Insert(Nullable<int> itemTypeID, string itemTypeName, Nullable<int> itemCategory_ID, string itemCategory_Name, string item_Code, string item_Name, string hSN_Code, Nullable<int> uOM, Nullable<double> minStock, Nullable<decimal> unitPrice, Nullable<int> taxId, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var itemTypeIDParameter = itemTypeID.HasValue ?
            new ObjectParameter("ItemTypeID", itemTypeID) :
            new ObjectParameter("ItemTypeID", typeof(int));


        var itemTypeNameParameter = itemTypeName != null ?
            new ObjectParameter("ItemTypeName", itemTypeName) :
            new ObjectParameter("ItemTypeName", typeof(string));


        var itemCategory_IDParameter = itemCategory_ID.HasValue ?
            new ObjectParameter("ItemCategory_ID", itemCategory_ID) :
            new ObjectParameter("ItemCategory_ID", typeof(int));


        var itemCategory_NameParameter = itemCategory_Name != null ?
            new ObjectParameter("ItemCategory_Name", itemCategory_Name) :
            new ObjectParameter("ItemCategory_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var uOMParameter = uOM.HasValue ?
            new ObjectParameter("UOM", uOM) :
            new ObjectParameter("UOM", typeof(int));


        var minStockParameter = minStock.HasValue ?
            new ObjectParameter("MinStock", minStock) :
            new ObjectParameter("MinStock", typeof(double));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(decimal));


        var taxIdParameter = taxId.HasValue ?
            new ObjectParameter("TaxId", taxId) :
            new ObjectParameter("TaxId", typeof(int));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Item_Insert", itemTypeIDParameter, itemTypeNameParameter, itemCategory_IDParameter, itemCategory_NameParameter, item_CodeParameter, item_NameParameter, hSN_CodeParameter, uOMParameter, minStockParameter, unitPriceParameter, taxIdParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Item_Update(Nullable<int> item_ID, Nullable<int> itemTypeID, Nullable<int> itemCategory_ID, string item_Code, string item_Name, string hSN_Code, Nullable<int> uOM, Nullable<double> minStock, Nullable<decimal> unitPrice, Nullable<int> taxId, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemTypeIDParameter = itemTypeID.HasValue ?
            new ObjectParameter("ItemTypeID", itemTypeID) :
            new ObjectParameter("ItemTypeID", typeof(int));


        var itemCategory_IDParameter = itemCategory_ID.HasValue ?
            new ObjectParameter("ItemCategory_ID", itemCategory_ID) :
            new ObjectParameter("ItemCategory_ID", typeof(int));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var uOMParameter = uOM.HasValue ?
            new ObjectParameter("UOM", uOM) :
            new ObjectParameter("UOM", typeof(int));


        var minStockParameter = minStock.HasValue ?
            new ObjectParameter("MinStock", minStock) :
            new ObjectParameter("MinStock", typeof(double));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(decimal));


        var taxIdParameter = taxId.HasValue ?
            new ObjectParameter("TaxId", taxId) :
            new ObjectParameter("TaxId", typeof(int));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Item_Update", item_IDParameter, itemTypeIDParameter, itemCategory_IDParameter, item_CodeParameter, item_NameParameter, hSN_CodeParameter, uOMParameter, minStockParameter, unitPriceParameter, taxIdParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_ItemCategory_Delete(Nullable<int> itemCategoryID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var itemCategoryIDParameter = itemCategoryID.HasValue ?
            new ObjectParameter("ItemCategoryID", itemCategoryID) :
            new ObjectParameter("ItemCategoryID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ItemCategory_Delete", itemCategoryIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ItemCategory_GetAll_Result> usp_tbl_ItemCategory_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ItemCategory_GetAll_Result>("usp_tbl_ItemCategory_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ItemCategory_GetByID_Result> usp_tbl_ItemCategory_GetByID(Nullable<int> itemCategoryID)
    {

        var itemCategoryIDParameter = itemCategoryID.HasValue ?
            new ObjectParameter("ItemCategoryID", itemCategoryID) :
            new ObjectParameter("ItemCategoryID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ItemCategory_GetByID_Result>("usp_tbl_ItemCategory_GetByID", itemCategoryIDParameter);
    }


    public virtual int usp_tbl_ItemCategory_Insert(Nullable<int> itemTypeId, string itemCategoryName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var itemTypeIdParameter = itemTypeId.HasValue ?
            new ObjectParameter("ItemTypeId", itemTypeId) :
            new ObjectParameter("ItemTypeId", typeof(int));


        var itemCategoryNameParameter = itemCategoryName != null ?
            new ObjectParameter("ItemCategoryName", itemCategoryName) :
            new ObjectParameter("ItemCategoryName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ItemCategory_Insert", itemTypeIdParameter, itemCategoryNameParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ItemCategory_Update(Nullable<int> itemCategoryId, Nullable<int> itemTypeId, string itemCategoryName, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var itemCategoryIdParameter = itemCategoryId.HasValue ?
            new ObjectParameter("ItemCategoryId", itemCategoryId) :
            new ObjectParameter("ItemCategoryId", typeof(int));


        var itemTypeIdParameter = itemTypeId.HasValue ?
            new ObjectParameter("ItemTypeId", itemTypeId) :
            new ObjectParameter("ItemTypeId", typeof(int));


        var itemCategoryNameParameter = itemCategoryName != null ?
            new ObjectParameter("ItemCategoryName", itemCategoryName) :
            new ObjectParameter("ItemCategoryName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ItemCategory_Update", itemCategoryIdParameter, itemTypeIdParameter, itemCategoryNameParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_ItemType_Delete(Nullable<int> itemTypeID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var itemTypeIDParameter = itemTypeID.HasValue ?
            new ObjectParameter("ItemTypeID", itemTypeID) :
            new ObjectParameter("ItemTypeID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ItemType_Delete", itemTypeIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ItemType_GetAll_Result> usp_tbl_ItemType_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ItemType_GetAll_Result>("usp_tbl_ItemType_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ItemType_GetByID_Result> usp_tbl_ItemType_GetByID(Nullable<int> itemTypeID)
    {

        var itemTypeIDParameter = itemTypeID.HasValue ?
            new ObjectParameter("ItemTypeID", itemTypeID) :
            new ObjectParameter("ItemTypeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ItemType_GetByID_Result>("usp_tbl_ItemType_GetByID", itemTypeIDParameter);
    }


    public virtual int usp_tbl_ItemType_Insert(string itemType, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var itemTypeParameter = itemType != null ?
            new ObjectParameter("ItemType", itemType) :
            new ObjectParameter("ItemType", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ItemType_Insert", itemTypeParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ItemType_Update(Nullable<int> itemTypeId, string itemType, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var itemTypeIdParameter = itemTypeId.HasValue ?
            new ObjectParameter("ItemTypeId", itemTypeId) :
            new ObjectParameter("ItemTypeId", typeof(int));


        var itemTypeParameter = itemType != null ?
            new ObjectParameter("ItemType", itemType) :
            new ObjectParameter("ItemType", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ItemType_Update", itemTypeIdParameter, itemTypeParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_LocationMaster_Delete(Nullable<int> locationID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_LocationMaster_Delete", locationIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_LocationMaster_GetAll_Result> usp_tbl_LocationMaster_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LocationMaster_GetAll_Result>("usp_tbl_LocationMaster_GetAll");
    }


    public virtual ObjectResult<usp_tbl_LocationMaster_GetAll_DeliveryAddress_Result> usp_tbl_LocationMaster_GetAll_DeliveryAddress(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LocationMaster_GetAll_DeliveryAddress_Result>("usp_tbl_LocationMaster_GetAll_DeliveryAddress", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_LocationMaster_GetByID_Result> usp_tbl_LocationMaster_GetByID(Nullable<int> locationID)
    {

        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LocationMaster_GetByID_Result>("usp_tbl_LocationMaster_GetByID", locationIDParameter);
    }


    public virtual int usp_tbl_LocationMaster_Insert(string locationName, string address, string remark, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_LocationMaster_Insert", locationNameParameter, addressParameter, remarkParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_LocationMaster_Update(Nullable<int> locationID, string locationName, string address, string remark, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_LocationMaster_Update", locationIDParameter, locationNameParameter, addressParameter, remarkParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_LocationName_GetAll_Result> usp_tbl_LocationName_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LocationName_GetAll_Result>("usp_tbl_LocationName_GetAll");
    }


    public virtual ObjectResult<usp_tbl_LocationStockDetailsForStockAdjustment_GetByID_Result> usp_tbl_LocationStockDetailsForStockAdjustment_GetByID(Nullable<int> location_Id, Nullable<int> item_Id)
    {

        var location_IdParameter = location_Id.HasValue ?
            new ObjectParameter("Location_Id", location_Id) :
            new ObjectParameter("Location_Id", typeof(int));


        var item_IdParameter = item_Id.HasValue ?
            new ObjectParameter("Item_Id", item_Id) :
            new ObjectParameter("Item_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LocationStockDetailsForStockAdjustment_GetByID_Result>("usp_tbl_LocationStockDetailsForStockAdjustment_GetByID", location_IdParameter, item_IdParameter);
    }


    public virtual ObjectResult<usp_tbl_LocationWiseStock_GetAll_Quantity_Result> usp_tbl_LocationWiseStock_GetAll_Quantity(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LocationWiseStock_GetAll_Quantity_Result>("usp_tbl_LocationWiseStock_GetAll_Quantity", iDParameter);
    }


    public virtual int usp_tbl_LocationWiseStock_Insert(Nullable<int> from_LocationID, Nullable<int> to_LocationID, Nullable<double> transf_Quantity, Nullable<double> quantity, Nullable<int> itemId, Nullable<double> itemUnitPrice, string itemUnit, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<System.DateTime> inwardDateOfItem)
    {

        var from_LocationIDParameter = from_LocationID.HasValue ?
            new ObjectParameter("From_LocationID", from_LocationID) :
            new ObjectParameter("From_LocationID", typeof(int));


        var to_LocationIDParameter = to_LocationID.HasValue ?
            new ObjectParameter("To_LocationID", to_LocationID) :
            new ObjectParameter("To_LocationID", typeof(int));


        var transf_QuantityParameter = transf_Quantity.HasValue ?
            new ObjectParameter("Transf_Quantity", transf_Quantity) :
            new ObjectParameter("Transf_Quantity", typeof(double));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(double));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(double));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var inwardDateOfItemParameter = inwardDateOfItem.HasValue ?
            new ObjectParameter("InwardDateOfItem", inwardDateOfItem) :
            new ObjectParameter("InwardDateOfItem", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_LocationWiseStock_Insert", from_LocationIDParameter, to_LocationIDParameter, transf_QuantityParameter, quantityParameter, itemIdParameter, itemUnitPriceParameter, itemUnitParameter, isDeletedParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter, inwardDateOfItemParameter);
    }


    public virtual ObjectResult<usp_tbl_LoginAuthentication_Result> usp_tbl_LoginAuthentication(string userName, string password)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("userName", userName) :
            new ObjectParameter("userName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("password", password) :
            new ObjectParameter("password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_LoginAuthentication_Result>("usp_tbl_LoginAuthentication", userNameParameter, passwordParameter);
    }


    public virtual int usp_tbl_MicroAnalysis_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_MicroAnalysis_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_MicroAnalysis_GetAll_Result> usp_tbl_MicroAnalysis_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_MicroAnalysis_GetAll_Result>("usp_tbl_MicroAnalysis_GetAll");
    }


    public virtual ObjectResult<usp_tbl_MicroAnalysis_GetAllByDate_Result> usp_tbl_MicroAnalysis_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_MicroAnalysis_GetAllByDate_Result>("usp_tbl_MicroAnalysis_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_MicroAnalysis_GetByID_Result> usp_tbl_MicroAnalysis_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_MicroAnalysis_GetByID_Result>("usp_tbl_MicroAnalysis_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_MicroAnalysis_Insert(string source, Nullable<System.DateTime> date, string wOPO, string productName, string batchNo, string packingSize, Nullable<System.DateTime> bestBeforeDate, string clostridiumPerfringens, string escherichiaColi, string salmonella, string totalPlateCountNumber, string yeastandMould, string coliform, string verifyByName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var sourceParameter = source != null ?
            new ObjectParameter("Source", source) :
            new ObjectParameter("Source", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var wOPOParameter = wOPO != null ?
            new ObjectParameter("WOPO", wOPO) :
            new ObjectParameter("WOPO", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var packingSizeParameter = packingSize != null ?
            new ObjectParameter("PackingSize", packingSize) :
            new ObjectParameter("PackingSize", typeof(string));


        var bestBeforeDateParameter = bestBeforeDate.HasValue ?
            new ObjectParameter("BestBeforeDate", bestBeforeDate) :
            new ObjectParameter("BestBeforeDate", typeof(System.DateTime));


        var clostridiumPerfringensParameter = clostridiumPerfringens != null ?
            new ObjectParameter("ClostridiumPerfringens", clostridiumPerfringens) :
            new ObjectParameter("ClostridiumPerfringens", typeof(string));


        var escherichiaColiParameter = escherichiaColi != null ?
            new ObjectParameter("EscherichiaColi", escherichiaColi) :
            new ObjectParameter("EscherichiaColi", typeof(string));


        var salmonellaParameter = salmonella != null ?
            new ObjectParameter("Salmonella", salmonella) :
            new ObjectParameter("Salmonella", typeof(string));


        var totalPlateCountNumberParameter = totalPlateCountNumber != null ?
            new ObjectParameter("TotalPlateCountNumber", totalPlateCountNumber) :
            new ObjectParameter("TotalPlateCountNumber", typeof(string));


        var yeastandMouldParameter = yeastandMould != null ?
            new ObjectParameter("YeastandMould", yeastandMould) :
            new ObjectParameter("YeastandMould", typeof(string));


        var coliformParameter = coliform != null ?
            new ObjectParameter("Coliform", coliform) :
            new ObjectParameter("Coliform", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_MicroAnalysis_Insert", sourceParameter, dateParameter, wOPOParameter, productNameParameter, batchNoParameter, packingSizeParameter, bestBeforeDateParameter, clostridiumPerfringensParameter, escherichiaColiParameter, salmonellaParameter, totalPlateCountNumberParameter, yeastandMouldParameter, coliformParameter, verifyByNameParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_MicroAnalysis_Update(Nullable<int> id, string source, Nullable<System.DateTime> date, string wOPO, string productName, string batchNo, string packingSize, Nullable<System.DateTime> bestBeforeDate, string clostridiumPerfringens, string escherichiaColi, string salmonella, string totalPlateCountNumber, string yeastandMould, string coliform, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var sourceParameter = source != null ?
            new ObjectParameter("Source", source) :
            new ObjectParameter("Source", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var wOPOParameter = wOPO != null ?
            new ObjectParameter("WOPO", wOPO) :
            new ObjectParameter("WOPO", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var packingSizeParameter = packingSize != null ?
            new ObjectParameter("PackingSize", packingSize) :
            new ObjectParameter("PackingSize", typeof(string));


        var bestBeforeDateParameter = bestBeforeDate.HasValue ?
            new ObjectParameter("BestBeforeDate", bestBeforeDate) :
            new ObjectParameter("BestBeforeDate", typeof(System.DateTime));


        var clostridiumPerfringensParameter = clostridiumPerfringens != null ?
            new ObjectParameter("ClostridiumPerfringens", clostridiumPerfringens) :
            new ObjectParameter("ClostridiumPerfringens", typeof(string));


        var escherichiaColiParameter = escherichiaColi != null ?
            new ObjectParameter("EscherichiaColi", escherichiaColi) :
            new ObjectParameter("EscherichiaColi", typeof(string));


        var salmonellaParameter = salmonella != null ?
            new ObjectParameter("Salmonella", salmonella) :
            new ObjectParameter("Salmonella", typeof(string));


        var totalPlateCountNumberParameter = totalPlateCountNumber != null ?
            new ObjectParameter("TotalPlateCountNumber", totalPlateCountNumber) :
            new ObjectParameter("TotalPlateCountNumber", typeof(string));


        var yeastandMouldParameter = yeastandMould != null ?
            new ObjectParameter("YeastandMould", yeastandMould) :
            new ObjectParameter("YeastandMould", typeof(string));


        var coliformParameter = coliform != null ?
            new ObjectParameter("Coliform", coliform) :
            new ObjectParameter("Coliform", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_MicroAnalysis_Update", idParameter, sourceParameter, dateParameter, wOPOParameter, productNameParameter, batchNoParameter, packingSizeParameter, bestBeforeDateParameter, clostridiumPerfringensParameter, escherichiaColiParameter, salmonellaParameter, totalPlateCountNumberParameter, yeastandMouldParameter, coliformParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_OilAnalysis_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_OilAnalysis_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_OilAnalysis_GetAll_Result> usp_tbl_OilAnalysis_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_OilAnalysis_GetAll_Result>("usp_tbl_OilAnalysis_GetAll");
    }


    public virtual ObjectResult<usp_tbl_OilAnalysis_GetAllByDate_Result> usp_tbl_OilAnalysis_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_OilAnalysis_GetAllByDate_Result>("usp_tbl_OilAnalysis_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_OilAnalysis_GetByID_Result> usp_tbl_OilAnalysis_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_OilAnalysis_GetByID_Result>("usp_tbl_OilAnalysis_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_OilAnalysis_Insert(Nullable<System.DateTime> date, string time, string lotNo, string sampleName, Nullable<decimal> aCIDValue, string peroxideValue, string color, string flavour, string odour, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeParameter = time != null ?
            new ObjectParameter("Time", time) :
            new ObjectParameter("Time", typeof(string));


        var lotNoParameter = lotNo != null ?
            new ObjectParameter("LotNo", lotNo) :
            new ObjectParameter("LotNo", typeof(string));


        var sampleNameParameter = sampleName != null ?
            new ObjectParameter("SampleName", sampleName) :
            new ObjectParameter("SampleName", typeof(string));


        var aCIDValueParameter = aCIDValue.HasValue ?
            new ObjectParameter("ACIDValue", aCIDValue) :
            new ObjectParameter("ACIDValue", typeof(decimal));


        var peroxideValueParameter = peroxideValue != null ?
            new ObjectParameter("PeroxideValue", peroxideValue) :
            new ObjectParameter("PeroxideValue", typeof(string));


        var colorParameter = color != null ?
            new ObjectParameter("Color", color) :
            new ObjectParameter("Color", typeof(string));


        var flavourParameter = flavour != null ?
            new ObjectParameter("Flavour", flavour) :
            new ObjectParameter("Flavour", typeof(string));


        var odourParameter = odour != null ?
            new ObjectParameter("Odour", odour) :
            new ObjectParameter("Odour", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_OilAnalysis_Insert", dateParameter, timeParameter, lotNoParameter, sampleNameParameter, aCIDValueParameter, peroxideValueParameter, colorParameter, flavourParameter, odourParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_OilAnalysis_Update(Nullable<int> id, Nullable<System.DateTime> date, string time, string lotNo, string sampleName, Nullable<decimal> aCIDValue, string peroxideValue, string color, string flavour, string odour, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeParameter = time != null ?
            new ObjectParameter("Time", time) :
            new ObjectParameter("Time", typeof(string));


        var lotNoParameter = lotNo != null ?
            new ObjectParameter("LotNo", lotNo) :
            new ObjectParameter("LotNo", typeof(string));


        var sampleNameParameter = sampleName != null ?
            new ObjectParameter("SampleName", sampleName) :
            new ObjectParameter("SampleName", typeof(string));


        var aCIDValueParameter = aCIDValue.HasValue ?
            new ObjectParameter("ACIDValue", aCIDValue) :
            new ObjectParameter("ACIDValue", typeof(decimal));


        var peroxideValueParameter = peroxideValue != null ?
            new ObjectParameter("PeroxideValue", peroxideValue) :
            new ObjectParameter("PeroxideValue", typeof(string));


        var colorParameter = color != null ?
            new ObjectParameter("Color", color) :
            new ObjectParameter("Color", typeof(string));


        var flavourParameter = flavour != null ?
            new ObjectParameter("Flavour", flavour) :
            new ObjectParameter("Flavour", typeof(string));


        var odourParameter = odour != null ?
            new ObjectParameter("Odour", odour) :
            new ObjectParameter("Odour", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_OilAnalysis_Update", idParameter, dateParameter, timeParameter, lotNoParameter, sampleNameParameter, aCIDValueParameter, peroxideValueParameter, colorParameter, flavourParameter, odourParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_Organisation_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Organisation_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Organisation_GetAll_Result> usp_tbl_Organisation_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Organisation_GetAll_Result>("usp_tbl_Organisation_GetAll");
    }


    public virtual ObjectResult<usp_tbl_Organisation_GetByID_Result> usp_tbl_Organisation_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Organisation_GetByID_Result>("usp_tbl_Organisation_GetByID", iDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Organisation_Insert(Nullable<int> organisationGroupId, string name, string abbreviation, string address, string contactPerson, string contactNo, string email, string gSTINNo, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var organisationGroupIdParameter = organisationGroupId.HasValue ?
            new ObjectParameter("OrganisationGroupId", organisationGroupId) :
            new ObjectParameter("OrganisationGroupId", typeof(int));


        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var abbreviationParameter = abbreviation != null ?
            new ObjectParameter("Abbreviation", abbreviation) :
            new ObjectParameter("Abbreviation", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var contactPersonParameter = contactPerson != null ?
            new ObjectParameter("ContactPerson", contactPerson) :
            new ObjectParameter("ContactPerson", typeof(string));


        var contactNoParameter = contactNo != null ?
            new ObjectParameter("ContactNo", contactNo) :
            new ObjectParameter("ContactNo", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var gSTINNoParameter = gSTINNo != null ?
            new ObjectParameter("GSTINNo", gSTINNo) :
            new ObjectParameter("GSTINNo", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Organisation_Insert", organisationGroupIdParameter, nameParameter, abbreviationParameter, addressParameter, contactPersonParameter, contactNoParameter, emailParameter, gSTINNoParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Organisation_Update(Nullable<int> organisationId, Nullable<int> organisationGroupId, string name, string abbreviation, string address, string contactPerson, string contactNo, string email, string gSTINNo, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var organisationIdParameter = organisationId.HasValue ?
            new ObjectParameter("OrganisationId", organisationId) :
            new ObjectParameter("OrganisationId", typeof(int));


        var organisationGroupIdParameter = organisationGroupId.HasValue ?
            new ObjectParameter("OrganisationGroupId", organisationGroupId) :
            new ObjectParameter("OrganisationGroupId", typeof(int));


        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var abbreviationParameter = abbreviation != null ?
            new ObjectParameter("Abbreviation", abbreviation) :
            new ObjectParameter("Abbreviation", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var contactPersonParameter = contactPerson != null ?
            new ObjectParameter("ContactPerson", contactPerson) :
            new ObjectParameter("ContactPerson", typeof(string));


        var contactNoParameter = contactNo != null ?
            new ObjectParameter("ContactNo", contactNo) :
            new ObjectParameter("ContactNo", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var gSTINNoParameter = gSTINNo != null ?
            new ObjectParameter("GSTINNo", gSTINNo) :
            new ObjectParameter("GSTINNo", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Organisation_Update", organisationIdParameter, organisationGroupIdParameter, nameParameter, abbreviationParameter, addressParameter, contactPersonParameter, contactNoParameter, emailParameter, gSTINNoParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_OrganisationGroups_GetAll_Result> usp_tbl_OrganisationGroups_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_OrganisationGroups_GetAll_Result>("usp_tbl_OrganisationGroups_GetAll");
    }


    public virtual int usp_tbl_OrganisationGroups_M_Insert(Nullable<int> organisationGroupId, string name, string logo, Nullable<System.DateTime> startDate, string description, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var organisationGroupIdParameter = organisationGroupId.HasValue ?
            new ObjectParameter("OrganisationGroupId", organisationGroupId) :
            new ObjectParameter("OrganisationGroupId", typeof(int));


        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var logoParameter = logo != null ?
            new ObjectParameter("Logo", logo) :
            new ObjectParameter("Logo", typeof(string));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_OrganisationGroups_M_Insert", organisationGroupIdParameter, nameParameter, logoParameter, startDateParameter, descriptionParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_OutwardNote_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_OutwardNote_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_OutwardNote_Insert_Result> usp_tbl_OutwardNote_Insert(string outwardNumber, Nullable<System.DateTime> outwardDate, Nullable<int> locationID, string locationName, string locationAddress, string deliveryAddress, string dispatchThrough, string docketNumber, string contactPerson, string contactInformation, Nullable<int> verifiedBy, string verifiedByName, Nullable<bool> isReturnable, string signature, string remarks, string vehicleNo, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var outwardNumberParameter = outwardNumber != null ?
            new ObjectParameter("OutwardNumber", outwardNumber) :
            new ObjectParameter("OutwardNumber", typeof(string));


        var outwardDateParameter = outwardDate.HasValue ?
            new ObjectParameter("OutwardDate", outwardDate) :
            new ObjectParameter("OutwardDate", typeof(System.DateTime));


        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var locationAddressParameter = locationAddress != null ?
            new ObjectParameter("LocationAddress", locationAddress) :
            new ObjectParameter("LocationAddress", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var dispatchThroughParameter = dispatchThrough != null ?
            new ObjectParameter("DispatchThrough", dispatchThrough) :
            new ObjectParameter("DispatchThrough", typeof(string));


        var docketNumberParameter = docketNumber != null ?
            new ObjectParameter("DocketNumber", docketNumber) :
            new ObjectParameter("DocketNumber", typeof(string));


        var contactPersonParameter = contactPerson != null ?
            new ObjectParameter("ContactPerson", contactPerson) :
            new ObjectParameter("ContactPerson", typeof(string));


        var contactInformationParameter = contactInformation != null ?
            new ObjectParameter("ContactInformation", contactInformation) :
            new ObjectParameter("ContactInformation", typeof(string));


        var verifiedByParameter = verifiedBy.HasValue ?
            new ObjectParameter("VerifiedBy", verifiedBy) :
            new ObjectParameter("VerifiedBy", typeof(int));


        var verifiedByNameParameter = verifiedByName != null ?
            new ObjectParameter("VerifiedByName", verifiedByName) :
            new ObjectParameter("VerifiedByName", typeof(string));


        var isReturnableParameter = isReturnable.HasValue ?
            new ObjectParameter("IsReturnable", isReturnable) :
            new ObjectParameter("IsReturnable", typeof(bool));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var vehicleNoParameter = vehicleNo != null ?
            new ObjectParameter("VehicleNo", vehicleNo) :
            new ObjectParameter("VehicleNo", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_OutwardNote_Insert_Result>("usp_tbl_OutwardNote_Insert", outwardNumberParameter, outwardDateParameter, locationIDParameter, locationNameParameter, locationAddressParameter, deliveryAddressParameter, dispatchThroughParameter, docketNumberParameter, contactPersonParameter, contactInformationParameter, verifiedByParameter, verifiedByNameParameter, isReturnableParameter, signatureParameter, remarksParameter, vehicleNoParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_OutwardNote_Update(Nullable<int> iD, string outwardNumber, Nullable<System.DateTime> outwardDate, Nullable<int> locationID, string locationName, string locationAddress, string deliveryAddress, string dispatchThrough, string docketNumber, string contactPerson, string contactInformation, Nullable<int> verifiedBy, string verifiedByName, Nullable<bool> isReturnable, string signature, string remarks, string vehicleNo, Nullable<System.DateTime> lastModifiedDate, Nullable<int> lastModifiedBy)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var outwardNumberParameter = outwardNumber != null ?
            new ObjectParameter("OutwardNumber", outwardNumber) :
            new ObjectParameter("OutwardNumber", typeof(string));


        var outwardDateParameter = outwardDate.HasValue ?
            new ObjectParameter("OutwardDate", outwardDate) :
            new ObjectParameter("OutwardDate", typeof(System.DateTime));


        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var locationAddressParameter = locationAddress != null ?
            new ObjectParameter("LocationAddress", locationAddress) :
            new ObjectParameter("LocationAddress", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var dispatchThroughParameter = dispatchThrough != null ?
            new ObjectParameter("DispatchThrough", dispatchThrough) :
            new ObjectParameter("DispatchThrough", typeof(string));


        var docketNumberParameter = docketNumber != null ?
            new ObjectParameter("DocketNumber", docketNumber) :
            new ObjectParameter("DocketNumber", typeof(string));


        var contactPersonParameter = contactPerson != null ?
            new ObjectParameter("ContactPerson", contactPerson) :
            new ObjectParameter("ContactPerson", typeof(string));


        var contactInformationParameter = contactInformation != null ?
            new ObjectParameter("ContactInformation", contactInformation) :
            new ObjectParameter("ContactInformation", typeof(string));


        var verifiedByParameter = verifiedBy.HasValue ?
            new ObjectParameter("VerifiedBy", verifiedBy) :
            new ObjectParameter("VerifiedBy", typeof(int));


        var verifiedByNameParameter = verifiedByName != null ?
            new ObjectParameter("VerifiedByName", verifiedByName) :
            new ObjectParameter("VerifiedByName", typeof(string));


        var isReturnableParameter = isReturnable.HasValue ?
            new ObjectParameter("IsReturnable", isReturnable) :
            new ObjectParameter("IsReturnable", typeof(bool));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var vehicleNoParameter = vehicleNo != null ?
            new ObjectParameter("VehicleNo", vehicleNo) :
            new ObjectParameter("VehicleNo", typeof(string));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_OutwardNote_Update", iDParameter, outwardNumberParameter, outwardDateParameter, locationIDParameter, locationNameParameter, locationAddressParameter, deliveryAddressParameter, dispatchThroughParameter, docketNumberParameter, contactPersonParameter, contactInformationParameter, verifiedByParameter, verifiedByNameParameter, isReturnableParameter, signatureParameter, remarksParameter, vehicleNoParameter, lastModifiedDateParameter, lastModifiedByParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_OutwardNoteDetails_Insert(Nullable<int> outwardNoteID, Nullable<int> itemId, string item_Name, string item_Code, string itemUnit, Nullable<decimal> outwardQuantity, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var outwardNoteIDParameter = outwardNoteID.HasValue ?
            new ObjectParameter("OutwardNoteID", outwardNoteID) :
            new ObjectParameter("OutwardNoteID", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var outwardQuantityParameter = outwardQuantity.HasValue ?
            new ObjectParameter("OutwardQuantity", outwardQuantity) :
            new ObjectParameter("OutwardQuantity", typeof(decimal));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_OutwardNoteDetails_Insert", outwardNoteIDParameter, itemIdParameter, item_NameParameter, item_CodeParameter, itemUnitParameter, outwardQuantityParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_OutwardNoteDetails_Update(Nullable<int> outwardNoteID, Nullable<int> itemId, string item_Name, string item_Code, string itemUnit, Nullable<decimal> outwardQuantity, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var outwardNoteIDParameter = outwardNoteID.HasValue ?
            new ObjectParameter("OutwardNoteID", outwardNoteID) :
            new ObjectParameter("OutwardNoteID", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var outwardQuantityParameter = outwardQuantity.HasValue ?
            new ObjectParameter("OutwardQuantity", outwardQuantity) :
            new ObjectParameter("OutwardQuantity", typeof(decimal));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_OutwardNoteDetails_Update", outwardNoteIDParameter, itemIdParameter, item_NameParameter, item_CodeParameter, itemUnitParameter, outwardQuantityParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual int usp_tbl_PestControlLog_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PestControlLog_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PestControlLog_GetAll_Result> usp_tbl_PestControlLog_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PestControlLog_GetAll_Result>("usp_tbl_PestControlLog_GetAll");
    }


    public virtual ObjectResult<usp_tbl_PestControlLog_GetAllByDate_Result> usp_tbl_PestControlLog_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PestControlLog_GetAllByDate_Result>("usp_tbl_PestControlLog_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PestControlLog_GetByID_Result> usp_tbl_PestControlLog_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PestControlLog_GetByID_Result>("usp_tbl_PestControlLog_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PestControlLog_Insert(Nullable<System.DateTime> date, string typeOfPest, string methodForPestControl, string area, string frequncy, string cOARecivedFromPestControl, string effectiveOrNot, string anyHazardDetectedAfterPest, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var typeOfPestParameter = typeOfPest != null ?
            new ObjectParameter("TypeOfPest", typeOfPest) :
            new ObjectParameter("TypeOfPest", typeof(string));


        var methodForPestControlParameter = methodForPestControl != null ?
            new ObjectParameter("MethodForPestControl", methodForPestControl) :
            new ObjectParameter("MethodForPestControl", typeof(string));


        var areaParameter = area != null ?
            new ObjectParameter("Area", area) :
            new ObjectParameter("Area", typeof(string));


        var frequncyParameter = frequncy != null ?
            new ObjectParameter("Frequncy", frequncy) :
            new ObjectParameter("Frequncy", typeof(string));


        var cOARecivedFromPestControlParameter = cOARecivedFromPestControl != null ?
            new ObjectParameter("COARecivedFromPestControl", cOARecivedFromPestControl) :
            new ObjectParameter("COARecivedFromPestControl", typeof(string));


        var effectiveOrNotParameter = effectiveOrNot != null ?
            new ObjectParameter("EffectiveOrNot", effectiveOrNot) :
            new ObjectParameter("EffectiveOrNot", typeof(string));


        var anyHazardDetectedAfterPestParameter = anyHazardDetectedAfterPest != null ?
            new ObjectParameter("AnyHazardDetectedAfterPest", anyHazardDetectedAfterPest) :
            new ObjectParameter("AnyHazardDetectedAfterPest", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PestControlLog_Insert", dateParameter, typeOfPestParameter, methodForPestControlParameter, areaParameter, frequncyParameter, cOARecivedFromPestControlParameter, effectiveOrNotParameter, anyHazardDetectedAfterPestParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PestControlLog_Update(Nullable<int> id, Nullable<System.DateTime> date, string typeOfPest, string methodForPestControl, string area, string frequncy, string cOARecivedFromPestControl, string effectiveOrNot, string anyHazardDetectedAfterPest, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var typeOfPestParameter = typeOfPest != null ?
            new ObjectParameter("TypeOfPest", typeOfPest) :
            new ObjectParameter("TypeOfPest", typeof(string));


        var methodForPestControlParameter = methodForPestControl != null ?
            new ObjectParameter("MethodForPestControl", methodForPestControl) :
            new ObjectParameter("MethodForPestControl", typeof(string));


        var areaParameter = area != null ?
            new ObjectParameter("Area", area) :
            new ObjectParameter("Area", typeof(string));


        var frequncyParameter = frequncy != null ?
            new ObjectParameter("Frequncy", frequncy) :
            new ObjectParameter("Frequncy", typeof(string));


        var cOARecivedFromPestControlParameter = cOARecivedFromPestControl != null ?
            new ObjectParameter("COARecivedFromPestControl", cOARecivedFromPestControl) :
            new ObjectParameter("COARecivedFromPestControl", typeof(string));


        var effectiveOrNotParameter = effectiveOrNot != null ?
            new ObjectParameter("EffectiveOrNot", effectiveOrNot) :
            new ObjectParameter("EffectiveOrNot", typeof(string));


        var anyHazardDetectedAfterPestParameter = anyHazardDetectedAfterPest != null ?
            new ObjectParameter("AnyHazardDetectedAfterPest", anyHazardDetectedAfterPest) :
            new ObjectParameter("AnyHazardDetectedAfterPest", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PestControlLog_Update", idParameter, dateParameter, typeOfPestParameter, methodForPestControlParameter, areaParameter, frequncyParameter, cOARecivedFromPestControlParameter, effectiveOrNotParameter, anyHazardDetectedAfterPestParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PINDForRN_GetByID_Result> usp_tbl_PINDForRN_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PINDForRN_GetByID_Result>("usp_tbl_PINDForRN_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_PMNoteForPPQC_GetByID_Result> usp_tbl_PMNoteForPPQC_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PMNoteForPPQC_GetByID_Result>("usp_tbl_PMNoteForPPQC_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_PODetails_GetByID_Result> usp_tbl_PODetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PODetails_GetByID_Result>("usp_tbl_PODetails_GetByID", iDParameter);
    }


    public virtual int usp_tbl_POItemDetailsForCreditNote_GetByID(Nullable<int> pO_Id)
    {

        var pO_IdParameter = pO_Id.HasValue ?
            new ObjectParameter("PO_Id", pO_Id) :
            new ObjectParameter("PO_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_POItemDetailsForCreditNote_GetByID", pO_IdParameter);
    }


    public virtual ObjectResult<usp_tbl_POItemsDetails_GetByID_Result> usp_tbl_POItemsDetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_POItemsDetails_GetByID_Result>("usp_tbl_POItemsDetails_GetByID", iDParameter);
    }


    public virtual int usp_tbl_PONumberForCreditNote_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PONumberForCreditNote_GetAll");
    }


    public virtual ObjectResult<usp_tbl_POPayment_GetByID_Result> usp_tbl_POPayment_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_POPayment_GetByID_Result>("usp_tbl_POPayment_GetByID", idParameter);
    }


    public virtual int usp_tbl_PostProdRN_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PostProdRN_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PostProdRN_GetAll_Result> usp_tbl_PostProdRN_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PostProdRN_GetAll_Result>("usp_tbl_PostProdRN_GetAll");
    }


    public virtual int usp_tbl_PostProdRN_Insert(string postProdRejectionNoteNo, Nullable<System.DateTime> postProdRejectionNoteDate, string postProdRejectionType, Nullable<bool> draftFlag, Nullable<int> fGS_ID, Nullable<int> sO_Id, string sO_No, string workOrderNo, string stage, Nullable<bool> wholeBatchRejection, string batchNumber, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> isDeleted)
    {

        var postProdRejectionNoteNoParameter = postProdRejectionNoteNo != null ?
            new ObjectParameter("PostProdRejectionNoteNo", postProdRejectionNoteNo) :
            new ObjectParameter("PostProdRejectionNoteNo", typeof(string));


        var postProdRejectionNoteDateParameter = postProdRejectionNoteDate.HasValue ?
            new ObjectParameter("PostProdRejectionNoteDate", postProdRejectionNoteDate) :
            new ObjectParameter("PostProdRejectionNoteDate", typeof(System.DateTime));


        var postProdRejectionTypeParameter = postProdRejectionType != null ?
            new ObjectParameter("PostProdRejectionType", postProdRejectionType) :
            new ObjectParameter("PostProdRejectionType", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var fGS_IDParameter = fGS_ID.HasValue ?
            new ObjectParameter("FGS_ID", fGS_ID) :
            new ObjectParameter("FGS_ID", typeof(int));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var sO_NoParameter = sO_No != null ?
            new ObjectParameter("SO_No", sO_No) :
            new ObjectParameter("SO_No", typeof(string));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var stageParameter = stage != null ?
            new ObjectParameter("Stage", stage) :
            new ObjectParameter("Stage", typeof(string));


        var wholeBatchRejectionParameter = wholeBatchRejection.HasValue ?
            new ObjectParameter("WholeBatchRejection", wholeBatchRejection) :
            new ObjectParameter("WholeBatchRejection", typeof(bool));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PostProdRN_Insert", postProdRejectionNoteNoParameter, postProdRejectionNoteDateParameter, postProdRejectionTypeParameter, draftFlagParameter, fGS_IDParameter, sO_IdParameter, sO_NoParameter, workOrderNoParameter, stageParameter, wholeBatchRejectionParameter, batchNumberParameter, remarksParameter, createdByParameter, createdDateParameter, isDeletedParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PostProdRN_Update(Nullable<int> iD, string postProdRejectionNoteNo, Nullable<System.DateTime> postProdRejectionNoteDate, string postProdRejectionType, Nullable<bool> draftFlag, Nullable<int> fGS_ID, Nullable<int> sO_Id, string sO_No, string workOrderNo, string stage, Nullable<bool> wholeBatchRejection, string batchNumber, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> isDeleted)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var postProdRejectionNoteNoParameter = postProdRejectionNoteNo != null ?
            new ObjectParameter("PostProdRejectionNoteNo", postProdRejectionNoteNo) :
            new ObjectParameter("PostProdRejectionNoteNo", typeof(string));


        var postProdRejectionNoteDateParameter = postProdRejectionNoteDate.HasValue ?
            new ObjectParameter("PostProdRejectionNoteDate", postProdRejectionNoteDate) :
            new ObjectParameter("PostProdRejectionNoteDate", typeof(System.DateTime));


        var postProdRejectionTypeParameter = postProdRejectionType != null ?
            new ObjectParameter("PostProdRejectionType", postProdRejectionType) :
            new ObjectParameter("PostProdRejectionType", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var fGS_IDParameter = fGS_ID.HasValue ?
            new ObjectParameter("FGS_ID", fGS_ID) :
            new ObjectParameter("FGS_ID", typeof(int));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var sO_NoParameter = sO_No != null ?
            new ObjectParameter("SO_No", sO_No) :
            new ObjectParameter("SO_No", typeof(string));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var stageParameter = stage != null ?
            new ObjectParameter("Stage", stage) :
            new ObjectParameter("Stage", typeof(string));


        var wholeBatchRejectionParameter = wholeBatchRejection.HasValue ?
            new ObjectParameter("WholeBatchRejection", wholeBatchRejection) :
            new ObjectParameter("WholeBatchRejection", typeof(bool));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PostProdRN_Update", iDParameter, postProdRejectionNoteNoParameter, postProdRejectionNoteDateParameter, postProdRejectionTypeParameter, draftFlagParameter, fGS_IDParameter, sO_IdParameter, sO_NoParameter, workOrderNoParameter, stageParameter, wholeBatchRejectionParameter, batchNumberParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter, isDeletedParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PostProdRNDetails_Insert(Nullable<int> postProdRejectionID, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> orderedQuantity, Nullable<decimal> totalQuantity, Nullable<decimal> rejectedQuantity, string remarks, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var postProdRejectionIDParameter = postProdRejectionID.HasValue ?
            new ObjectParameter("PostProdRejectionID", postProdRejectionID) :
            new ObjectParameter("PostProdRejectionID", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var orderedQuantityParameter = orderedQuantity.HasValue ?
            new ObjectParameter("OrderedQuantity", orderedQuantity) :
            new ObjectParameter("OrderedQuantity", typeof(decimal));


        var totalQuantityParameter = totalQuantity.HasValue ?
            new ObjectParameter("TotalQuantity", totalQuantity) :
            new ObjectParameter("TotalQuantity", typeof(decimal));


        var rejectedQuantityParameter = rejectedQuantity.HasValue ?
            new ObjectParameter("RejectedQuantity", rejectedQuantity) :
            new ObjectParameter("RejectedQuantity", typeof(decimal));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PostProdRNDetails_Insert", postProdRejectionIDParameter, item_IDParameter, itemNameParameter, item_CodeParameter, orderedQuantityParameter, totalQuantityParameter, rejectedQuantityParameter, remarksParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PostProdRNDetails_Update(Nullable<int> postProdRejectionID, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> orderedQuantity, Nullable<decimal> totalQuantity, Nullable<decimal> rejectedQuantity, string remarks, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var postProdRejectionIDParameter = postProdRejectionID.HasValue ?
            new ObjectParameter("PostProdRejectionID", postProdRejectionID) :
            new ObjectParameter("PostProdRejectionID", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var orderedQuantityParameter = orderedQuantity.HasValue ?
            new ObjectParameter("OrderedQuantity", orderedQuantity) :
            new ObjectParameter("OrderedQuantity", typeof(decimal));


        var totalQuantityParameter = totalQuantity.HasValue ?
            new ObjectParameter("TotalQuantity", totalQuantity) :
            new ObjectParameter("TotalQuantity", typeof(decimal));


        var rejectedQuantityParameter = rejectedQuantity.HasValue ?
            new ObjectParameter("RejectedQuantity", rejectedQuantity) :
            new ObjectParameter("RejectedQuantity", typeof(decimal));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PostProdRNDetails_Update", postProdRejectionIDParameter, item_IDParameter, itemNameParameter, item_CodeParameter, orderedQuantityParameter, totalQuantityParameter, rejectedQuantityParameter, remarksParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual ObjectResult<usp_tbl_PostProRNSO_BindItemDetails_Result> usp_tbl_PostProRNSO_BindItemDetails(Nullable<int> fSID, Nullable<int> stage, string type)
    {

        var fSIDParameter = fSID.HasValue ?
            new ObjectParameter("FSID", fSID) :
            new ObjectParameter("FSID", typeof(int));


        var stageParameter = stage.HasValue ?
            new ObjectParameter("Stage", stage) :
            new ObjectParameter("Stage", typeof(int));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PostProRNSO_BindItemDetails_Result>("usp_tbl_PostProRNSO_BindItemDetails", fSIDParameter, stageParameter, typeParameter);
    }


    public virtual ObjectResult<usp_tbl_PostProRNSO_DD_Result> usp_tbl_PostProRNSO_DD()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PostProRNSO_DD_Result>("usp_tbl_PostProRNSO_DD");
    }


    public virtual int usp_tbl_PreProduction_QC_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PreProduction_QC_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PreProduction_QC_GetAll_Result> usp_tbl_PreProduction_QC_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreProduction_QC_GetAll_Result>("usp_tbl_PreProduction_QC_GetAll");
    }


    public virtual ObjectResult<usp_tbl_PreProduction_QC_Insert_Result> usp_tbl_PreProduction_QC_Insert(string qCNumber, Nullable<int> materialIssue_Id, string materialIssue_No, Nullable<int> prodIndent_Id, string prodIndent_No, Nullable<System.DateTime> qCDate, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var qCNumberParameter = qCNumber != null ?
            new ObjectParameter("QCNumber", qCNumber) :
            new ObjectParameter("QCNumber", typeof(string));


        var materialIssue_IdParameter = materialIssue_Id.HasValue ?
            new ObjectParameter("MaterialIssue_Id", materialIssue_Id) :
            new ObjectParameter("MaterialIssue_Id", typeof(int));


        var materialIssue_NoParameter = materialIssue_No != null ?
            new ObjectParameter("MaterialIssue_No", materialIssue_No) :
            new ObjectParameter("MaterialIssue_No", typeof(string));


        var prodIndent_IdParameter = prodIndent_Id.HasValue ?
            new ObjectParameter("ProdIndent_Id", prodIndent_Id) :
            new ObjectParameter("ProdIndent_Id", typeof(int));


        var prodIndent_NoParameter = prodIndent_No != null ?
            new ObjectParameter("ProdIndent_No", prodIndent_No) :
            new ObjectParameter("ProdIndent_No", typeof(string));


        var qCDateParameter = qCDate.HasValue ?
            new ObjectParameter("QCDate", qCDate) :
            new ObjectParameter("QCDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreProduction_QC_Insert_Result>("usp_tbl_PreProduction_QC_Insert", qCNumberParameter, materialIssue_IdParameter, materialIssue_NoParameter, prodIndent_IdParameter, prodIndent_NoParameter, qCDateParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PreProduction_QCItemDetails_Insert(Nullable<int> issueNoteId, Nullable<int> preQCId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, string itemUnit, Nullable<decimal> issuedQuantity, Nullable<double> rejectedQuantity, Nullable<double> balanceQuantity, Nullable<double> quantityTookForSorting, Nullable<double> wastageQuantityInPercentage, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string currencyName, string supplierName)
    {

        var issueNoteIdParameter = issueNoteId.HasValue ?
            new ObjectParameter("IssueNoteId", issueNoteId) :
            new ObjectParameter("IssueNoteId", typeof(int));


        var preQCIdParameter = preQCId.HasValue ?
            new ObjectParameter("PreQCId", preQCId) :
            new ObjectParameter("PreQCId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var issuedQuantityParameter = issuedQuantity.HasValue ?
            new ObjectParameter("IssuedQuantity", issuedQuantity) :
            new ObjectParameter("IssuedQuantity", typeof(decimal));


        var rejectedQuantityParameter = rejectedQuantity.HasValue ?
            new ObjectParameter("RejectedQuantity", rejectedQuantity) :
            new ObjectParameter("RejectedQuantity", typeof(double));


        var balanceQuantityParameter = balanceQuantity.HasValue ?
            new ObjectParameter("BalanceQuantity", balanceQuantity) :
            new ObjectParameter("BalanceQuantity", typeof(double));


        var quantityTookForSortingParameter = quantityTookForSorting.HasValue ?
            new ObjectParameter("QuantityTookForSorting", quantityTookForSorting) :
            new ObjectParameter("QuantityTookForSorting", typeof(double));


        var wastageQuantityInPercentageParameter = wastageQuantityInPercentage.HasValue ?
            new ObjectParameter("WastageQuantityInPercentage", wastageQuantityInPercentage) :
            new ObjectParameter("WastageQuantityInPercentage", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var supplierNameParameter = supplierName != null ?
            new ObjectParameter("SupplierName", supplierName) :
            new ObjectParameter("SupplierName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PreProduction_QCItemDetails_Insert", issueNoteIdParameter, preQCIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemUnitParameter, issuedQuantityParameter, rejectedQuantityParameter, balanceQuantityParameter, quantityTookForSortingParameter, wastageQuantityInPercentageParameter, remarksParameter, createdByParameter, createdDateParameter, currencyNameParameter, supplierNameParameter);
    }


    public virtual ObjectResult<usp_tbl_PreProduction_QCItemDetailsFor_RN_ItemDetails_GetByID_Result> usp_tbl_PreProduction_QCItemDetailsFor_RN_ItemDetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreProduction_QCItemDetailsFor_RN_ItemDetails_GetByID_Result>("usp_tbl_PreProduction_QCItemDetailsFor_RN_ItemDetails_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_PreQC_GetByID_Result> usp_tbl_PreQC_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreQC_GetByID_Result>("usp_tbl_PreQC_GetByID", iDParameter);
    }


    public virtual int usp_tbl_PreQCItemDetails_GetById(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PreQCItemDetails_GetById", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_PreQCItemDetailsForView_GetByID_Result> usp_tbl_PreQCItemDetailsForView_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreQCItemDetailsForView_GetByID_Result>("usp_tbl_PreQCItemDetailsForView_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_PreStartupHygiene_GetAllByDate_Result> usp_tbl_PreStartupHygiene_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreStartupHygiene_GetAllByDate_Result>("usp_tbl_PreStartupHygiene_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual int usp_tbl_PreStartupHygieneCheck_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PreStartupHygieneCheck_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PreStartupHygieneCheck_GetAll_Result> usp_tbl_PreStartupHygieneCheck_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreStartupHygieneCheck_GetAll_Result>("usp_tbl_PreStartupHygieneCheck_GetAll");
    }


    public virtual ObjectResult<usp_tbl_PreStartUpHygineCheck_GetByID_Result> usp_tbl_PreStartUpHygineCheck_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PreStartUpHygineCheck_GetByID_Result>("usp_tbl_PreStartUpHygineCheck_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PreStartUpHygineCheck_Insert(string verifyBy, Nullable<System.DateTime> date, string rMRecevingArea, string cratesBlue, string cratesYellow, string cratesRed, string weightingArea, string water, string hygineArea, string rawMaterial, string finishGoods, string walkWay, string vegetableWashingArea, string peelingMachine, string coldStorage, string roboqubos, string silo, string packagingLine, string chiller, Nullable<bool> isDeleted, string remark, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var verifyByParameter = verifyBy != null ?
            new ObjectParameter("VerifyBy", verifyBy) :
            new ObjectParameter("VerifyBy", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var rMRecevingAreaParameter = rMRecevingArea != null ?
            new ObjectParameter("RMRecevingArea", rMRecevingArea) :
            new ObjectParameter("RMRecevingArea", typeof(string));


        var cratesBlueParameter = cratesBlue != null ?
            new ObjectParameter("CratesBlue", cratesBlue) :
            new ObjectParameter("CratesBlue", typeof(string));


        var cratesYellowParameter = cratesYellow != null ?
            new ObjectParameter("CratesYellow", cratesYellow) :
            new ObjectParameter("CratesYellow", typeof(string));


        var cratesRedParameter = cratesRed != null ?
            new ObjectParameter("CratesRed", cratesRed) :
            new ObjectParameter("CratesRed", typeof(string));


        var weightingAreaParameter = weightingArea != null ?
            new ObjectParameter("WeightingArea", weightingArea) :
            new ObjectParameter("WeightingArea", typeof(string));


        var waterParameter = water != null ?
            new ObjectParameter("Water", water) :
            new ObjectParameter("Water", typeof(string));


        var hygineAreaParameter = hygineArea != null ?
            new ObjectParameter("HygineArea", hygineArea) :
            new ObjectParameter("HygineArea", typeof(string));


        var rawMaterialParameter = rawMaterial != null ?
            new ObjectParameter("RawMaterial", rawMaterial) :
            new ObjectParameter("RawMaterial", typeof(string));


        var finishGoodsParameter = finishGoods != null ?
            new ObjectParameter("FinishGoods", finishGoods) :
            new ObjectParameter("FinishGoods", typeof(string));


        var walkWayParameter = walkWay != null ?
            new ObjectParameter("WalkWay", walkWay) :
            new ObjectParameter("WalkWay", typeof(string));


        var vegetableWashingAreaParameter = vegetableWashingArea != null ?
            new ObjectParameter("VegetableWashingArea", vegetableWashingArea) :
            new ObjectParameter("VegetableWashingArea", typeof(string));


        var peelingMachineParameter = peelingMachine != null ?
            new ObjectParameter("PeelingMachine", peelingMachine) :
            new ObjectParameter("PeelingMachine", typeof(string));


        var coldStorageParameter = coldStorage != null ?
            new ObjectParameter("ColdStorage", coldStorage) :
            new ObjectParameter("ColdStorage", typeof(string));


        var roboqubosParameter = roboqubos != null ?
            new ObjectParameter("Roboqubos", roboqubos) :
            new ObjectParameter("Roboqubos", typeof(string));


        var siloParameter = silo != null ?
            new ObjectParameter("Silo", silo) :
            new ObjectParameter("Silo", typeof(string));


        var packagingLineParameter = packagingLine != null ?
            new ObjectParameter("PackagingLine", packagingLine) :
            new ObjectParameter("PackagingLine", typeof(string));


        var chillerParameter = chiller != null ?
            new ObjectParameter("Chiller", chiller) :
            new ObjectParameter("Chiller", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PreStartUpHygineCheck_Insert", verifyByParameter, dateParameter, rMRecevingAreaParameter, cratesBlueParameter, cratesYellowParameter, cratesRedParameter, weightingAreaParameter, waterParameter, hygineAreaParameter, rawMaterialParameter, finishGoodsParameter, walkWayParameter, vegetableWashingAreaParameter, peelingMachineParameter, coldStorageParameter, roboqubosParameter, siloParameter, packagingLineParameter, chillerParameter, isDeletedParameter, remarkParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PreStartUpHygineCheck_Update(Nullable<int> id, string verifyBy, Nullable<System.DateTime> date, string rMRecevingArea, string cratesBlue, string cratesYellow, string cratesRed, string weightingArea, string water, string hygineArea, string rawMaterial, string finishGoods, string walkWay, string vegetableWashingArea, string peelingMachine, string coldStorage, string roboqubos, string silo, string packagingLine, string chiller, Nullable<bool> isDeleted, string remark, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var verifyByParameter = verifyBy != null ?
            new ObjectParameter("VerifyBy", verifyBy) :
            new ObjectParameter("VerifyBy", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var rMRecevingAreaParameter = rMRecevingArea != null ?
            new ObjectParameter("RMRecevingArea", rMRecevingArea) :
            new ObjectParameter("RMRecevingArea", typeof(string));


        var cratesBlueParameter = cratesBlue != null ?
            new ObjectParameter("CratesBlue", cratesBlue) :
            new ObjectParameter("CratesBlue", typeof(string));


        var cratesYellowParameter = cratesYellow != null ?
            new ObjectParameter("CratesYellow", cratesYellow) :
            new ObjectParameter("CratesYellow", typeof(string));


        var cratesRedParameter = cratesRed != null ?
            new ObjectParameter("CratesRed", cratesRed) :
            new ObjectParameter("CratesRed", typeof(string));


        var weightingAreaParameter = weightingArea != null ?
            new ObjectParameter("WeightingArea", weightingArea) :
            new ObjectParameter("WeightingArea", typeof(string));


        var waterParameter = water != null ?
            new ObjectParameter("Water", water) :
            new ObjectParameter("Water", typeof(string));


        var hygineAreaParameter = hygineArea != null ?
            new ObjectParameter("HygineArea", hygineArea) :
            new ObjectParameter("HygineArea", typeof(string));


        var rawMaterialParameter = rawMaterial != null ?
            new ObjectParameter("RawMaterial", rawMaterial) :
            new ObjectParameter("RawMaterial", typeof(string));


        var finishGoodsParameter = finishGoods != null ?
            new ObjectParameter("FinishGoods", finishGoods) :
            new ObjectParameter("FinishGoods", typeof(string));


        var walkWayParameter = walkWay != null ?
            new ObjectParameter("WalkWay", walkWay) :
            new ObjectParameter("WalkWay", typeof(string));


        var vegetableWashingAreaParameter = vegetableWashingArea != null ?
            new ObjectParameter("VegetableWashingArea", vegetableWashingArea) :
            new ObjectParameter("VegetableWashingArea", typeof(string));


        var peelingMachineParameter = peelingMachine != null ?
            new ObjectParameter("PeelingMachine", peelingMachine) :
            new ObjectParameter("PeelingMachine", typeof(string));


        var coldStorageParameter = coldStorage != null ?
            new ObjectParameter("ColdStorage", coldStorage) :
            new ObjectParameter("ColdStorage", typeof(string));


        var roboqubosParameter = roboqubos != null ?
            new ObjectParameter("Roboqubos", roboqubos) :
            new ObjectParameter("Roboqubos", typeof(string));


        var siloParameter = silo != null ?
            new ObjectParameter("Silo", silo) :
            new ObjectParameter("Silo", typeof(string));


        var packagingLineParameter = packagingLine != null ?
            new ObjectParameter("PackagingLine", packagingLine) :
            new ObjectParameter("PackagingLine", typeof(string));


        var chillerParameter = chiller != null ?
            new ObjectParameter("Chiller", chiller) :
            new ObjectParameter("Chiller", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PreStartUpHygineCheck_Update", idParameter, verifyByParameter, dateParameter, rMRecevingAreaParameter, cratesBlueParameter, cratesYellowParameter, cratesRedParameter, weightingAreaParameter, waterParameter, hygineAreaParameter, rawMaterialParameter, finishGoodsParameter, walkWayParameter, vegetableWashingAreaParameter, peelingMachineParameter, coldStorageParameter, roboqubosParameter, siloParameter, packagingLineParameter, chillerParameter, isDeletedParameter, remarkParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_ProductEvaluationLog_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductEvaluationLog_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ProductEvaluationLog_GetAllBy_Result> usp_tbl_ProductEvaluationLog_GetAllBy(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductEvaluationLog_GetAllBy_Result>("usp_tbl_ProductEvaluationLog_GetAllBy", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ProductEvaluationLog_GetAllByDate_Result> usp_tbl_ProductEvaluationLog_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductEvaluationLog_GetAllByDate_Result>("usp_tbl_ProductEvaluationLog_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ProductEvaluationLog_GetByID_Result> usp_tbl_ProductEvaluationLog_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductEvaluationLog_GetByID_Result>("usp_tbl_ProductEvaluationLog_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductEvaluationLog_Insert(Nullable<System.DateTime> pELDate, string productName, string batchCode, string ph, string texColTaste, string acid, string salt, string viscosity, string workOrder, string status, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var pELDateParameter = pELDate.HasValue ?
            new ObjectParameter("PELDate", pELDate) :
            new ObjectParameter("PELDate", typeof(System.DateTime));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var batchCodeParameter = batchCode != null ?
            new ObjectParameter("BatchCode", batchCode) :
            new ObjectParameter("BatchCode", typeof(string));


        var phParameter = ph != null ?
            new ObjectParameter("Ph", ph) :
            new ObjectParameter("Ph", typeof(string));


        var texColTasteParameter = texColTaste != null ?
            new ObjectParameter("TexColTaste", texColTaste) :
            new ObjectParameter("TexColTaste", typeof(string));


        var acidParameter = acid != null ?
            new ObjectParameter("Acid", acid) :
            new ObjectParameter("Acid", typeof(string));


        var saltParameter = salt != null ?
            new ObjectParameter("Salt", salt) :
            new ObjectParameter("Salt", typeof(string));


        var viscosityParameter = viscosity != null ?
            new ObjectParameter("Viscosity", viscosity) :
            new ObjectParameter("Viscosity", typeof(string));


        var workOrderParameter = workOrder != null ?
            new ObjectParameter("WorkOrder", workOrder) :
            new ObjectParameter("WorkOrder", typeof(string));


        var statusParameter = status != null ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductEvaluationLog_Insert", pELDateParameter, productNameParameter, batchCodeParameter, phParameter, texColTasteParameter, acidParameter, saltParameter, viscosityParameter, workOrderParameter, statusParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductEvaluationLog_Update(Nullable<int> id, Nullable<System.DateTime> pELDate, string productName, string batchCode, string ph, string texColTaste, string acid, string salt, string viscosity, Nullable<System.DateTime> pELDateAfter7Days, string phAfter7Days, string texColTasteAfter7Days, string acidAfter7Days, string saltAfter7Days, string viscosityAfter7Days, string workOrder, string status, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var pELDateParameter = pELDate.HasValue ?
            new ObjectParameter("PELDate", pELDate) :
            new ObjectParameter("PELDate", typeof(System.DateTime));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var batchCodeParameter = batchCode != null ?
            new ObjectParameter("BatchCode", batchCode) :
            new ObjectParameter("BatchCode", typeof(string));


        var phParameter = ph != null ?
            new ObjectParameter("Ph", ph) :
            new ObjectParameter("Ph", typeof(string));


        var texColTasteParameter = texColTaste != null ?
            new ObjectParameter("TexColTaste", texColTaste) :
            new ObjectParameter("TexColTaste", typeof(string));


        var acidParameter = acid != null ?
            new ObjectParameter("Acid", acid) :
            new ObjectParameter("Acid", typeof(string));


        var saltParameter = salt != null ?
            new ObjectParameter("Salt", salt) :
            new ObjectParameter("Salt", typeof(string));


        var viscosityParameter = viscosity != null ?
            new ObjectParameter("Viscosity", viscosity) :
            new ObjectParameter("Viscosity", typeof(string));


        var pELDateAfter7DaysParameter = pELDateAfter7Days.HasValue ?
            new ObjectParameter("PELDateAfter7Days", pELDateAfter7Days) :
            new ObjectParameter("PELDateAfter7Days", typeof(System.DateTime));


        var phAfter7DaysParameter = phAfter7Days != null ?
            new ObjectParameter("PhAfter7Days", phAfter7Days) :
            new ObjectParameter("PhAfter7Days", typeof(string));


        var texColTasteAfter7DaysParameter = texColTasteAfter7Days != null ?
            new ObjectParameter("TexColTasteAfter7Days", texColTasteAfter7Days) :
            new ObjectParameter("TexColTasteAfter7Days", typeof(string));


        var acidAfter7DaysParameter = acidAfter7Days != null ?
            new ObjectParameter("AcidAfter7Days", acidAfter7Days) :
            new ObjectParameter("AcidAfter7Days", typeof(string));


        var saltAfter7DaysParameter = saltAfter7Days != null ?
            new ObjectParameter("SaltAfter7Days", saltAfter7Days) :
            new ObjectParameter("SaltAfter7Days", typeof(string));


        var viscosityAfter7DaysParameter = viscosityAfter7Days != null ?
            new ObjectParameter("ViscosityAfter7Days", viscosityAfter7Days) :
            new ObjectParameter("ViscosityAfter7Days", typeof(string));


        var workOrderParameter = workOrder != null ?
            new ObjectParameter("WorkOrder", workOrder) :
            new ObjectParameter("WorkOrder", typeof(string));


        var statusParameter = status != null ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductEvaluationLog_Update", idParameter, pELDateParameter, productNameParameter, batchCodeParameter, phParameter, texColTasteParameter, acidParameter, saltParameter, viscosityParameter, pELDateAfter7DaysParameter, phAfter7DaysParameter, texColTasteAfter7DaysParameter, acidAfter7DaysParameter, saltAfter7DaysParameter, viscosityAfter7DaysParameter, workOrderParameter, statusParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_ProductionIndent_Delete(Nullable<int> productionIndentID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var productionIndentIDParameter = productionIndentID.HasValue ?
            new ObjectParameter("ProductionIndentID", productionIndentID) :
            new ObjectParameter("ProductionIndentID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductionIndent_Delete", productionIndentIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ProductionIndent_GetAll_Result> usp_tbl_ProductionIndent_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductionIndent_GetAll_Result>("usp_tbl_ProductionIndent_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ProductionIndent_GetAll_For_Material_Issue_Result> usp_tbl_ProductionIndent_GetAll_For_Material_Issue()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductionIndent_GetAll_For_Material_Issue_Result>("usp_tbl_ProductionIndent_GetAll_For_Material_Issue");
    }


    public virtual ObjectResult<usp_tbl_ProductionIndent_GetByID_Result> usp_tbl_ProductionIndent_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductionIndent_GetByID_Result>("usp_tbl_ProductionIndent_GetByID", iDParameter);
    }


    public virtual int usp_tbl_ProductionIndent_Insert(string productionIndentNo, Nullable<System.DateTime> indentDate, Nullable<System.DateTime> productionDate, Nullable<int> indentBy, string userName, Nullable<int> salesOrderId, string sONo, string workOrderNo, Nullable<int> itemID, string recipeName, Nullable<int> totalBatches, string batchNumber, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var productionIndentNoParameter = productionIndentNo != null ?
            new ObjectParameter("ProductionIndentNo", productionIndentNo) :
            new ObjectParameter("ProductionIndentNo", typeof(string));


        var indentDateParameter = indentDate.HasValue ?
            new ObjectParameter("IndentDate", indentDate) :
            new ObjectParameter("IndentDate", typeof(System.DateTime));


        var productionDateParameter = productionDate.HasValue ?
            new ObjectParameter("ProductionDate", productionDate) :
            new ObjectParameter("ProductionDate", typeof(System.DateTime));


        var indentByParameter = indentBy.HasValue ?
            new ObjectParameter("IndentBy", indentBy) :
            new ObjectParameter("IndentBy", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var sONoParameter = sONo != null ?
            new ObjectParameter("SONo", sONo) :
            new ObjectParameter("SONo", typeof(string));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        var recipeNameParameter = recipeName != null ?
            new ObjectParameter("RecipeName", recipeName) :
            new ObjectParameter("RecipeName", typeof(string));


        var totalBatchesParameter = totalBatches.HasValue ?
            new ObjectParameter("TotalBatches", totalBatches) :
            new ObjectParameter("TotalBatches", typeof(int));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductionIndent_Insert", productionIndentNoParameter, indentDateParameter, productionDateParameter, indentByParameter, userNameParameter, salesOrderIdParameter, sONoParameter, workOrderNoParameter, itemIDParameter, recipeNameParameter, totalBatchesParameter, batchNumberParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductionIndent_Update(Nullable<int> indentId, string productionIndentNo, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> productionDate, Nullable<int> indentBy, string remarks, Nullable<int> recipeID, string recipeName, Nullable<int> salesOrderId, string sONo, string workOrderNo, Nullable<int> totalBatches, string userName, string batchNumber, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var indentIdParameter = indentId.HasValue ?
            new ObjectParameter("IndentId", indentId) :
            new ObjectParameter("IndentId", typeof(int));


        var productionIndentNoParameter = productionIndentNo != null ?
            new ObjectParameter("ProductionIndentNo", productionIndentNo) :
            new ObjectParameter("ProductionIndentNo", typeof(string));


        var issueDateParameter = issueDate.HasValue ?
            new ObjectParameter("IssueDate", issueDate) :
            new ObjectParameter("IssueDate", typeof(System.DateTime));


        var productionDateParameter = productionDate.HasValue ?
            new ObjectParameter("ProductionDate", productionDate) :
            new ObjectParameter("ProductionDate", typeof(System.DateTime));


        var indentByParameter = indentBy.HasValue ?
            new ObjectParameter("IndentBy", indentBy) :
            new ObjectParameter("IndentBy", typeof(int));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var recipeIDParameter = recipeID.HasValue ?
            new ObjectParameter("RecipeID", recipeID) :
            new ObjectParameter("RecipeID", typeof(int));


        var recipeNameParameter = recipeName != null ?
            new ObjectParameter("RecipeName", recipeName) :
            new ObjectParameter("RecipeName", typeof(string));


        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var sONoParameter = sONo != null ?
            new ObjectParameter("SONo", sONo) :
            new ObjectParameter("SONo", typeof(string));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var totalBatchesParameter = totalBatches.HasValue ?
            new ObjectParameter("TotalBatches", totalBatches) :
            new ObjectParameter("TotalBatches", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var batchNumberParameter = batchNumber != null ?
            new ObjectParameter("BatchNumber", batchNumber) :
            new ObjectParameter("BatchNumber", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductionIndent_Update", indentIdParameter, productionIndentNoParameter, issueDateParameter, productionDateParameter, indentByParameter, remarksParameter, recipeIDParameter, recipeNameParameter, salesOrderIdParameter, sONoParameter, workOrderNoParameter, totalBatchesParameter, userNameParameter, batchNumberParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductionIndentDetails_Update(Nullable<int> productionIndentID, Nullable<int> qCcheck_1, Nullable<int> qCcheck_2, Nullable<int> qCcheck_3, Nullable<int> item_ID, string item_Code, string itemName, string itemUnit, Nullable<decimal> batchQuantity, Nullable<decimal> finalQuantity, string productionCheck, Nullable<double> percentage, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var productionIndentIDParameter = productionIndentID.HasValue ?
            new ObjectParameter("ProductionIndentID", productionIndentID) :
            new ObjectParameter("ProductionIndentID", typeof(int));


        var qCcheck_1Parameter = qCcheck_1.HasValue ?
            new ObjectParameter("QCcheck_1", qCcheck_1) :
            new ObjectParameter("QCcheck_1", typeof(int));


        var qCcheck_2Parameter = qCcheck_2.HasValue ?
            new ObjectParameter("QCcheck_2", qCcheck_2) :
            new ObjectParameter("QCcheck_2", typeof(int));


        var qCcheck_3Parameter = qCcheck_3.HasValue ?
            new ObjectParameter("QCcheck_3", qCcheck_3) :
            new ObjectParameter("QCcheck_3", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var batchQuantityParameter = batchQuantity.HasValue ?
            new ObjectParameter("BatchQuantity", batchQuantity) :
            new ObjectParameter("BatchQuantity", typeof(decimal));


        var finalQuantityParameter = finalQuantity.HasValue ?
            new ObjectParameter("FinalQuantity", finalQuantity) :
            new ObjectParameter("FinalQuantity", typeof(decimal));


        var productionCheckParameter = productionCheck != null ?
            new ObjectParameter("ProductionCheck", productionCheck) :
            new ObjectParameter("ProductionCheck", typeof(string));


        var percentageParameter = percentage.HasValue ?
            new ObjectParameter("Percentage", percentage) :
            new ObjectParameter("Percentage", typeof(double));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductionIndentDetails_Update", productionIndentIDParameter, qCcheck_1Parameter, qCcheck_2Parameter, qCcheck_3Parameter, item_IDParameter, item_CodeParameter, itemNameParameter, itemUnitParameter, batchQuantityParameter, finalQuantityParameter, productionCheckParameter, percentageParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual int usp_tbl_ProductionIndentIngredientsDetails_GetByID(Nullable<int> productionIndent_Id, Nullable<int> location_Id)
    {

        var productionIndent_IdParameter = productionIndent_Id.HasValue ?
            new ObjectParameter("ProductionIndent_Id", productionIndent_Id) :
            new ObjectParameter("ProductionIndent_Id", typeof(int));


        var location_IdParameter = location_Id.HasValue ?
            new ObjectParameter("Location_Id", location_Id) :
            new ObjectParameter("Location_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductionIndentIngredientsDetails_GetByID", productionIndent_IdParameter, location_IdParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductionIndentIngredientsDetails_Insert(Nullable<int> productionIndentID, Nullable<int> qCcheck_1, Nullable<int> qCcheck_2, Nullable<int> qCcheck_3, Nullable<int> item_ID, string item_Code, string itemName, string itemUnit, Nullable<decimal> batchQuantity, Nullable<decimal> finalQuantity, string productionCheck, Nullable<double> percentage, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var productionIndentIDParameter = productionIndentID.HasValue ?
            new ObjectParameter("ProductionIndentID", productionIndentID) :
            new ObjectParameter("ProductionIndentID", typeof(int));


        var qCcheck_1Parameter = qCcheck_1.HasValue ?
            new ObjectParameter("QCcheck_1", qCcheck_1) :
            new ObjectParameter("QCcheck_1", typeof(int));


        var qCcheck_2Parameter = qCcheck_2.HasValue ?
            new ObjectParameter("QCcheck_2", qCcheck_2) :
            new ObjectParameter("QCcheck_2", typeof(int));


        var qCcheck_3Parameter = qCcheck_3.HasValue ?
            new ObjectParameter("QCcheck_3", qCcheck_3) :
            new ObjectParameter("QCcheck_3", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var batchQuantityParameter = batchQuantity.HasValue ?
            new ObjectParameter("BatchQuantity", batchQuantity) :
            new ObjectParameter("BatchQuantity", typeof(decimal));


        var finalQuantityParameter = finalQuantity.HasValue ?
            new ObjectParameter("FinalQuantity", finalQuantity) :
            new ObjectParameter("FinalQuantity", typeof(decimal));


        var productionCheckParameter = productionCheck != null ?
            new ObjectParameter("ProductionCheck", productionCheck) :
            new ObjectParameter("ProductionCheck", typeof(string));


        var percentageParameter = percentage.HasValue ?
            new ObjectParameter("Percentage", percentage) :
            new ObjectParameter("Percentage", typeof(double));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductionIndentIngredientsDetails_Insert", productionIndentIDParameter, qCcheck_1Parameter, qCcheck_2Parameter, qCcheck_3Parameter, item_IDParameter, item_CodeParameter, itemNameParameter, itemUnitParameter, batchQuantityParameter, finalQuantityParameter, productionCheckParameter, percentageParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_ProductionMaterialIssueNote_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductionMaterialIssueNote_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ProductionMaterialIssueNote_GetAll_Result> usp_tbl_ProductionMaterialIssueNote_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductionMaterialIssueNote_GetAll_Result>("usp_tbl_ProductionMaterialIssueNote_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ProductionMaterialIssueNote_Insert_Result> usp_tbl_ProductionMaterialIssueNote_Insert(string issueNoteNo, Nullable<System.DateTime> issueNoteDate, Nullable<int> issueBy, string issueByName, Nullable<int> locationId, string locationName, Nullable<int> productionIndentID, string productionIndentNo, string workOrderNumber, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var issueNoteNoParameter = issueNoteNo != null ?
            new ObjectParameter("IssueNoteNo", issueNoteNo) :
            new ObjectParameter("IssueNoteNo", typeof(string));


        var issueNoteDateParameter = issueNoteDate.HasValue ?
            new ObjectParameter("IssueNoteDate", issueNoteDate) :
            new ObjectParameter("IssueNoteDate", typeof(System.DateTime));


        var issueByParameter = issueBy.HasValue ?
            new ObjectParameter("IssueBy", issueBy) :
            new ObjectParameter("IssueBy", typeof(int));


        var issueByNameParameter = issueByName != null ?
            new ObjectParameter("IssueByName", issueByName) :
            new ObjectParameter("IssueByName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var productionIndentIDParameter = productionIndentID.HasValue ?
            new ObjectParameter("ProductionIndentID", productionIndentID) :
            new ObjectParameter("ProductionIndentID", typeof(int));


        var productionIndentNoParameter = productionIndentNo != null ?
            new ObjectParameter("ProductionIndentNo", productionIndentNo) :
            new ObjectParameter("ProductionIndentNo", typeof(string));


        var workOrderNumberParameter = workOrderNumber != null ?
            new ObjectParameter("WorkOrderNumber", workOrderNumber) :
            new ObjectParameter("WorkOrderNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductionMaterialIssueNote_Insert_Result>("usp_tbl_ProductionMaterialIssueNote_Insert", issueNoteNoParameter, issueNoteDateParameter, issueByParameter, issueByNameParameter, locationIdParameter, locationNameParameter, productionIndentIDParameter, productionIndentNoParameter, workOrderNumberParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductionMaterialIssueNoteDetails_Insert(Nullable<int> issueNoteId, Nullable<int> itemId, string item_Name, string item_Code, Nullable<decimal> quantityRequested, Nullable<decimal> quantityIssued, Nullable<decimal> issuingQty, Nullable<decimal> balanceQty, Nullable<decimal> availableStockBeforeIssue, string itemUnit, Nullable<decimal> itemUnitPrice, string currencyName, Nullable<decimal> stockAfterIssuing, Nullable<int> isDeleted, Nullable<int> locationId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var issueNoteIdParameter = issueNoteId.HasValue ?
            new ObjectParameter("IssueNoteId", issueNoteId) :
            new ObjectParameter("IssueNoteId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var quantityRequestedParameter = quantityRequested.HasValue ?
            new ObjectParameter("QuantityRequested", quantityRequested) :
            new ObjectParameter("QuantityRequested", typeof(decimal));


        var quantityIssuedParameter = quantityIssued.HasValue ?
            new ObjectParameter("QuantityIssued", quantityIssued) :
            new ObjectParameter("QuantityIssued", typeof(decimal));


        var issuingQtyParameter = issuingQty.HasValue ?
            new ObjectParameter("IssuingQty", issuingQty) :
            new ObjectParameter("IssuingQty", typeof(decimal));


        var balanceQtyParameter = balanceQty.HasValue ?
            new ObjectParameter("BalanceQty", balanceQty) :
            new ObjectParameter("BalanceQty", typeof(decimal));


        var availableStockBeforeIssueParameter = availableStockBeforeIssue.HasValue ?
            new ObjectParameter("AvailableStockBeforeIssue", availableStockBeforeIssue) :
            new ObjectParameter("AvailableStockBeforeIssue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var stockAfterIssuingParameter = stockAfterIssuing.HasValue ?
            new ObjectParameter("StockAfterIssuing", stockAfterIssuing) :
            new ObjectParameter("StockAfterIssuing", typeof(decimal));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductionMaterialIssueNoteDetails_Insert", issueNoteIdParameter, itemIdParameter, item_NameParameter, item_CodeParameter, quantityRequestedParameter, quantityIssuedParameter, issuingQtyParameter, balanceQtyParameter, availableStockBeforeIssueParameter, itemUnitParameter, itemUnitPriceParameter, currencyNameParameter, stockAfterIssuingParameter, isDeletedParameter, locationIdParameter, createdByParameter, createdDateParameter);
    }


    public virtual int usp_tbl_ProductMaster_Delete(Nullable<int> product_ID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var product_IDParameter = product_ID.HasValue ?
            new ObjectParameter("Product_ID", product_ID) :
            new ObjectParameter("Product_ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductMaster_Delete", product_IDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_ProductMaster_GetAll_Result> usp_tbl_ProductMaster_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductMaster_GetAll_Result>("usp_tbl_ProductMaster_GetAll");
    }


    public virtual ObjectResult<usp_tbl_ProductMaster_GetByID_Result> usp_tbl_ProductMaster_GetByID(Nullable<int> product_ID)
    {

        var product_IDParameter = product_ID.HasValue ?
            new ObjectParameter("Product_ID", product_ID) :
            new ObjectParameter("Product_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_ProductMaster_GetByID_Result>("usp_tbl_ProductMaster_GetByID", product_IDParameter);
    }


    public virtual int usp_tbl_ProductMaster_Insert(string productCode, string productName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var productCodeParameter = productCode != null ?
            new ObjectParameter("ProductCode", productCode) :
            new ObjectParameter("ProductCode", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_ProductMaster_Insert", productCodeParameter, productNameParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_ProductMaster_Update(Nullable<int> product_ID, string productCode, string productName, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var product_IDParameter = product_ID.HasValue ?
            new ObjectParameter("Product_ID", product_ID) :
            new ObjectParameter("Product_ID", typeof(int));


        var productCodeParameter = productCode != null ?
            new ObjectParameter("ProductCode", productCode) :
            new ObjectParameter("ProductCode", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_ProductMaster_Update", product_IDParameter, productCodeParameter, productNameParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PurchaseOrder_GetAll_Result> usp_tbl_PurchaseOrder_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PurchaseOrder_GetAll_Result>("usp_tbl_PurchaseOrder_GetAll");
    }


    public virtual int usp_tbl_PurchaseOrder_Insert(string tittle, string pONumber, Nullable<System.DateTime> pODate, Nullable<System.DateTime> deliveryDate, Nullable<int> vendorsID, string companyName, Nullable<double> discountValue, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<int> termsAndConditionID, Nullable<int> cancelled, string reasonForCancellation, Nullable<bool> draftFlag, Nullable<int> locationId, string locationName, string purchaseOrderStatus, string deliveryAddress, string supplierAddress, Nullable<int> amendment, string advancedPayment, string attachment, string signature, string indentNumber, string remarks, string totalAfterTax, string grandTotal, Nullable<System.DateTime> approvedDate, Nullable<int> approvedBy, Nullable<System.DateTime> checkedDate, Nullable<int> checkedBy, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> lastModifiedBy, Nullable<int> isDeleted, string termDescription, Nullable<int> indentID, Nullable<int> currencyID, string currencyName, Nullable<decimal> otherTax)
    {

        var tittleParameter = tittle != null ?
            new ObjectParameter("Tittle", tittle) :
            new ObjectParameter("Tittle", typeof(string));


        var pONumberParameter = pONumber != null ?
            new ObjectParameter("PONumber", pONumber) :
            new ObjectParameter("PONumber", typeof(string));


        var pODateParameter = pODate.HasValue ?
            new ObjectParameter("PODate", pODate) :
            new ObjectParameter("PODate", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var discountValueParameter = discountValue.HasValue ?
            new ObjectParameter("DiscountValue", discountValue) :
            new ObjectParameter("DiscountValue", typeof(double));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var cancelledParameter = cancelled.HasValue ?
            new ObjectParameter("Cancelled", cancelled) :
            new ObjectParameter("Cancelled", typeof(int));


        var reasonForCancellationParameter = reasonForCancellation != null ?
            new ObjectParameter("ReasonForCancellation", reasonForCancellation) :
            new ObjectParameter("ReasonForCancellation", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var purchaseOrderStatusParameter = purchaseOrderStatus != null ?
            new ObjectParameter("PurchaseOrderStatus", purchaseOrderStatus) :
            new ObjectParameter("PurchaseOrderStatus", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var amendmentParameter = amendment.HasValue ?
            new ObjectParameter("Amendment", amendment) :
            new ObjectParameter("Amendment", typeof(int));


        var advancedPaymentParameter = advancedPayment != null ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(string));


        var attachmentParameter = attachment != null ?
            new ObjectParameter("Attachment", attachment) :
            new ObjectParameter("Attachment", typeof(string));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var totalAfterTaxParameter = totalAfterTax != null ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(string));


        var grandTotalParameter = grandTotal != null ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(string));


        var approvedDateParameter = approvedDate.HasValue ?
            new ObjectParameter("ApprovedDate", approvedDate) :
            new ObjectParameter("ApprovedDate", typeof(System.DateTime));


        var approvedByParameter = approvedBy.HasValue ?
            new ObjectParameter("ApprovedBy", approvedBy) :
            new ObjectParameter("ApprovedBy", typeof(int));


        var checkedDateParameter = checkedDate.HasValue ?
            new ObjectParameter("CheckedDate", checkedDate) :
            new ObjectParameter("CheckedDate", typeof(System.DateTime));


        var checkedByParameter = checkedBy.HasValue ?
            new ObjectParameter("CheckedBy", checkedBy) :
            new ObjectParameter("CheckedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var termDescriptionParameter = termDescription != null ?
            new ObjectParameter("TermDescription", termDescription) :
            new ObjectParameter("TermDescription", typeof(string));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrder_Insert", tittleParameter, pONumberParameter, pODateParameter, deliveryDateParameter, vendorsIDParameter, companyNameParameter, discountValueParameter, cGSTParameter, sGSTParameter, iGSTParameter, termsAndConditionIDParameter, cancelledParameter, reasonForCancellationParameter, draftFlagParameter, locationIdParameter, locationNameParameter, purchaseOrderStatusParameter, deliveryAddressParameter, supplierAddressParameter, amendmentParameter, advancedPaymentParameter, attachmentParameter, signatureParameter, indentNumberParameter, remarksParameter, totalAfterTaxParameter, grandTotalParameter, approvedDateParameter, approvedByParameter, checkedDateParameter, checkedByParameter, createdDateParameter, createdByParameter, lastModifiedDateParameter, lastModifiedByParameter, isDeletedParameter, termDescriptionParameter, indentIDParameter, currencyIDParameter, currencyNameParameter, otherTaxParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PurchaseOrder_Update(Nullable<int> purchaseOrderId, string tittle, string pONumber, Nullable<System.DateTime> pODate, Nullable<System.DateTime> deliveryDate, Nullable<int> vendorsID, string companyName, Nullable<int> termsAndConditionID, string terms, Nullable<bool> draftFlag, Nullable<int> locationId, string locationName, string deliveryAddress, string supplierAddress, Nullable<int> amendment, string advancedPayment, string attachment, string signature, string indentNumber, string remarks, Nullable<double> totalAfterTax, Nullable<double> grandTotal, Nullable<System.DateTime> lastModifiedDate, Nullable<int> lastModifiedBy, Nullable<int> isDeleted, Nullable<decimal> otherTax, Nullable<int> indentID, Nullable<int> currencyID, string currencyName)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var tittleParameter = tittle != null ?
            new ObjectParameter("Tittle", tittle) :
            new ObjectParameter("Tittle", typeof(string));


        var pONumberParameter = pONumber != null ?
            new ObjectParameter("PONumber", pONumber) :
            new ObjectParameter("PONumber", typeof(string));


        var pODateParameter = pODate.HasValue ?
            new ObjectParameter("PODate", pODate) :
            new ObjectParameter("PODate", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var termsParameter = terms != null ?
            new ObjectParameter("Terms", terms) :
            new ObjectParameter("Terms", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var amendmentParameter = amendment.HasValue ?
            new ObjectParameter("Amendment", amendment) :
            new ObjectParameter("Amendment", typeof(int));


        var advancedPaymentParameter = advancedPayment != null ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(string));


        var attachmentParameter = attachment != null ?
            new ObjectParameter("Attachment", attachment) :
            new ObjectParameter("Attachment", typeof(string));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(double));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(decimal));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PurchaseOrder_Update", purchaseOrderIdParameter, tittleParameter, pONumberParameter, pODateParameter, deliveryDateParameter, vendorsIDParameter, companyNameParameter, termsAndConditionIDParameter, termsParameter, draftFlagParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, supplierAddressParameter, amendmentParameter, advancedPaymentParameter, attachmentParameter, signatureParameter, indentNumberParameter, remarksParameter, totalAfterTaxParameter, grandTotalParameter, lastModifiedDateParameter, lastModifiedByParameter, isDeletedParameter, otherTaxParameter, indentIDParameter, currencyIDParameter, currencyNameParameter);
    }


    public virtual int usp_tbl_PurchaseOrderAmendment_Insert(Nullable<int> purchaseOrderId, string pOAmendNo, Nullable<System.DateTime> pOAmendDate, Nullable<double> totalAmount, string paymentsTerms, string deliveryTerms, Nullable<int> approvalStatus, string approvalRemarks, Nullable<int> approvedById, Nullable<System.DateTime> approvedByDate, Nullable<int> checkedById, Nullable<System.DateTime> checkedByDate, string remarks, Nullable<bool> isDeleted, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> lastModifiedBy, Nullable<int> amendment, Nullable<double> totalAfterTax, Nullable<double> grandTotal)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var pOAmendNoParameter = pOAmendNo != null ?
            new ObjectParameter("POAmendNo", pOAmendNo) :
            new ObjectParameter("POAmendNo", typeof(string));


        var pOAmendDateParameter = pOAmendDate.HasValue ?
            new ObjectParameter("POAmendDate", pOAmendDate) :
            new ObjectParameter("POAmendDate", typeof(System.DateTime));


        var totalAmountParameter = totalAmount.HasValue ?
            new ObjectParameter("TotalAmount", totalAmount) :
            new ObjectParameter("TotalAmount", typeof(double));


        var paymentsTermsParameter = paymentsTerms != null ?
            new ObjectParameter("PaymentsTerms", paymentsTerms) :
            new ObjectParameter("PaymentsTerms", typeof(string));


        var deliveryTermsParameter = deliveryTerms != null ?
            new ObjectParameter("DeliveryTerms", deliveryTerms) :
            new ObjectParameter("DeliveryTerms", typeof(string));


        var approvalStatusParameter = approvalStatus.HasValue ?
            new ObjectParameter("ApprovalStatus", approvalStatus) :
            new ObjectParameter("ApprovalStatus", typeof(int));


        var approvalRemarksParameter = approvalRemarks != null ?
            new ObjectParameter("ApprovalRemarks", approvalRemarks) :
            new ObjectParameter("ApprovalRemarks", typeof(string));


        var approvedByIdParameter = approvedById.HasValue ?
            new ObjectParameter("ApprovedById", approvedById) :
            new ObjectParameter("ApprovedById", typeof(int));


        var approvedByDateParameter = approvedByDate.HasValue ?
            new ObjectParameter("ApprovedByDate", approvedByDate) :
            new ObjectParameter("ApprovedByDate", typeof(System.DateTime));


        var checkedByIdParameter = checkedById.HasValue ?
            new ObjectParameter("CheckedById", checkedById) :
            new ObjectParameter("CheckedById", typeof(int));


        var checkedByDateParameter = checkedByDate.HasValue ?
            new ObjectParameter("CheckedByDate", checkedByDate) :
            new ObjectParameter("CheckedByDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var amendmentParameter = amendment.HasValue ?
            new ObjectParameter("Amendment", amendment) :
            new ObjectParameter("Amendment", typeof(int));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(double));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderAmendment_Insert", purchaseOrderIdParameter, pOAmendNoParameter, pOAmendDateParameter, totalAmountParameter, paymentsTermsParameter, deliveryTermsParameter, approvalStatusParameter, approvalRemarksParameter, approvedByIdParameter, approvedByDateParameter, checkedByIdParameter, checkedByDateParameter, remarksParameter, isDeletedParameter, createdDateParameter, createdByParameter, lastModifiedDateParameter, lastModifiedByParameter, amendmentParameter, totalAfterTaxParameter, grandTotalParameter);
    }


    public virtual int usp_tbl_PurchaseOrderAmendmentDetails_Insert(Nullable<int> purchaseOrderAmendmentId, Nullable<int> itemId, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> quantity, Nullable<decimal> amendQuantity, Nullable<decimal> amendRate, Nullable<decimal> discount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> amendDiscount, Nullable<decimal> amendCgst, Nullable<decimal> amendSgst, Nullable<decimal> amendIgst, Nullable<bool> isDeleted, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> lastModifiedBy, Nullable<int> purchaseOrderId, string itemTaxValue, Nullable<double> totalItemCost)
    {

        var purchaseOrderAmendmentIdParameter = purchaseOrderAmendmentId.HasValue ?
            new ObjectParameter("PurchaseOrderAmendmentId", purchaseOrderAmendmentId) :
            new ObjectParameter("PurchaseOrderAmendmentId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(decimal));


        var amendQuantityParameter = amendQuantity.HasValue ?
            new ObjectParameter("AmendQuantity", amendQuantity) :
            new ObjectParameter("AmendQuantity", typeof(decimal));


        var amendRateParameter = amendRate.HasValue ?
            new ObjectParameter("AmendRate", amendRate) :
            new ObjectParameter("AmendRate", typeof(decimal));


        var discountParameter = discount.HasValue ?
            new ObjectParameter("Discount", discount) :
            new ObjectParameter("Discount", typeof(decimal));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(decimal));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(decimal));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(decimal));


        var amendDiscountParameter = amendDiscount.HasValue ?
            new ObjectParameter("AmendDiscount", amendDiscount) :
            new ObjectParameter("AmendDiscount", typeof(decimal));


        var amendCgstParameter = amendCgst.HasValue ?
            new ObjectParameter("AmendCgst", amendCgst) :
            new ObjectParameter("AmendCgst", typeof(decimal));


        var amendSgstParameter = amendSgst.HasValue ?
            new ObjectParameter("AmendSgst", amendSgst) :
            new ObjectParameter("AmendSgst", typeof(decimal));


        var amendIgstParameter = amendIgst.HasValue ?
            new ObjectParameter("AmendIgst", amendIgst) :
            new ObjectParameter("AmendIgst", typeof(decimal));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var itemTaxValueParameter = itemTaxValue != null ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderAmendmentDetails_Insert", purchaseOrderAmendmentIdParameter, itemIdParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, quantityParameter, amendQuantityParameter, amendRateParameter, discountParameter, cGSTParameter, sGSTParameter, iGSTParameter, amendDiscountParameter, amendCgstParameter, amendSgstParameter, amendIgstParameter, isDeletedParameter, createdDateParameter, createdByParameter, lastModifiedDateParameter, lastModifiedByParameter, purchaseOrderIdParameter, itemTaxValueParameter, totalItemCostParameter);
    }


    public virtual int usp_tbl_PurchaseOrderForRFQ_Insert(string tittle, string pONumber, Nullable<System.DateTime> pODate, Nullable<System.DateTime> deliveryDate, Nullable<int> currencyID, string currencyName, Nullable<int> locationId, string locationName, string deliveryAddress, Nullable<int> vendorsID, string companyName, string supplierAddress, Nullable<int> amendment, Nullable<int> rFQ_ID, string rFQ_No, string remarks, string signature, string totalAfterTax, string grandTotal, Nullable<decimal> otherTax, string advancedPayment, Nullable<int> termsAndConditionID, string termDescription, Nullable<bool> draftFlag, string purchaseOrderStatus, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<int> cancelled, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, string indentNumber, Nullable<int> indentID)
    {

        var tittleParameter = tittle != null ?
            new ObjectParameter("Tittle", tittle) :
            new ObjectParameter("Tittle", typeof(string));


        var pONumberParameter = pONumber != null ?
            new ObjectParameter("PONumber", pONumber) :
            new ObjectParameter("PONumber", typeof(string));


        var pODateParameter = pODate.HasValue ?
            new ObjectParameter("PODate", pODate) :
            new ObjectParameter("PODate", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var amendmentParameter = amendment.HasValue ?
            new ObjectParameter("Amendment", amendment) :
            new ObjectParameter("Amendment", typeof(int));


        var rFQ_IDParameter = rFQ_ID.HasValue ?
            new ObjectParameter("RFQ_ID", rFQ_ID) :
            new ObjectParameter("RFQ_ID", typeof(int));


        var rFQ_NoParameter = rFQ_No != null ?
            new ObjectParameter("RFQ_No", rFQ_No) :
            new ObjectParameter("RFQ_No", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var totalAfterTaxParameter = totalAfterTax != null ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(string));


        var grandTotalParameter = grandTotal != null ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(string));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(decimal));


        var advancedPaymentParameter = advancedPayment != null ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(string));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var termDescriptionParameter = termDescription != null ?
            new ObjectParameter("TermDescription", termDescription) :
            new ObjectParameter("TermDescription", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var purchaseOrderStatusParameter = purchaseOrderStatus != null ?
            new ObjectParameter("PurchaseOrderStatus", purchaseOrderStatus) :
            new ObjectParameter("PurchaseOrderStatus", typeof(string));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var cancelledParameter = cancelled.HasValue ?
            new ObjectParameter("Cancelled", cancelled) :
            new ObjectParameter("Cancelled", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderForRFQ_Insert", tittleParameter, pONumberParameter, pODateParameter, deliveryDateParameter, currencyIDParameter, currencyNameParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, vendorsIDParameter, companyNameParameter, supplierAddressParameter, amendmentParameter, rFQ_IDParameter, rFQ_NoParameter, remarksParameter, signatureParameter, totalAfterTaxParameter, grandTotalParameter, otherTaxParameter, advancedPaymentParameter, termsAndConditionIDParameter, termDescriptionParameter, draftFlagParameter, purchaseOrderStatusParameter, cGSTParameter, sGSTParameter, iGSTParameter, cancelledParameter, createdDateParameter, createdByParameter, indentNumberParameter, indentIDParameter);
    }


    public virtual int usp_tbl_PurchaseOrderForRFQItemsDetails_Insert(Nullable<int> purchaseOrderId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, string itemUnit, Nullable<double> totalItemCost, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> currencyID, string currencyName, Nullable<int> requestForQuotationId, Nullable<int> vendorsID, string indentNumber, Nullable<int> indentID)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(double));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderForRFQItemsDetails_Insert", purchaseOrderIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, itemUnitParameter, totalItemCostParameter, createdByParameter, createdDateParameter, currencyIDParameter, currencyNameParameter, requestForQuotationIdParameter, vendorsIDParameter, indentNumberParameter, indentIDParameter);
    }


    public virtual int usp_tbl_PurchaseOrderItemsDetails_Insert(Nullable<int> purchaseOrderId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, string itemUnit, Nullable<double> totalItemCost, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<decimal> balanceQty, Nullable<decimal> requiredQty, Nullable<int> currencyID, string currencyName, Nullable<int> indentID)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(double));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var balanceQtyParameter = balanceQty.HasValue ?
            new ObjectParameter("BalanceQty", balanceQty) :
            new ObjectParameter("BalanceQty", typeof(decimal));


        var requiredQtyParameter = requiredQty.HasValue ?
            new ObjectParameter("RequiredQty", requiredQty) :
            new ObjectParameter("RequiredQty", typeof(decimal));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderItemsDetails_Insert", purchaseOrderIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, itemUnitParameter, totalItemCostParameter, isDeletedParameter, createdByParameter, createdDateParameter, balanceQtyParameter, requiredQtyParameter, currencyIDParameter, currencyNameParameter, indentIDParameter);
    }


    public virtual int usp_tbl_PurchaseOrderItemsDetails_Update(Nullable<int> purchaseOrderId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, string itemUnit, string totalItemCost, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<decimal> balanceQty, Nullable<decimal> requiredQty, Nullable<int> currencyID, string currencyName, Nullable<int> indentID, Nullable<int> flagCheck)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost != null ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var balanceQtyParameter = balanceQty.HasValue ?
            new ObjectParameter("BalanceQty", balanceQty) :
            new ObjectParameter("BalanceQty", typeof(decimal));


        var requiredQtyParameter = requiredQty.HasValue ?
            new ObjectParameter("RequiredQty", requiredQty) :
            new ObjectParameter("RequiredQty", typeof(decimal));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderItemsDetails_Update", purchaseOrderIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, itemUnitParameter, totalItemCostParameter, isDeletedParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, balanceQtyParameter, requiredQtyParameter, currencyIDParameter, currencyNameParameter, indentIDParameter, flagCheckParameter);
    }


    public virtual int usp_tbl_PurchaseOrderPaymentDetails_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderPaymentDetails_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_PurchaseOrderPaymentDetails_GetAll_Result> usp_tbl_PurchaseOrderPaymentDetails_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PurchaseOrderPaymentDetails_GetAll_Result>("usp_tbl_PurchaseOrderPaymentDetails_GetAll");
    }


    public virtual ObjectResult<usp_tbl_PurchaseOrderPaymentDetails_GetByPOId_Result> usp_tbl_PurchaseOrderPaymentDetails_GetByPOId(Nullable<int> pO_ID)
    {

        var pO_IDParameter = pO_ID.HasValue ?
            new ObjectParameter("PO_ID", pO_ID) :
            new ObjectParameter("PO_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_PurchaseOrderPaymentDetails_GetByPOId_Result>("usp_tbl_PurchaseOrderPaymentDetails_GetByPOId", pO_IDParameter);
    }


    public virtual int usp_tbl_PurchaseOrderPaymentDetails_Insert(Nullable<int> purchaseOrderId, string invoiceNo, Nullable<double> invoiceAmount, Nullable<double> amountPaid, Nullable<double> balancePay, Nullable<double> advancedPayment, Nullable<System.DateTime> paymentDate, Nullable<System.DateTime> paymentDueDate, string paymentMode, string chequeNo, string bankName, string accountNo, string remarks, string paymentStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string branchName, string iFSCCode, string uTRNo)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var invoiceNoParameter = invoiceNo != null ?
            new ObjectParameter("InvoiceNo", invoiceNo) :
            new ObjectParameter("InvoiceNo", typeof(string));


        var invoiceAmountParameter = invoiceAmount.HasValue ?
            new ObjectParameter("InvoiceAmount", invoiceAmount) :
            new ObjectParameter("InvoiceAmount", typeof(double));


        var amountPaidParameter = amountPaid.HasValue ?
            new ObjectParameter("AmountPaid", amountPaid) :
            new ObjectParameter("AmountPaid", typeof(double));


        var balancePayParameter = balancePay.HasValue ?
            new ObjectParameter("BalancePay", balancePay) :
            new ObjectParameter("BalancePay", typeof(double));


        var advancedPaymentParameter = advancedPayment.HasValue ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(double));


        var paymentDateParameter = paymentDate.HasValue ?
            new ObjectParameter("PaymentDate", paymentDate) :
            new ObjectParameter("PaymentDate", typeof(System.DateTime));


        var paymentDueDateParameter = paymentDueDate.HasValue ?
            new ObjectParameter("PaymentDueDate", paymentDueDate) :
            new ObjectParameter("PaymentDueDate", typeof(System.DateTime));


        var paymentModeParameter = paymentMode != null ?
            new ObjectParameter("PaymentMode", paymentMode) :
            new ObjectParameter("PaymentMode", typeof(string));


        var chequeNoParameter = chequeNo != null ?
            new ObjectParameter("ChequeNo", chequeNo) :
            new ObjectParameter("ChequeNo", typeof(string));


        var bankNameParameter = bankName != null ?
            new ObjectParameter("BankName", bankName) :
            new ObjectParameter("BankName", typeof(string));


        var accountNoParameter = accountNo != null ?
            new ObjectParameter("AccountNo", accountNo) :
            new ObjectParameter("AccountNo", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var branchNameParameter = branchName != null ?
            new ObjectParameter("BranchName", branchName) :
            new ObjectParameter("BranchName", typeof(string));


        var iFSCCodeParameter = iFSCCode != null ?
            new ObjectParameter("IFSCCode", iFSCCode) :
            new ObjectParameter("IFSCCode", typeof(string));


        var uTRNoParameter = uTRNo != null ?
            new ObjectParameter("UTRNo", uTRNo) :
            new ObjectParameter("UTRNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_PurchaseOrderPaymentDetails_Insert", purchaseOrderIdParameter, invoiceNoParameter, invoiceAmountParameter, amountPaidParameter, balancePayParameter, advancedPaymentParameter, paymentDateParameter, paymentDueDateParameter, paymentModeParameter, chequeNoParameter, bankNameParameter, accountNoParameter, remarksParameter, paymentStatusParameter, createdByParameter, createdDateParameter, branchNameParameter, iFSCCodeParameter, uTRNoParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_PurchaseOrderPaymentDetails_Update(Nullable<int> iD, Nullable<int> purchaseOrderId, string invoiceNo, Nullable<double> invoiceAmount, Nullable<System.DateTime> paymentDueDate, string paymentMode, string chequeNo, string bankName, string branchName, string accountNo, string iFSCCode, string paymentStatus, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, string remarks, string uTRNo)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var invoiceNoParameter = invoiceNo != null ?
            new ObjectParameter("InvoiceNo", invoiceNo) :
            new ObjectParameter("InvoiceNo", typeof(string));


        var invoiceAmountParameter = invoiceAmount.HasValue ?
            new ObjectParameter("InvoiceAmount", invoiceAmount) :
            new ObjectParameter("InvoiceAmount", typeof(double));


        var paymentDueDateParameter = paymentDueDate.HasValue ?
            new ObjectParameter("PaymentDueDate", paymentDueDate) :
            new ObjectParameter("PaymentDueDate", typeof(System.DateTime));


        var paymentModeParameter = paymentMode != null ?
            new ObjectParameter("PaymentMode", paymentMode) :
            new ObjectParameter("PaymentMode", typeof(string));


        var chequeNoParameter = chequeNo != null ?
            new ObjectParameter("ChequeNo", chequeNo) :
            new ObjectParameter("ChequeNo", typeof(string));


        var bankNameParameter = bankName != null ?
            new ObjectParameter("BankName", bankName) :
            new ObjectParameter("BankName", typeof(string));


        var branchNameParameter = branchName != null ?
            new ObjectParameter("BranchName", branchName) :
            new ObjectParameter("BranchName", typeof(string));


        var accountNoParameter = accountNo != null ?
            new ObjectParameter("AccountNo", accountNo) :
            new ObjectParameter("AccountNo", typeof(string));


        var iFSCCodeParameter = iFSCCode != null ?
            new ObjectParameter("IFSCCode", iFSCCode) :
            new ObjectParameter("IFSCCode", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var uTRNoParameter = uTRNo != null ?
            new ObjectParameter("UTRNo", uTRNo) :
            new ObjectParameter("UTRNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_PurchaseOrderPaymentDetails_Update", iDParameter, purchaseOrderIdParameter, invoiceNoParameter, invoiceAmountParameter, paymentDueDateParameter, paymentModeParameter, chequeNoParameter, bankNameParameter, branchNameParameter, accountNoParameter, iFSCCodeParameter, paymentStatusParameter, lastModifiedByParameter, lastModifiedDateParameter, remarksParameter, uTRNoParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Recipe_Details_Insert(Nullable<int> recipeID, string recipeName, Nullable<int> item_ID, string item_Code, string itemName, Nullable<double> ratio, Nullable<double> batchSize, Nullable<int> unit, string unitName, string description, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var recipeIDParameter = recipeID.HasValue ?
            new ObjectParameter("RecipeID", recipeID) :
            new ObjectParameter("RecipeID", typeof(int));


        var recipeNameParameter = recipeName != null ?
            new ObjectParameter("RecipeName", recipeName) :
            new ObjectParameter("RecipeName", typeof(string));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var ratioParameter = ratio.HasValue ?
            new ObjectParameter("Ratio", ratio) :
            new ObjectParameter("Ratio", typeof(double));


        var batchSizeParameter = batchSize.HasValue ?
            new ObjectParameter("BatchSize", batchSize) :
            new ObjectParameter("BatchSize", typeof(double));


        var unitParameter = unit.HasValue ?
            new ObjectParameter("Unit", unit) :
            new ObjectParameter("Unit", typeof(int));


        var unitNameParameter = unitName != null ?
            new ObjectParameter("UnitName", unitName) :
            new ObjectParameter("UnitName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Recipe_Details_Insert", recipeIDParameter, recipeNameParameter, item_IDParameter, item_CodeParameter, itemNameParameter, ratioParameter, batchSizeParameter, unitParameter, unitNameParameter, descriptionParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Recipe_Details_Update(Nullable<int> recipeID, string recipeName, Nullable<int> item_ID, string item_Code, string itemName, Nullable<double> ratio, Nullable<double> batchSize, string unitName, string description, Nullable<int> isDeleted, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var recipeIDParameter = recipeID.HasValue ?
            new ObjectParameter("RecipeID", recipeID) :
            new ObjectParameter("RecipeID", typeof(int));


        var recipeNameParameter = recipeName != null ?
            new ObjectParameter("RecipeName", recipeName) :
            new ObjectParameter("RecipeName", typeof(string));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var ratioParameter = ratio.HasValue ?
            new ObjectParameter("Ratio", ratio) :
            new ObjectParameter("Ratio", typeof(double));


        var batchSizeParameter = batchSize.HasValue ?
            new ObjectParameter("BatchSize", batchSize) :
            new ObjectParameter("BatchSize", typeof(double));


        var unitNameParameter = unitName != null ?
            new ObjectParameter("UnitName", unitName) :
            new ObjectParameter("UnitName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Recipe_Details_Update", recipeIDParameter, recipeNameParameter, item_IDParameter, item_CodeParameter, itemNameParameter, ratioParameter, batchSizeParameter, unitNameParameter, descriptionParameter, isDeletedParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual ObjectResult<usp_tbl_RecipeDetailsForBatchPlanning_GetbyProductId_Result> usp_tbl_RecipeDetailsForBatchPlanning_GetbyProductId(Nullable<int> productId, Nullable<int> locationId, Nullable<int> sOId)
    {

        var productIdParameter = productId.HasValue ?
            new ObjectParameter("ProductId", productId) :
            new ObjectParameter("ProductId", typeof(int));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var sOIdParameter = sOId.HasValue ?
            new ObjectParameter("SOId", sOId) :
            new ObjectParameter("SOId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RecipeDetailsForBatchPlanning_GetbyProductId_Result>("usp_tbl_RecipeDetailsForBatchPlanning_GetbyProductId", productIdParameter, locationIdParameter, sOIdParameter);
    }


    public virtual ObjectResult<usp_tbl_RecipeIngredientsDetail_GetBy_Id_Result> usp_tbl_RecipeIngredientsDetail_GetBy_Id(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RecipeIngredientsDetail_GetBy_Id_Result>("usp_tbl_RecipeIngredientsDetail_GetBy_Id", iDParameter);
    }


    public virtual int usp_tbl_RecipeIngredientsDetails_GetByID(Nullable<int> recipeID)
    {

        var recipeIDParameter = recipeID.HasValue ?
            new ObjectParameter("RecipeID", recipeID) :
            new ObjectParameter("RecipeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RecipeIngredientsDetails_GetByID", recipeIDParameter);
    }


    public virtual ObjectResult<usp_tbl_RecipeIngredientsDetailsForView_GetByID_Result> usp_tbl_RecipeIngredientsDetailsForView_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RecipeIngredientsDetailsForView_GetByID_Result>("usp_tbl_RecipeIngredientsDetailsForView_GetByID", iDParameter);
    }


    public virtual int usp_tbl_RecipeMaster_Delete(Nullable<int> recipe_ID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var recipe_IDParameter = recipe_ID.HasValue ?
            new ObjectParameter("Recipe_ID", recipe_ID) :
            new ObjectParameter("Recipe_ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RecipeMaster_Delete", recipe_IDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_RecipeMaster_GetAll_Result> usp_tbl_RecipeMaster_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RecipeMaster_GetAll_Result>("usp_tbl_RecipeMaster_GetAll");
    }


    public virtual ObjectResult<usp_tbl_RecipeMaster_GetByID_Result> usp_tbl_RecipeMaster_GetByID(Nullable<int> recipe_ID)
    {

        var recipe_IDParameter = recipe_ID.HasValue ?
            new ObjectParameter("Recipe_ID", recipe_ID) :
            new ObjectParameter("Recipe_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RecipeMaster_GetByID_Result>("usp_tbl_RecipeMaster_GetByID", recipe_IDParameter);
    }


    public virtual int usp_tbl_RecipeMaster_Insert(string recipeName, string description, Nullable<int> productID, string productName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var recipeNameParameter = recipeName != null ?
            new ObjectParameter("RecipeName", recipeName) :
            new ObjectParameter("RecipeName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var productIDParameter = productID.HasValue ?
            new ObjectParameter("ProductID", productID) :
            new ObjectParameter("ProductID", typeof(int));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RecipeMaster_Insert", recipeNameParameter, descriptionParameter, productIDParameter, productNameParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RecipeMaster_Update(Nullable<int> recipe_ID, string recipeName, string description, Nullable<int> productID, string productName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var recipe_IDParameter = recipe_ID.HasValue ?
            new ObjectParameter("Recipe_ID", recipe_ID) :
            new ObjectParameter("Recipe_ID", typeof(int));


        var recipeNameParameter = recipeName != null ?
            new ObjectParameter("RecipeName", recipeName) :
            new ObjectParameter("RecipeName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var productIDParameter = productID.HasValue ?
            new ObjectParameter("ProductID", productID) :
            new ObjectParameter("ProductID", typeof(int));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RecipeMaster_Update", recipe_IDParameter, recipeNameParameter, descriptionParameter, productIDParameter, productNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_RejectionNote_GetAll_Result> usp_tbl_RejectionNote_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RejectionNote_GetAll_Result>("usp_tbl_RejectionNote_GetAll");
    }


    public virtual int usp_tbl_RejectionNote_Insert(string rejectionNoteNo, Nullable<System.DateTime> noteDate, string inwardNoteNumber, Nullable<int> inwardQCId, string inwardQCNumber, Nullable<int> supplierID, string supplierName, Nullable<int> pO_ID, string pONumber, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> preProductionQCId, string productionQCNumber, Nullable<int> productionMaterialIssueNoteId, string productionMaterialIssueNoteNo, Nullable<int> productionIndentId, string productionIndentNo, string qCType)
    {

        var rejectionNoteNoParameter = rejectionNoteNo != null ?
            new ObjectParameter("RejectionNoteNo", rejectionNoteNo) :
            new ObjectParameter("RejectionNoteNo", typeof(string));


        var noteDateParameter = noteDate.HasValue ?
            new ObjectParameter("NoteDate", noteDate) :
            new ObjectParameter("NoteDate", typeof(System.DateTime));


        var inwardNoteNumberParameter = inwardNoteNumber != null ?
            new ObjectParameter("InwardNoteNumber", inwardNoteNumber) :
            new ObjectParameter("InwardNoteNumber", typeof(string));


        var inwardQCIdParameter = inwardQCId.HasValue ?
            new ObjectParameter("InwardQCId", inwardQCId) :
            new ObjectParameter("InwardQCId", typeof(int));


        var inwardQCNumberParameter = inwardQCNumber != null ?
            new ObjectParameter("InwardQCNumber", inwardQCNumber) :
            new ObjectParameter("InwardQCNumber", typeof(string));


        var supplierIDParameter = supplierID.HasValue ?
            new ObjectParameter("SupplierID", supplierID) :
            new ObjectParameter("SupplierID", typeof(int));


        var supplierNameParameter = supplierName != null ?
            new ObjectParameter("SupplierName", supplierName) :
            new ObjectParameter("SupplierName", typeof(string));


        var pO_IDParameter = pO_ID.HasValue ?
            new ObjectParameter("PO_ID", pO_ID) :
            new ObjectParameter("PO_ID", typeof(int));


        var pONumberParameter = pONumber != null ?
            new ObjectParameter("PONumber", pONumber) :
            new ObjectParameter("PONumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var preProductionQCIdParameter = preProductionQCId.HasValue ?
            new ObjectParameter("PreProductionQCId", preProductionQCId) :
            new ObjectParameter("PreProductionQCId", typeof(int));


        var productionQCNumberParameter = productionQCNumber != null ?
            new ObjectParameter("ProductionQCNumber", productionQCNumber) :
            new ObjectParameter("ProductionQCNumber", typeof(string));


        var productionMaterialIssueNoteIdParameter = productionMaterialIssueNoteId.HasValue ?
            new ObjectParameter("ProductionMaterialIssueNoteId", productionMaterialIssueNoteId) :
            new ObjectParameter("ProductionMaterialIssueNoteId", typeof(int));


        var productionMaterialIssueNoteNoParameter = productionMaterialIssueNoteNo != null ?
            new ObjectParameter("ProductionMaterialIssueNoteNo", productionMaterialIssueNoteNo) :
            new ObjectParameter("ProductionMaterialIssueNoteNo", typeof(string));


        var productionIndentIdParameter = productionIndentId.HasValue ?
            new ObjectParameter("ProductionIndentId", productionIndentId) :
            new ObjectParameter("ProductionIndentId", typeof(int));


        var productionIndentNoParameter = productionIndentNo != null ?
            new ObjectParameter("ProductionIndentNo", productionIndentNo) :
            new ObjectParameter("ProductionIndentNo", typeof(string));


        var qCTypeParameter = qCType != null ?
            new ObjectParameter("QCType", qCType) :
            new ObjectParameter("QCType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RejectionNote_Insert", rejectionNoteNoParameter, noteDateParameter, inwardNoteNumberParameter, inwardQCIdParameter, inwardQCNumberParameter, supplierIDParameter, supplierNameParameter, pO_IDParameter, pONumberParameter, remarksParameter, createdByParameter, createdDateParameter, preProductionQCIdParameter, productionQCNumberParameter, productionMaterialIssueNoteIdParameter, productionMaterialIssueNoteNoParameter, productionIndentIdParameter, productionIndentNoParameter, qCTypeParameter);
    }


    public virtual ObjectResult<usp_tbl_RejectionNoteDetailsFor_DN_GetByID_Result> usp_tbl_RejectionNoteDetailsFor_DN_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RejectionNoteDetailsFor_DN_GetByID_Result>("usp_tbl_RejectionNoteDetailsFor_DN_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_RejectionNoteDetailsFor_RN_GetByID_Result> usp_tbl_RejectionNoteDetailsFor_RN_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RejectionNoteDetailsFor_RN_GetByID_Result>("usp_tbl_RejectionNoteDetailsFor_RN_GetByID", iDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RejectionNoteItemDetails_Insert(Nullable<int> rejectionID, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, string itemUnit, string itemTaxValue, Nullable<decimal> totalQuantity, Nullable<decimal> inwardQuantity, Nullable<double> rejectedQuantity, Nullable<double> quantityTookForSorting, Nullable<double> wastageQuantityInPercentage, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string currencyName)
    {

        var rejectionIDParameter = rejectionID.HasValue ?
            new ObjectParameter("RejectionID", rejectionID) :
            new ObjectParameter("RejectionID", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var itemTaxValueParameter = itemTaxValue != null ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(string));


        var totalQuantityParameter = totalQuantity.HasValue ?
            new ObjectParameter("TotalQuantity", totalQuantity) :
            new ObjectParameter("TotalQuantity", typeof(decimal));


        var inwardQuantityParameter = inwardQuantity.HasValue ?
            new ObjectParameter("InwardQuantity", inwardQuantity) :
            new ObjectParameter("InwardQuantity", typeof(decimal));


        var rejectedQuantityParameter = rejectedQuantity.HasValue ?
            new ObjectParameter("RejectedQuantity", rejectedQuantity) :
            new ObjectParameter("RejectedQuantity", typeof(double));


        var quantityTookForSortingParameter = quantityTookForSorting.HasValue ?
            new ObjectParameter("QuantityTookForSorting", quantityTookForSorting) :
            new ObjectParameter("QuantityTookForSorting", typeof(double));


        var wastageQuantityInPercentageParameter = wastageQuantityInPercentage.HasValue ?
            new ObjectParameter("WastageQuantityInPercentage", wastageQuantityInPercentage) :
            new ObjectParameter("WastageQuantityInPercentage", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RejectionNoteItemDetails_Insert", rejectionIDParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemUnitParameter, itemTaxValueParameter, totalQuantityParameter, inwardQuantityParameter, rejectedQuantityParameter, quantityTookForSortingParameter, wastageQuantityInPercentageParameter, remarksParameter, createdByParameter, createdDateParameter, currencyNameParameter);
    }


    public virtual ObjectResult<usp_tbl_RequestForQuotation_GetAll_Result> usp_tbl_RequestForQuotation_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RequestForQuotation_GetAll_Result>("usp_tbl_RequestForQuotation_GetAll");
    }


    public virtual ObjectResult<usp_tbl_RequestForQuotation_Insert_Result> usp_tbl_RequestForQuotation_Insert(string rFQNO, string vendorIDs, Nullable<int> locationId, string locationName, string deliveryAddress, Nullable<System.DateTime> date, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> biddingStartDate, Nullable<System.DateTime> biddingEndDate, Nullable<int> indentID, string indentNumber, string signature, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<int> currencyID, string currencyName, string remarks, Nullable<bool> isDeleted, Nullable<int> createdByID, Nullable<System.DateTime> createdByDate)
    {

        var rFQNOParameter = rFQNO != null ?
            new ObjectParameter("RFQNO", rFQNO) :
            new ObjectParameter("RFQNO", typeof(string));


        var vendorIDsParameter = vendorIDs != null ?
            new ObjectParameter("VendorIDs", vendorIDs) :
            new ObjectParameter("VendorIDs", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var biddingStartDateParameter = biddingStartDate.HasValue ?
            new ObjectParameter("BiddingStartDate", biddingStartDate) :
            new ObjectParameter("BiddingStartDate", typeof(System.DateTime));


        var biddingEndDateParameter = biddingEndDate.HasValue ?
            new ObjectParameter("BiddingEndDate", biddingEndDate) :
            new ObjectParameter("BiddingEndDate", typeof(System.DateTime));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByIDParameter = createdByID.HasValue ?
            new ObjectParameter("CreatedByID", createdByID) :
            new ObjectParameter("CreatedByID", typeof(int));


        var createdByDateParameter = createdByDate.HasValue ?
            new ObjectParameter("CreatedByDate", createdByDate) :
            new ObjectParameter("CreatedByDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RequestForQuotation_Insert_Result>("usp_tbl_RequestForQuotation_Insert", rFQNOParameter, vendorIDsParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, dateParameter, deliveryDateParameter, biddingStartDateParameter, biddingEndDateParameter, indentIDParameter, indentNumberParameter, signatureParameter, cGSTParameter, sGSTParameter, iGSTParameter, currencyIDParameter, currencyNameParameter, remarksParameter, isDeletedParameter, createdByIDParameter, createdByDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RequestForQuotation_Update(Nullable<int> requestForQuotationId, string rFQNO, string vendorIDs, Nullable<int> locationId, string locationName, string deliveryAddress, Nullable<System.DateTime> date, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> biddingStartDate, Nullable<System.DateTime> biddingEndDate, Nullable<int> indentID, string indentNumber, string signature, string remarks, Nullable<int> currencyID, string currencyName, Nullable<int> lastModifiedByID, Nullable<System.DateTime> lastModifiedByDate)
    {

        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var rFQNOParameter = rFQNO != null ?
            new ObjectParameter("RFQNO", rFQNO) :
            new ObjectParameter("RFQNO", typeof(string));


        var vendorIDsParameter = vendorIDs != null ?
            new ObjectParameter("VendorIDs", vendorIDs) :
            new ObjectParameter("VendorIDs", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var biddingStartDateParameter = biddingStartDate.HasValue ?
            new ObjectParameter("BiddingStartDate", biddingStartDate) :
            new ObjectParameter("BiddingStartDate", typeof(System.DateTime));


        var biddingEndDateParameter = biddingEndDate.HasValue ?
            new ObjectParameter("BiddingEndDate", biddingEndDate) :
            new ObjectParameter("BiddingEndDate", typeof(System.DateTime));


        var indentIDParameter = indentID.HasValue ?
            new ObjectParameter("IndentID", indentID) :
            new ObjectParameter("IndentID", typeof(int));


        var indentNumberParameter = indentNumber != null ?
            new ObjectParameter("IndentNumber", indentNumber) :
            new ObjectParameter("IndentNumber", typeof(string));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var lastModifiedByIDParameter = lastModifiedByID.HasValue ?
            new ObjectParameter("LastModifiedByID", lastModifiedByID) :
            new ObjectParameter("LastModifiedByID", typeof(int));


        var lastModifiedByDateParameter = lastModifiedByDate.HasValue ?
            new ObjectParameter("LastModifiedByDate", lastModifiedByDate) :
            new ObjectParameter("LastModifiedByDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RequestForQuotation_Update", requestForQuotationIdParameter, rFQNOParameter, vendorIDsParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, dateParameter, deliveryDateParameter, biddingStartDateParameter, biddingEndDateParameter, indentIDParameter, indentNumberParameter, signatureParameter, remarksParameter, currencyIDParameter, currencyNameParameter, lastModifiedByIDParameter, lastModifiedByDateParameter);
    }


    public virtual int usp_tbl_RequestForQuotationItemDetails_Insert(Nullable<int> requestForQuotationId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemQuantity, string itemUnit, string hSN_Code, Nullable<System.DateTime> deliveryDate, string remarks, Nullable<int> isDeleted, Nullable<int> createdByID, Nullable<System.DateTime> createdByDate)
    {

        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByIDParameter = createdByID.HasValue ?
            new ObjectParameter("CreatedByID", createdByID) :
            new ObjectParameter("CreatedByID", typeof(int));


        var createdByDateParameter = createdByDate.HasValue ?
            new ObjectParameter("CreatedByDate", createdByDate) :
            new ObjectParameter("CreatedByDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RequestForQuotationItemDetails_Insert", requestForQuotationIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemQuantityParameter, itemUnitParameter, hSN_CodeParameter, deliveryDateParameter, remarksParameter, isDeletedParameter, createdByIDParameter, createdByDateParameter);
    }


    public virtual int usp_tbl_RFQ_Vendor_ItemDetails_Insert(Nullable<int> rFQ_VendorDetailsId, Nullable<int> requestForQuotationId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, string itemUnit, Nullable<double> totalItemCost, string hSN_Code, Nullable<System.DateTime> deliveryDate, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice, string remarks, Nullable<int> isDeleted, Nullable<int> createdByID, Nullable<System.DateTime> createdByDate)
    {

        var rFQ_VendorDetailsIdParameter = rFQ_VendorDetailsId.HasValue ?
            new ObjectParameter("RFQ_VendorDetailsId", rFQ_VendorDetailsId) :
            new ObjectParameter("RFQ_VendorDetailsId", typeof(int));


        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(double));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByIDParameter = createdByID.HasValue ?
            new ObjectParameter("CreatedByID", createdByID) :
            new ObjectParameter("CreatedByID", typeof(int));


        var createdByDateParameter = createdByDate.HasValue ?
            new ObjectParameter("CreatedByDate", createdByDate) :
            new ObjectParameter("CreatedByDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RFQ_Vendor_ItemDetails_Insert", rFQ_VendorDetailsIdParameter, requestForQuotationIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, itemUnitParameter, totalItemCostParameter, hSN_CodeParameter, deliveryDateParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter, remarksParameter, isDeletedParameter, createdByIDParameter, createdByDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RFQItemsDetails_Update(Nullable<int> requestForQuotationId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemQuantity, string itemUnit, string hSN_Code, Nullable<System.DateTime> deliveryDate, string remarks, Nullable<int> isDeleted, Nullable<int> lastModifiedByID, Nullable<System.DateTime> lastModifiedByDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var hSN_CodeParameter = hSN_Code != null ?
            new ObjectParameter("HSN_Code", hSN_Code) :
            new ObjectParameter("HSN_Code", typeof(string));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var lastModifiedByIDParameter = lastModifiedByID.HasValue ?
            new ObjectParameter("LastModifiedByID", lastModifiedByID) :
            new ObjectParameter("LastModifiedByID", typeof(int));


        var lastModifiedByDateParameter = lastModifiedByDate.HasValue ?
            new ObjectParameter("LastModifiedByDate", lastModifiedByDate) :
            new ObjectParameter("LastModifiedByDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RFQItemsDetails_Update", requestForQuotationIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemQuantityParameter, itemUnitParameter, hSN_CodeParameter, deliveryDateParameter, remarksParameter, isDeletedParameter, lastModifiedByIDParameter, lastModifiedByDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual int usp_tbl_RFQSupplierDetails_Insert(Nullable<int> requestForQuotationId, string rFQNO, Nullable<System.DateTime> date, Nullable<System.DateTime> deliveryDate, Nullable<int> currencyID, string currencyName, Nullable<double> currencyPrice, Nullable<int> locationId, string locationName, string deliveryAddress, Nullable<int> vendorsID, string companyName, string address, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, string grandTotal, string totalAfterTax, string advancedPayment, string remarks, Nullable<bool> isDeleted, Nullable<int> createdByID, Nullable<System.DateTime> createdByDate)
    {

        var requestForQuotationIdParameter = requestForQuotationId.HasValue ?
            new ObjectParameter("RequestForQuotationId", requestForQuotationId) :
            new ObjectParameter("RequestForQuotationId", typeof(int));


        var rFQNOParameter = rFQNO != null ?
            new ObjectParameter("RFQNO", rFQNO) :
            new ObjectParameter("RFQNO", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var currencyPriceParameter = currencyPrice.HasValue ?
            new ObjectParameter("CurrencyPrice", currencyPrice) :
            new ObjectParameter("CurrencyPrice", typeof(double));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var vendorsIDParameter = vendorsID.HasValue ?
            new ObjectParameter("VendorsID", vendorsID) :
            new ObjectParameter("VendorsID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var grandTotalParameter = grandTotal != null ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(string));


        var totalAfterTaxParameter = totalAfterTax != null ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(string));


        var advancedPaymentParameter = advancedPayment != null ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByIDParameter = createdByID.HasValue ?
            new ObjectParameter("CreatedByID", createdByID) :
            new ObjectParameter("CreatedByID", typeof(int));


        var createdByDateParameter = createdByDate.HasValue ?
            new ObjectParameter("CreatedByDate", createdByDate) :
            new ObjectParameter("CreatedByDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RFQSupplierDetails_Insert", requestForQuotationIdParameter, rFQNOParameter, dateParameter, deliveryDateParameter, currencyIDParameter, currencyNameParameter, currencyPriceParameter, locationIdParameter, locationNameParameter, deliveryAddressParameter, vendorsIDParameter, companyNameParameter, addressParameter, cGSTParameter, sGSTParameter, iGSTParameter, grandTotalParameter, totalAfterTaxParameter, advancedPaymentParameter, remarksParameter, isDeletedParameter, createdByIDParameter, createdByDateParameter);
    }


    public virtual ObjectResult<usp_tbl_RNItemDetailsFor_DN_ItemDetails_GetByID_Result> usp_tbl_RNItemDetailsFor_DN_ItemDetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RNItemDetailsFor_DN_ItemDetails_GetByID_Result>("usp_tbl_RNItemDetailsFor_DN_ItemDetails_GetByID", iDParameter);
    }


    public virtual int usp_tbl_Role_Delete(Nullable<int> roleId, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Role_Delete", roleIdParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Role_GetAll_Result> usp_tbl_Role_GetAll(Nullable<int> userId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Role_GetAll_Result>("usp_tbl_Role_GetAll", userIdParameter);
    }


    public virtual ObjectResult<usp_tbl_Role_GetByID_Result> usp_tbl_Role_GetByID(Nullable<int> roleId)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Role_GetByID_Result>("usp_tbl_Role_GetByID", roleIdParameter);
    }


    public virtual int usp_tbl_Role_Insert(string roleName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Role_Insert", roleNameParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Role_Update(Nullable<int> roleId, string roleName, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Role_Update", roleIdParameter, roleNameParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_RoleRights_Delete(Nullable<int> roleId)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RoleRights_Delete", roleIdParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RoleRights_Save(Nullable<int> roleId, string screenName, Nullable<int> lastModifiedUserId, Nullable<System.DateTime> lastModifiedDate)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var screenNameParameter = screenName != null ?
            new ObjectParameter("ScreenName", screenName) :
            new ObjectParameter("ScreenName", typeof(string));


        var lastModifiedUserIdParameter = lastModifiedUserId.HasValue ?
            new ObjectParameter("LastModifiedUserId", lastModifiedUserId) :
            new ObjectParameter("LastModifiedUserId", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RoleRights_Save", roleIdParameter, screenNameParameter, lastModifiedUserIdParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_RQCCP_Delete(Nullable<int> rQCCPID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var rQCCPIDParameter = rQCCPID.HasValue ?
            new ObjectParameter("RQCCPID", rQCCPID) :
            new ObjectParameter("RQCCPID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_RQCCP_Delete", rQCCPIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_RQCCP_GetAll_Result> usp_tbl_RQCCP_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RQCCP_GetAll_Result>("usp_tbl_RQCCP_GetAll");
    }


    public virtual ObjectResult<usp_tbl_RQCCP_GetByID_Result> usp_tbl_RQCCP_GetByID(Nullable<int> rQCCPID)
    {

        var rQCCPIDParameter = rQCCPID.HasValue ?
            new ObjectParameter("RQCCPID", rQCCPID) :
            new ObjectParameter("RQCCPID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_RQCCP_GetByID_Result>("usp_tbl_RQCCP_GetByID", rQCCPIDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RQCCP_Insert(Nullable<System.DateTime> date, string activity, string itemName, Nullable<decimal> noBatches, Nullable<decimal> batchWeight, string monitoringParameter, Nullable<System.TimeSpan> batchReleaseTimeOfRQ, Nullable<decimal> mandatoryTemp, string frequency, string responsibility, string remarks, string verification, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var activityParameter = activity != null ?
            new ObjectParameter("Activity", activity) :
            new ObjectParameter("Activity", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var noBatchesParameter = noBatches.HasValue ?
            new ObjectParameter("NoBatches", noBatches) :
            new ObjectParameter("NoBatches", typeof(decimal));


        var batchWeightParameter = batchWeight.HasValue ?
            new ObjectParameter("BatchWeight", batchWeight) :
            new ObjectParameter("BatchWeight", typeof(decimal));


        var monitoringParameterParameter = monitoringParameter != null ?
            new ObjectParameter("MonitoringParameter", monitoringParameter) :
            new ObjectParameter("MonitoringParameter", typeof(string));


        var batchReleaseTimeOfRQParameter = batchReleaseTimeOfRQ.HasValue ?
            new ObjectParameter("BatchReleaseTimeOfRQ", batchReleaseTimeOfRQ) :
            new ObjectParameter("BatchReleaseTimeOfRQ", typeof(System.TimeSpan));


        var mandatoryTempParameter = mandatoryTemp.HasValue ?
            new ObjectParameter("MandatoryTemp", mandatoryTemp) :
            new ObjectParameter("MandatoryTemp", typeof(decimal));


        var frequencyParameter = frequency != null ?
            new ObjectParameter("Frequency", frequency) :
            new ObjectParameter("Frequency", typeof(string));


        var responsibilityParameter = responsibility != null ?
            new ObjectParameter("Responsibility", responsibility) :
            new ObjectParameter("Responsibility", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var verificationParameter = verification != null ?
            new ObjectParameter("Verification", verification) :
            new ObjectParameter("Verification", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RQCCP_Insert", dateParameter, activityParameter, itemNameParameter, noBatchesParameter, batchWeightParameter, monitoringParameterParameter, batchReleaseTimeOfRQParameter, mandatoryTempParameter, frequencyParameter, responsibilityParameter, remarksParameter, verificationParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_RQCCP_Update(Nullable<int> rQCCPID, string activity, string itemName, Nullable<decimal> noBatches, Nullable<decimal> batchWeight, string monitoringParameter, Nullable<System.TimeSpan> batchReleaseTimeOfRQ, Nullable<decimal> mandatoryTemp, string frequency, string responsibility, string remarks, string verification, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var rQCCPIDParameter = rQCCPID.HasValue ?
            new ObjectParameter("RQCCPID", rQCCPID) :
            new ObjectParameter("RQCCPID", typeof(int));


        var activityParameter = activity != null ?
            new ObjectParameter("Activity", activity) :
            new ObjectParameter("Activity", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var noBatchesParameter = noBatches.HasValue ?
            new ObjectParameter("NoBatches", noBatches) :
            new ObjectParameter("NoBatches", typeof(decimal));


        var batchWeightParameter = batchWeight.HasValue ?
            new ObjectParameter("BatchWeight", batchWeight) :
            new ObjectParameter("BatchWeight", typeof(decimal));


        var monitoringParameterParameter = monitoringParameter != null ?
            new ObjectParameter("MonitoringParameter", monitoringParameter) :
            new ObjectParameter("MonitoringParameter", typeof(string));


        var batchReleaseTimeOfRQParameter = batchReleaseTimeOfRQ.HasValue ?
            new ObjectParameter("BatchReleaseTimeOfRQ", batchReleaseTimeOfRQ) :
            new ObjectParameter("BatchReleaseTimeOfRQ", typeof(System.TimeSpan));


        var mandatoryTempParameter = mandatoryTemp.HasValue ?
            new ObjectParameter("MandatoryTemp", mandatoryTemp) :
            new ObjectParameter("MandatoryTemp", typeof(decimal));


        var frequencyParameter = frequency != null ?
            new ObjectParameter("Frequency", frequency) :
            new ObjectParameter("Frequency", typeof(string));


        var responsibilityParameter = responsibility != null ?
            new ObjectParameter("Responsibility", responsibility) :
            new ObjectParameter("Responsibility", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var verificationParameter = verification != null ?
            new ObjectParameter("Verification", verification) :
            new ObjectParameter("Verification", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_RQCCP_Update", rQCCPIDParameter, activityParameter, itemNameParameter, noBatchesParameter, batchWeightParameter, monitoringParameterParameter, batchReleaseTimeOfRQParameter, mandatoryTempParameter, frequencyParameter, responsibilityParameter, remarksParameter, verificationParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_SalesOrder_Delete(Nullable<int> salesOrderId, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SalesOrder_Delete", salesOrderIdParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_SalesOrder_For_Production_Indent_GetAll_Result> usp_tbl_SalesOrder_For_Production_Indent_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SalesOrder_For_Production_Indent_GetAll_Result>("usp_tbl_SalesOrder_For_Production_Indent_GetAll");
    }


    public virtual ObjectResult<usp_tbl_SalesOrder_GetAll_Result> usp_tbl_SalesOrder_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SalesOrder_GetAll_Result>("usp_tbl_SalesOrder_GetAll");
    }


    public virtual ObjectResult<usp_tbl_SalesOrder_GetAll_WorkOrderNo_Result> usp_tbl_SalesOrder_GetAll_WorkOrderNo(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SalesOrder_GetAll_WorkOrderNo_Result>("usp_tbl_SalesOrder_GetAll_WorkOrderNo", iDParameter);
    }


    public virtual int usp_tbl_SalesOrder_Insert(string workOrderType, string workOrderNo, string sONo, Nullable<System.DateTime> sODate, Nullable<System.DateTime> deliveryDate, Nullable<int> currencyID, string currencyName, Nullable<int> locationId, string locationName, Nullable<int> clientID, string companyName, string supplierAddress, string deliveryAddress, Nullable<int> amendment, Nullable<int> inquiryID, string inquiryNumber, string remarks, Nullable<bool> draftFlag, Nullable<int> termsAndConditionID, string termDescription, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, string salesOrderStatus, Nullable<int> cancelled, string reasonForCancellation, Nullable<decimal> advancedPayment, Nullable<decimal> grandTotal, Nullable<decimal> totalAfterTax, Nullable<decimal> otherTax, Nullable<double> discountPercentage, string signature, Nullable<int> approvedBy, Nullable<System.DateTime> approvedDate, Nullable<int> checkedBy, Nullable<System.DateTime> checkedDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> isDeleted)
    {

        var workOrderTypeParameter = workOrderType != null ?
            new ObjectParameter("WorkOrderType", workOrderType) :
            new ObjectParameter("WorkOrderType", typeof(string));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var sONoParameter = sONo != null ?
            new ObjectParameter("SONo", sONo) :
            new ObjectParameter("SONo", typeof(string));


        var sODateParameter = sODate.HasValue ?
            new ObjectParameter("SODate", sODate) :
            new ObjectParameter("SODate", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var clientIDParameter = clientID.HasValue ?
            new ObjectParameter("ClientID", clientID) :
            new ObjectParameter("ClientID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var amendmentParameter = amendment.HasValue ?
            new ObjectParameter("Amendment", amendment) :
            new ObjectParameter("Amendment", typeof(int));


        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var inquiryNumberParameter = inquiryNumber != null ?
            new ObjectParameter("InquiryNumber", inquiryNumber) :
            new ObjectParameter("InquiryNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var termDescriptionParameter = termDescription != null ?
            new ObjectParameter("TermDescription", termDescription) :
            new ObjectParameter("TermDescription", typeof(string));


        var cGSTParameter = cGST.HasValue ?
            new ObjectParameter("CGST", cGST) :
            new ObjectParameter("CGST", typeof(double));


        var sGSTParameter = sGST.HasValue ?
            new ObjectParameter("SGST", sGST) :
            new ObjectParameter("SGST", typeof(double));


        var iGSTParameter = iGST.HasValue ?
            new ObjectParameter("IGST", iGST) :
            new ObjectParameter("IGST", typeof(double));


        var salesOrderStatusParameter = salesOrderStatus != null ?
            new ObjectParameter("SalesOrderStatus", salesOrderStatus) :
            new ObjectParameter("SalesOrderStatus", typeof(string));


        var cancelledParameter = cancelled.HasValue ?
            new ObjectParameter("Cancelled", cancelled) :
            new ObjectParameter("Cancelled", typeof(int));


        var reasonForCancellationParameter = reasonForCancellation != null ?
            new ObjectParameter("ReasonForCancellation", reasonForCancellation) :
            new ObjectParameter("ReasonForCancellation", typeof(string));


        var advancedPaymentParameter = advancedPayment.HasValue ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(decimal));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(decimal));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(decimal));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(decimal));


        var discountPercentageParameter = discountPercentage.HasValue ?
            new ObjectParameter("DiscountPercentage", discountPercentage) :
            new ObjectParameter("DiscountPercentage", typeof(double));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var approvedByParameter = approvedBy.HasValue ?
            new ObjectParameter("ApprovedBy", approvedBy) :
            new ObjectParameter("ApprovedBy", typeof(int));


        var approvedDateParameter = approvedDate.HasValue ?
            new ObjectParameter("ApprovedDate", approvedDate) :
            new ObjectParameter("ApprovedDate", typeof(System.DateTime));


        var checkedByParameter = checkedBy.HasValue ?
            new ObjectParameter("CheckedBy", checkedBy) :
            new ObjectParameter("CheckedBy", typeof(int));


        var checkedDateParameter = checkedDate.HasValue ?
            new ObjectParameter("CheckedDate", checkedDate) :
            new ObjectParameter("CheckedDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SalesOrder_Insert", workOrderTypeParameter, workOrderNoParameter, sONoParameter, sODateParameter, deliveryDateParameter, currencyIDParameter, currencyNameParameter, locationIdParameter, locationNameParameter, clientIDParameter, companyNameParameter, supplierAddressParameter, deliveryAddressParameter, amendmentParameter, inquiryIDParameter, inquiryNumberParameter, remarksParameter, draftFlagParameter, termsAndConditionIDParameter, termDescriptionParameter, cGSTParameter, sGSTParameter, iGSTParameter, salesOrderStatusParameter, cancelledParameter, reasonForCancellationParameter, advancedPaymentParameter, grandTotalParameter, totalAfterTaxParameter, otherTaxParameter, discountPercentageParameter, signatureParameter, approvedByParameter, approvedDateParameter, checkedByParameter, checkedDateParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter, isDeletedParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_SalesOrder_Update(Nullable<int> salesOrderId, string workOrderType, string workOrderNo, string sONo, Nullable<System.DateTime> sODate, Nullable<System.DateTime> deliveryDate, Nullable<int> currencyID, string currencyName, Nullable<int> locationId, string locationName, Nullable<int> clientID, string companyName, string supplierAddress, string deliveryAddress, Nullable<int> amendment, Nullable<int> inquiryID, string inquiryNumber, string remarks, Nullable<bool> draftFlag, Nullable<int> termsAndConditionID, string termDescription, Nullable<decimal> advancedPayment, Nullable<decimal> grandTotal, Nullable<decimal> totalAfterTax, Nullable<decimal> otherTax, Nullable<double> discountPercentage, string signature, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> isDeleted)
    {

        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var workOrderTypeParameter = workOrderType != null ?
            new ObjectParameter("WorkOrderType", workOrderType) :
            new ObjectParameter("WorkOrderType", typeof(string));


        var workOrderNoParameter = workOrderNo != null ?
            new ObjectParameter("WorkOrderNo", workOrderNo) :
            new ObjectParameter("WorkOrderNo", typeof(string));


        var sONoParameter = sONo != null ?
            new ObjectParameter("SONo", sONo) :
            new ObjectParameter("SONo", typeof(string));


        var sODateParameter = sODate.HasValue ?
            new ObjectParameter("SODate", sODate) :
            new ObjectParameter("SODate", typeof(System.DateTime));


        var deliveryDateParameter = deliveryDate.HasValue ?
            new ObjectParameter("DeliveryDate", deliveryDate) :
            new ObjectParameter("DeliveryDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var clientIDParameter = clientID.HasValue ?
            new ObjectParameter("ClientID", clientID) :
            new ObjectParameter("ClientID", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var supplierAddressParameter = supplierAddress != null ?
            new ObjectParameter("SupplierAddress", supplierAddress) :
            new ObjectParameter("SupplierAddress", typeof(string));


        var deliveryAddressParameter = deliveryAddress != null ?
            new ObjectParameter("DeliveryAddress", deliveryAddress) :
            new ObjectParameter("DeliveryAddress", typeof(string));


        var amendmentParameter = amendment.HasValue ?
            new ObjectParameter("Amendment", amendment) :
            new ObjectParameter("Amendment", typeof(int));


        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var inquiryNumberParameter = inquiryNumber != null ?
            new ObjectParameter("InquiryNumber", inquiryNumber) :
            new ObjectParameter("InquiryNumber", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var draftFlagParameter = draftFlag.HasValue ?
            new ObjectParameter("DraftFlag", draftFlag) :
            new ObjectParameter("DraftFlag", typeof(bool));


        var termsAndConditionIDParameter = termsAndConditionID.HasValue ?
            new ObjectParameter("TermsAndConditionID", termsAndConditionID) :
            new ObjectParameter("TermsAndConditionID", typeof(int));


        var termDescriptionParameter = termDescription != null ?
            new ObjectParameter("TermDescription", termDescription) :
            new ObjectParameter("TermDescription", typeof(string));


        var advancedPaymentParameter = advancedPayment.HasValue ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(decimal));


        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(decimal));


        var totalAfterTaxParameter = totalAfterTax.HasValue ?
            new ObjectParameter("TotalAfterTax", totalAfterTax) :
            new ObjectParameter("TotalAfterTax", typeof(decimal));


        var otherTaxParameter = otherTax.HasValue ?
            new ObjectParameter("OtherTax", otherTax) :
            new ObjectParameter("OtherTax", typeof(decimal));


        var discountPercentageParameter = discountPercentage.HasValue ?
            new ObjectParameter("DiscountPercentage", discountPercentage) :
            new ObjectParameter("DiscountPercentage", typeof(double));


        var signatureParameter = signature != null ?
            new ObjectParameter("Signature", signature) :
            new ObjectParameter("Signature", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_SalesOrder_Update", salesOrderIdParameter, workOrderTypeParameter, workOrderNoParameter, sONoParameter, sODateParameter, deliveryDateParameter, currencyIDParameter, currencyNameParameter, locationIdParameter, locationNameParameter, clientIDParameter, companyNameParameter, supplierAddressParameter, deliveryAddressParameter, amendmentParameter, inquiryIDParameter, inquiryNumberParameter, remarksParameter, draftFlagParameter, termsAndConditionIDParameter, termDescriptionParameter, advancedPaymentParameter, grandTotalParameter, totalAfterTaxParameter, otherTaxParameter, discountPercentageParameter, signatureParameter, lastModifiedByParameter, lastModifiedDateParameter, isDeletedParameter);
    }


    public virtual int usp_tbl_SalesOrderItemsDetails_Insert(Nullable<int> salesOrderId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, string itemUnit, Nullable<decimal> totalItemCost, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> currencyID, string currencyName, Nullable<int> inquiryID)
    {

        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(decimal));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SalesOrderItemsDetails_Insert", salesOrderIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, itemUnitParameter, totalItemCostParameter, isDeletedParameter, createdByParameter, createdDateParameter, currencyIDParameter, currencyNameParameter, inquiryIDParameter);
    }


    public virtual int usp_tbl_SalesOrderItemsDetails_Update(Nullable<int> salesOrderId, Nullable<int> item_ID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, Nullable<decimal> itemQuantity, Nullable<decimal> itemTaxValue, string itemUnit, Nullable<decimal> totalItemCost, Nullable<int> isDeleted, Nullable<int> currencyID, string currencyName, Nullable<int> inquiryID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, Nullable<int> oneItemIdentifier, Nullable<int> flagCheck)
    {

        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var item_IDParameter = item_ID.HasValue ?
            new ObjectParameter("Item_ID", item_ID) :
            new ObjectParameter("Item_ID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemQuantityParameter = itemQuantity.HasValue ?
            new ObjectParameter("ItemQuantity", itemQuantity) :
            new ObjectParameter("ItemQuantity", typeof(decimal));


        var itemTaxValueParameter = itemTaxValue.HasValue ?
            new ObjectParameter("ItemTaxValue", itemTaxValue) :
            new ObjectParameter("ItemTaxValue", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var totalItemCostParameter = totalItemCost.HasValue ?
            new ObjectParameter("TotalItemCost", totalItemCost) :
            new ObjectParameter("TotalItemCost", typeof(decimal));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var currencyIDParameter = currencyID.HasValue ?
            new ObjectParameter("CurrencyID", currencyID) :
            new ObjectParameter("CurrencyID", typeof(int));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var inquiryIDParameter = inquiryID.HasValue ?
            new ObjectParameter("InquiryID", inquiryID) :
            new ObjectParameter("InquiryID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var oneItemIdentifierParameter = oneItemIdentifier.HasValue ?
            new ObjectParameter("OneItemIdentifier", oneItemIdentifier) :
            new ObjectParameter("OneItemIdentifier", typeof(int));


        var flagCheckParameter = flagCheck.HasValue ?
            new ObjectParameter("flagCheck", flagCheck) :
            new ObjectParameter("flagCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SalesOrderItemsDetails_Update", salesOrderIdParameter, item_IDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemQuantityParameter, itemTaxValueParameter, itemUnitParameter, totalItemCostParameter, isDeletedParameter, currencyIDParameter, currencyNameParameter, inquiryIDParameter, lastModifiedByParameter, lastModifiedDateParameter, oneItemIdentifierParameter, flagCheckParameter);
    }


    public virtual int usp_tbl_SalesOrderPaymentDetails_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SalesOrderPaymentDetails_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_SalesOrderPaymentDetails_GetAll_Result> usp_tbl_SalesOrderPaymentDetails_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SalesOrderPaymentDetails_GetAll_Result>("usp_tbl_SalesOrderPaymentDetails_GetAll");
    }


    public virtual ObjectResult<usp_tbl_SalesOrderPaymentDetails_GetBySOId_Result> usp_tbl_SalesOrderPaymentDetails_GetBySOId(Nullable<int> sO_ID)
    {

        var sO_IDParameter = sO_ID.HasValue ?
            new ObjectParameter("SO_ID", sO_ID) :
            new ObjectParameter("SO_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SalesOrderPaymentDetails_GetBySOId_Result>("usp_tbl_SalesOrderPaymentDetails_GetBySOId", sO_IDParameter);
    }


    public virtual int usp_tbl_SalesOrderPaymentDetails_Insert(Nullable<int> salesOrderId, string invoiceNo, Nullable<double> invoiceAmount, Nullable<double> amountPaid, Nullable<double> balancePay, Nullable<double> advancedPayment, Nullable<System.DateTime> paymentDate, Nullable<System.DateTime> paymentDueDate, string paymentMode, string chequeNo, string bankName, string accountNo, string remarks, string paymentStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string branchName, string iFSCCode, string uTRNo)
    {

        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var invoiceNoParameter = invoiceNo != null ?
            new ObjectParameter("InvoiceNo", invoiceNo) :
            new ObjectParameter("InvoiceNo", typeof(string));


        var invoiceAmountParameter = invoiceAmount.HasValue ?
            new ObjectParameter("InvoiceAmount", invoiceAmount) :
            new ObjectParameter("InvoiceAmount", typeof(double));


        var amountPaidParameter = amountPaid.HasValue ?
            new ObjectParameter("AmountPaid", amountPaid) :
            new ObjectParameter("AmountPaid", typeof(double));


        var balancePayParameter = balancePay.HasValue ?
            new ObjectParameter("BalancePay", balancePay) :
            new ObjectParameter("BalancePay", typeof(double));


        var advancedPaymentParameter = advancedPayment.HasValue ?
            new ObjectParameter("AdvancedPayment", advancedPayment) :
            new ObjectParameter("AdvancedPayment", typeof(double));


        var paymentDateParameter = paymentDate.HasValue ?
            new ObjectParameter("PaymentDate", paymentDate) :
            new ObjectParameter("PaymentDate", typeof(System.DateTime));


        var paymentDueDateParameter = paymentDueDate.HasValue ?
            new ObjectParameter("PaymentDueDate", paymentDueDate) :
            new ObjectParameter("PaymentDueDate", typeof(System.DateTime));


        var paymentModeParameter = paymentMode != null ?
            new ObjectParameter("PaymentMode", paymentMode) :
            new ObjectParameter("PaymentMode", typeof(string));


        var chequeNoParameter = chequeNo != null ?
            new ObjectParameter("ChequeNo", chequeNo) :
            new ObjectParameter("ChequeNo", typeof(string));


        var bankNameParameter = bankName != null ?
            new ObjectParameter("BankName", bankName) :
            new ObjectParameter("BankName", typeof(string));


        var accountNoParameter = accountNo != null ?
            new ObjectParameter("AccountNo", accountNo) :
            new ObjectParameter("AccountNo", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var branchNameParameter = branchName != null ?
            new ObjectParameter("BranchName", branchName) :
            new ObjectParameter("BranchName", typeof(string));


        var iFSCCodeParameter = iFSCCode != null ?
            new ObjectParameter("IFSCCode", iFSCCode) :
            new ObjectParameter("IFSCCode", typeof(string));


        var uTRNoParameter = uTRNo != null ?
            new ObjectParameter("UTRNo", uTRNo) :
            new ObjectParameter("UTRNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SalesOrderPaymentDetails_Insert", salesOrderIdParameter, invoiceNoParameter, invoiceAmountParameter, amountPaidParameter, balancePayParameter, advancedPaymentParameter, paymentDateParameter, paymentDueDateParameter, paymentModeParameter, chequeNoParameter, bankNameParameter, accountNoParameter, remarksParameter, paymentStatusParameter, createdByParameter, createdDateParameter, branchNameParameter, iFSCCodeParameter, uTRNoParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_SalesOrderPaymentDetails_Update(Nullable<int> iD, Nullable<int> salesOrderId, string invoiceNo, Nullable<double> invoiceAmount, Nullable<System.DateTime> paymentDueDate, string paymentMode, string chequeNo, string bankName, string branchName, string accountNo, string iFSCCode, string paymentStatus, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate, string remarks, string uTRNo)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var salesOrderIdParameter = salesOrderId.HasValue ?
            new ObjectParameter("SalesOrderId", salesOrderId) :
            new ObjectParameter("SalesOrderId", typeof(int));


        var invoiceNoParameter = invoiceNo != null ?
            new ObjectParameter("InvoiceNo", invoiceNo) :
            new ObjectParameter("InvoiceNo", typeof(string));


        var invoiceAmountParameter = invoiceAmount.HasValue ?
            new ObjectParameter("InvoiceAmount", invoiceAmount) :
            new ObjectParameter("InvoiceAmount", typeof(double));


        var paymentDueDateParameter = paymentDueDate.HasValue ?
            new ObjectParameter("PaymentDueDate", paymentDueDate) :
            new ObjectParameter("PaymentDueDate", typeof(System.DateTime));


        var paymentModeParameter = paymentMode != null ?
            new ObjectParameter("PaymentMode", paymentMode) :
            new ObjectParameter("PaymentMode", typeof(string));


        var chequeNoParameter = chequeNo != null ?
            new ObjectParameter("ChequeNo", chequeNo) :
            new ObjectParameter("ChequeNo", typeof(string));


        var bankNameParameter = bankName != null ?
            new ObjectParameter("BankName", bankName) :
            new ObjectParameter("BankName", typeof(string));


        var branchNameParameter = branchName != null ?
            new ObjectParameter("BranchName", branchName) :
            new ObjectParameter("BranchName", typeof(string));


        var accountNoParameter = accountNo != null ?
            new ObjectParameter("AccountNo", accountNo) :
            new ObjectParameter("AccountNo", typeof(string));


        var iFSCCodeParameter = iFSCCode != null ?
            new ObjectParameter("IFSCCode", iFSCCode) :
            new ObjectParameter("IFSCCode", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var uTRNoParameter = uTRNo != null ?
            new ObjectParameter("UTRNo", uTRNo) :
            new ObjectParameter("UTRNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_SalesOrderPaymentDetails_Update", iDParameter, salesOrderIdParameter, invoiceNoParameter, invoiceAmountParameter, paymentDueDateParameter, paymentModeParameter, chequeNoParameter, bankNameParameter, branchNameParameter, accountNoParameter, iFSCCodeParameter, paymentStatusParameter, lastModifiedByParameter, lastModifiedDateParameter, remarksParameter, uTRNoParameter);
    }


    public virtual int usp_tbl_SanitizationAndHygine_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SanitizationAndHygine_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_SanitizationAndHygine_GetAll_Result> usp_tbl_SanitizationAndHygine_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SanitizationAndHygine_GetAll_Result>("usp_tbl_SanitizationAndHygine_GetAll");
    }


    public virtual ObjectResult<usp_tbl_SanitizationAndHygine_GetAllByDate_Result> usp_tbl_SanitizationAndHygine_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SanitizationAndHygine_GetAllByDate_Result>("usp_tbl_SanitizationAndHygine_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_SanitizationAndHygine_GetByID_Result> usp_tbl_SanitizationAndHygine_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SanitizationAndHygine_GetByID_Result>("usp_tbl_SanitizationAndHygine_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_SanitizationAndHygine_Insert(Nullable<System.DateTime> date, string nameOfEmpolyee, string department, string bodyTemperature, string handWash, string cleanNails, string cleanUniform, string appearAnyCutsandWounds, string wearAnyJwellery, string fullyCoverdHair, string cleanShoes, string noTobacoChewingum, string anyKindOfIllnessSeakness, string remark, string verifyByName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var nameOfEmpolyeeParameter = nameOfEmpolyee != null ?
            new ObjectParameter("NameOfEmpolyee", nameOfEmpolyee) :
            new ObjectParameter("NameOfEmpolyee", typeof(string));


        var departmentParameter = department != null ?
            new ObjectParameter("Department", department) :
            new ObjectParameter("Department", typeof(string));


        var bodyTemperatureParameter = bodyTemperature != null ?
            new ObjectParameter("BodyTemperature", bodyTemperature) :
            new ObjectParameter("BodyTemperature", typeof(string));


        var handWashParameter = handWash != null ?
            new ObjectParameter("HandWash", handWash) :
            new ObjectParameter("HandWash", typeof(string));


        var cleanNailsParameter = cleanNails != null ?
            new ObjectParameter("CleanNails", cleanNails) :
            new ObjectParameter("CleanNails", typeof(string));


        var cleanUniformParameter = cleanUniform != null ?
            new ObjectParameter("CleanUniform", cleanUniform) :
            new ObjectParameter("CleanUniform", typeof(string));


        var appearAnyCutsandWoundsParameter = appearAnyCutsandWounds != null ?
            new ObjectParameter("AppearAnyCutsandWounds", appearAnyCutsandWounds) :
            new ObjectParameter("AppearAnyCutsandWounds", typeof(string));


        var wearAnyJwelleryParameter = wearAnyJwellery != null ?
            new ObjectParameter("WearAnyJwellery", wearAnyJwellery) :
            new ObjectParameter("WearAnyJwellery", typeof(string));


        var fullyCoverdHairParameter = fullyCoverdHair != null ?
            new ObjectParameter("FullyCoverdHair", fullyCoverdHair) :
            new ObjectParameter("FullyCoverdHair", typeof(string));


        var cleanShoesParameter = cleanShoes != null ?
            new ObjectParameter("CleanShoes", cleanShoes) :
            new ObjectParameter("CleanShoes", typeof(string));


        var noTobacoChewingumParameter = noTobacoChewingum != null ?
            new ObjectParameter("NoTobacoChewingum", noTobacoChewingum) :
            new ObjectParameter("NoTobacoChewingum", typeof(string));


        var anyKindOfIllnessSeaknessParameter = anyKindOfIllnessSeakness != null ?
            new ObjectParameter("AnyKindOfIllnessSeakness", anyKindOfIllnessSeakness) :
            new ObjectParameter("AnyKindOfIllnessSeakness", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_SanitizationAndHygine_Insert", dateParameter, nameOfEmpolyeeParameter, departmentParameter, bodyTemperatureParameter, handWashParameter, cleanNailsParameter, cleanUniformParameter, appearAnyCutsandWoundsParameter, wearAnyJwelleryParameter, fullyCoverdHairParameter, cleanShoesParameter, noTobacoChewingumParameter, anyKindOfIllnessSeaknessParameter, remarkParameter, verifyByNameParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_SanitizationAndHygine_Update(Nullable<int> id, Nullable<System.DateTime> date, string nameOfEmpolyee, string department, string bodyTemperature, string handWash, string cleanNails, string cleanUniform, string appearAnyCutsandWounds, string wearAnyJwellery, string fullyCoverdHair, string cleanShoes, string noTobacoChewingum, string anyKindOfIllnessSeakness, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var nameOfEmpolyeeParameter = nameOfEmpolyee != null ?
            new ObjectParameter("NameOfEmpolyee", nameOfEmpolyee) :
            new ObjectParameter("NameOfEmpolyee", typeof(string));


        var departmentParameter = department != null ?
            new ObjectParameter("Department", department) :
            new ObjectParameter("Department", typeof(string));


        var bodyTemperatureParameter = bodyTemperature != null ?
            new ObjectParameter("BodyTemperature", bodyTemperature) :
            new ObjectParameter("BodyTemperature", typeof(string));


        var handWashParameter = handWash != null ?
            new ObjectParameter("HandWash", handWash) :
            new ObjectParameter("HandWash", typeof(string));


        var cleanNailsParameter = cleanNails != null ?
            new ObjectParameter("CleanNails", cleanNails) :
            new ObjectParameter("CleanNails", typeof(string));


        var cleanUniformParameter = cleanUniform != null ?
            new ObjectParameter("CleanUniform", cleanUniform) :
            new ObjectParameter("CleanUniform", typeof(string));


        var appearAnyCutsandWoundsParameter = appearAnyCutsandWounds != null ?
            new ObjectParameter("AppearAnyCutsandWounds", appearAnyCutsandWounds) :
            new ObjectParameter("AppearAnyCutsandWounds", typeof(string));


        var wearAnyJwelleryParameter = wearAnyJwellery != null ?
            new ObjectParameter("WearAnyJwellery", wearAnyJwellery) :
            new ObjectParameter("WearAnyJwellery", typeof(string));


        var fullyCoverdHairParameter = fullyCoverdHair != null ?
            new ObjectParameter("FullyCoverdHair", fullyCoverdHair) :
            new ObjectParameter("FullyCoverdHair", typeof(string));


        var cleanShoesParameter = cleanShoes != null ?
            new ObjectParameter("CleanShoes", cleanShoes) :
            new ObjectParameter("CleanShoes", typeof(string));


        var noTobacoChewingumParameter = noTobacoChewingum != null ?
            new ObjectParameter("NoTobacoChewingum", noTobacoChewingum) :
            new ObjectParameter("NoTobacoChewingum", typeof(string));


        var anyKindOfIllnessSeaknessParameter = anyKindOfIllnessSeakness != null ?
            new ObjectParameter("AnyKindOfIllnessSeakness", anyKindOfIllnessSeakness) :
            new ObjectParameter("AnyKindOfIllnessSeakness", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_SanitizationAndHygine_Update", idParameter, dateParameter, nameOfEmpolyeeParameter, departmentParameter, bodyTemperatureParameter, handWashParameter, cleanNailsParameter, cleanUniformParameter, appearAnyCutsandWoundsParameter, wearAnyJwelleryParameter, fullyCoverdHairParameter, cleanShoesParameter, noTobacoChewingumParameter, anyKindOfIllnessSeaknessParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Screens_GetAll_Result> usp_tbl_Screens_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Screens_GetAll_Result>("usp_tbl_Screens_GetAll");
    }


    public virtual int usp_tbl_SILOCCP_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SILOCCP_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_SILOCCP_GetAll_Result> usp_tbl_SILOCCP_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SILOCCP_GetAll_Result>("usp_tbl_SILOCCP_GetAll");
    }


    public virtual ObjectResult<usp_tbl_SILOCCP_GetByID_Result> usp_tbl_SILOCCP_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SILOCCP_GetByID_Result>("usp_tbl_SILOCCP_GetByID", iDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_SILOCCP_Insert(Nullable<System.DateTime> date, string time, string itemName, string activity, string monitoringParameter, string transeferedTimeFromRQS, string mandatoryRange, string frequency, string weightOfHoldingMaterial, string correctiveActions, string responsibility, string verification, string remarks, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeParameter = time != null ?
            new ObjectParameter("Time", time) :
            new ObjectParameter("Time", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var activityParameter = activity != null ?
            new ObjectParameter("Activity", activity) :
            new ObjectParameter("Activity", typeof(string));


        var monitoringParameterParameter = monitoringParameter != null ?
            new ObjectParameter("MonitoringParameter", monitoringParameter) :
            new ObjectParameter("MonitoringParameter", typeof(string));


        var transeferedTimeFromRQSParameter = transeferedTimeFromRQS != null ?
            new ObjectParameter("TranseferedTimeFromRQS", transeferedTimeFromRQS) :
            new ObjectParameter("TranseferedTimeFromRQS", typeof(string));


        var mandatoryRangeParameter = mandatoryRange != null ?
            new ObjectParameter("MandatoryRange", mandatoryRange) :
            new ObjectParameter("MandatoryRange", typeof(string));


        var frequencyParameter = frequency != null ?
            new ObjectParameter("Frequency", frequency) :
            new ObjectParameter("Frequency", typeof(string));


        var weightOfHoldingMaterialParameter = weightOfHoldingMaterial != null ?
            new ObjectParameter("WeightOfHoldingMaterial", weightOfHoldingMaterial) :
            new ObjectParameter("WeightOfHoldingMaterial", typeof(string));


        var correctiveActionsParameter = correctiveActions != null ?
            new ObjectParameter("CorrectiveActions", correctiveActions) :
            new ObjectParameter("CorrectiveActions", typeof(string));


        var responsibilityParameter = responsibility != null ?
            new ObjectParameter("Responsibility", responsibility) :
            new ObjectParameter("Responsibility", typeof(string));


        var verificationParameter = verification != null ?
            new ObjectParameter("Verification", verification) :
            new ObjectParameter("Verification", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_SILOCCP_Insert", dateParameter, timeParameter, itemNameParameter, activityParameter, monitoringParameterParameter, transeferedTimeFromRQSParameter, mandatoryRangeParameter, frequencyParameter, weightOfHoldingMaterialParameter, correctiveActionsParameter, responsibilityParameter, verificationParameter, remarksParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_SILOCCP_Update(Nullable<int> iD, Nullable<System.DateTime> date, string time, string itemName, string activity, string monitoringParameter, string transeferedTimeFromRQS, string mandatoryRange, string frequency, string weightOfHoldingMaterial, string correctiveActions, string responsibility, string verification, string remarks, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeParameter = time != null ?
            new ObjectParameter("Time", time) :
            new ObjectParameter("Time", typeof(string));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var activityParameter = activity != null ?
            new ObjectParameter("Activity", activity) :
            new ObjectParameter("Activity", typeof(string));


        var monitoringParameterParameter = monitoringParameter != null ?
            new ObjectParameter("MonitoringParameter", monitoringParameter) :
            new ObjectParameter("MonitoringParameter", typeof(string));


        var transeferedTimeFromRQSParameter = transeferedTimeFromRQS != null ?
            new ObjectParameter("TranseferedTimeFromRQS", transeferedTimeFromRQS) :
            new ObjectParameter("TranseferedTimeFromRQS", typeof(string));


        var mandatoryRangeParameter = mandatoryRange != null ?
            new ObjectParameter("MandatoryRange", mandatoryRange) :
            new ObjectParameter("MandatoryRange", typeof(string));


        var frequencyParameter = frequency != null ?
            new ObjectParameter("Frequency", frequency) :
            new ObjectParameter("Frequency", typeof(string));


        var weightOfHoldingMaterialParameter = weightOfHoldingMaterial != null ?
            new ObjectParameter("WeightOfHoldingMaterial", weightOfHoldingMaterial) :
            new ObjectParameter("WeightOfHoldingMaterial", typeof(string));


        var correctiveActionsParameter = correctiveActions != null ?
            new ObjectParameter("CorrectiveActions", correctiveActions) :
            new ObjectParameter("CorrectiveActions", typeof(string));


        var responsibilityParameter = responsibility != null ?
            new ObjectParameter("Responsibility", responsibility) :
            new ObjectParameter("Responsibility", typeof(string));


        var verificationParameter = verification != null ?
            new ObjectParameter("Verification", verification) :
            new ObjectParameter("Verification", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_SILOCCP_Update", iDParameter, dateParameter, timeParameter, itemNameParameter, activityParameter, monitoringParameterParameter, transeferedTimeFromRQSParameter, mandatoryRangeParameter, frequencyParameter, weightOfHoldingMaterialParameter, correctiveActionsParameter, responsibilityParameter, verificationParameter, remarksParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_SODetails_GetByID_Result> usp_tbl_SODetails_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SODetails_GetByID_Result>("usp_tbl_SODetails_GetByID", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_SODetails_GetByIDFor_CeditNote_Result> usp_tbl_SODetails_GetByIDFor_CeditNote(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SODetails_GetByIDFor_CeditNote_Result>("usp_tbl_SODetails_GetByIDFor_CeditNote", iDParameter);
    }


    public virtual ObjectResult<usp_tbl_SOItemDetailsForCreditNote_GetByID_Result> usp_tbl_SOItemDetailsForCreditNote_GetByID(Nullable<int> sO_Id)
    {

        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SOItemDetailsForCreditNote_GetByID_Result>("usp_tbl_SOItemDetailsForCreditNote_GetByID", sO_IdParameter);
    }


    public virtual int usp_tbl_SOItemDetailsForOutwardNote_GetByID(Nullable<int> sO_Id)
    {

        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_SOItemDetailsForOutwardNote_GetByID", sO_IdParameter);
    }


    public virtual ObjectResult<usp_tbl_SONumber_Get_Result> usp_tbl_SONumber_Get()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SONumber_Get_Result>("usp_tbl_SONumber_Get");
    }


    public virtual ObjectResult<usp_tbl_SONumber_GetAll_Result> usp_tbl_SONumber_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SONumber_GetAll_Result>("usp_tbl_SONumber_GetAll");
    }


    public virtual ObjectResult<usp_tbl_SOPayment_GetByID_Result> usp_tbl_SOPayment_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_SOPayment_GetByID_Result>("usp_tbl_SOPayment_GetByID", idParameter);
    }


    public virtual ObjectResult<usp_tbl_State_GetAll_Result> usp_tbl_State_GetAll(Nullable<int> countryID)
    {

        var countryIDParameter = countryID.HasValue ?
            new ObjectParameter("CountryID", countryID) :
            new ObjectParameter("CountryID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_State_GetAll_Result>("usp_tbl_State_GetAll", countryIDParameter);
    }


    public virtual int usp_tbl_StockAdjustment_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_StockAdjustment_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_StockAdjustment_Insert_Result> usp_tbl_StockAdjustment_Insert(string documentNo, Nullable<System.DateTime> documentDate, Nullable<int> locationId, string locationName, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var documentNoParameter = documentNo != null ?
            new ObjectParameter("DocumentNo", documentNo) :
            new ObjectParameter("DocumentNo", typeof(string));


        var documentDateParameter = documentDate.HasValue ?
            new ObjectParameter("DocumentDate", documentDate) :
            new ObjectParameter("DocumentDate", typeof(System.DateTime));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var locationNameParameter = locationName != null ?
            new ObjectParameter("LocationName", locationName) :
            new ObjectParameter("LocationName", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_StockAdjustment_Insert_Result>("usp_tbl_StockAdjustment_Insert", documentNoParameter, documentDateParameter, locationIdParameter, locationNameParameter, remarksParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_StockAdjustmentDetails_Insert(Nullable<int> stockAdjustment_ID, Nullable<int> itemId, string item_Name, string item_Code, Nullable<decimal> itemUnitPrice, string currencyName, Nullable<decimal> availableStock, string itemUnit, Nullable<decimal> physicalStock, Nullable<decimal> differenceInStock, Nullable<decimal> transferPrice, string remarks, Nullable<int> locationId, Nullable<int> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var stockAdjustment_IDParameter = stockAdjustment_ID.HasValue ?
            new ObjectParameter("StockAdjustment_ID", stockAdjustment_ID) :
            new ObjectParameter("StockAdjustment_ID", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var currencyNameParameter = currencyName != null ?
            new ObjectParameter("CurrencyName", currencyName) :
            new ObjectParameter("CurrencyName", typeof(string));


        var availableStockParameter = availableStock.HasValue ?
            new ObjectParameter("AvailableStock", availableStock) :
            new ObjectParameter("AvailableStock", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var physicalStockParameter = physicalStock.HasValue ?
            new ObjectParameter("PhysicalStock", physicalStock) :
            new ObjectParameter("PhysicalStock", typeof(decimal));


        var differenceInStockParameter = differenceInStock.HasValue ?
            new ObjectParameter("DifferenceInStock", differenceInStock) :
            new ObjectParameter("DifferenceInStock", typeof(decimal));


        var transferPriceParameter = transferPrice.HasValue ?
            new ObjectParameter("TransferPrice", transferPrice) :
            new ObjectParameter("TransferPrice", typeof(decimal));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var locationIdParameter = locationId.HasValue ?
            new ObjectParameter("LocationId", locationId) :
            new ObjectParameter("LocationId", typeof(int));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_StockAdjustmentDetails_Insert", stockAdjustment_IDParameter, itemIdParameter, item_NameParameter, item_CodeParameter, itemUnitPriceParameter, currencyNameParameter, availableStockParameter, itemUnitParameter, physicalStockParameter, differenceInStockParameter, transferPriceParameter, remarksParameter, locationIdParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<usp_tbl_StockTransfer_GetAll_Result> usp_tbl_StockTransfer_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_StockTransfer_GetAll_Result>("usp_tbl_StockTransfer_GetAll");
    }


    public virtual int usp_tbl_StockTransfer_Insert(Nullable<int> fromLocationId, Nullable<int> toLocationId, Nullable<int> itemId, string item_Name, string item_Code, Nullable<double> itemUnitPrice, string itemUnit, Nullable<double> transferQuantity, Nullable<double> requiredQuantity, Nullable<double> finalQuantity, string remarks, Nullable<bool> isDeleted, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> inwardDateOfItem)
    {

        var fromLocationIdParameter = fromLocationId.HasValue ?
            new ObjectParameter("FromLocationId", fromLocationId) :
            new ObjectParameter("FromLocationId", typeof(int));


        var toLocationIdParameter = toLocationId.HasValue ?
            new ObjectParameter("ToLocationId", toLocationId) :
            new ObjectParameter("ToLocationId", typeof(int));


        var itemIdParameter = itemId.HasValue ?
            new ObjectParameter("ItemId", itemId) :
            new ObjectParameter("ItemId", typeof(int));


        var item_NameParameter = item_Name != null ?
            new ObjectParameter("Item_Name", item_Name) :
            new ObjectParameter("Item_Name", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(double));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var transferQuantityParameter = transferQuantity.HasValue ?
            new ObjectParameter("TransferQuantity", transferQuantity) :
            new ObjectParameter("TransferQuantity", typeof(double));


        var requiredQuantityParameter = requiredQuantity.HasValue ?
            new ObjectParameter("RequiredQuantity", requiredQuantity) :
            new ObjectParameter("RequiredQuantity", typeof(double));


        var finalQuantityParameter = finalQuantity.HasValue ?
            new ObjectParameter("FinalQuantity", finalQuantity) :
            new ObjectParameter("FinalQuantity", typeof(double));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var inwardDateOfItemParameter = inwardDateOfItem.HasValue ?
            new ObjectParameter("InwardDateOfItem", inwardDateOfItem) :
            new ObjectParameter("InwardDateOfItem", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_StockTransfer_Insert", fromLocationIdParameter, toLocationIdParameter, itemIdParameter, item_NameParameter, item_CodeParameter, itemUnitPriceParameter, itemUnitParameter, transferQuantityParameter, requiredQuantityParameter, finalQuantityParameter, remarksParameter, isDeletedParameter, createdDateParameter, createdByParameter, inwardDateOfItemParameter);
    }


    public virtual ObjectResult<usp_tbl_StockTransferFromLocationName_GetAll_Result> usp_tbl_StockTransferFromLocationName_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_StockTransferFromLocationName_GetAll_Result>("usp_tbl_StockTransferFromLocationName_GetAll");
    }


    public virtual ObjectResult<usp_tbl_StockTransferToLocationName_GetAll_Result> usp_tbl_StockTransferToLocationName_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_StockTransferToLocationName_GetAll_Result>("usp_tbl_StockTransferToLocationName_GetAll");
    }


    public virtual ObjectResult<usp_tbl_Tax_GetAll_Result> usp_tbl_Tax_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Tax_GetAll_Result>("usp_tbl_Tax_GetAll");
    }


    public virtual int usp_tbl_TaxMaster_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_TaxMaster_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_TaxMaster_GetByID_Result> usp_tbl_TaxMaster_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_TaxMaster_GetByID_Result>("usp_tbl_TaxMaster_GetByID", iDParameter);
    }


    public virtual int usp_tbl_TaxMaster_Insert(string taxName, Nullable<decimal> taxValue, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var taxNameParameter = taxName != null ?
            new ObjectParameter("TaxName", taxName) :
            new ObjectParameter("TaxName", typeof(string));


        var taxValueParameter = taxValue.HasValue ?
            new ObjectParameter("TaxValue", taxValue) :
            new ObjectParameter("TaxValue", typeof(decimal));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_TaxMaster_Insert", taxNameParameter, taxValueParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_TaxMaster_Update(Nullable<int> iD, string taxName, Nullable<decimal> taxValue, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var taxNameParameter = taxName != null ?
            new ObjectParameter("TaxName", taxName) :
            new ObjectParameter("TaxName", typeof(string));


        var taxValueParameter = taxValue.HasValue ?
            new ObjectParameter("TaxValue", taxValue) :
            new ObjectParameter("TaxValue", typeof(decimal));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_TaxMaster_Update", iDParameter, taxNameParameter, taxValueParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_TermsAndCondition_Delete(Nullable<int> iD, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_TermsAndCondition_Delete", iDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_TermsAndCondition_GetAll_Result> usp_tbl_TermsAndCondition_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_TermsAndCondition_GetAll_Result>("usp_tbl_TermsAndCondition_GetAll");
    }


    public virtual ObjectResult<usp_tbl_TermsAndCondition_GetByID_Result> usp_tbl_TermsAndCondition_GetByID(Nullable<int> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_TermsAndCondition_GetByID_Result>("usp_tbl_TermsAndCondition_GetByID", iDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_TermsAndCondition_Insert(string termName, string termDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var termNameParameter = termName != null ?
            new ObjectParameter("TermName", termName) :
            new ObjectParameter("TermName", typeof(string));


        var termDescriptionParameter = termDescription != null ?
            new ObjectParameter("TermDescription", termDescription) :
            new ObjectParameter("TermDescription", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_TermsAndCondition_Insert", termNameParameter, termDescriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_TermsAndCondition_Update(Nullable<int> iD, string termName, string termDescription, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var termNameParameter = termName != null ?
            new ObjectParameter("TermName", termName) :
            new ObjectParameter("TermName", typeof(string));


        var termDescriptionParameter = termDescription != null ?
            new ObjectParameter("TermDescription", termDescription) :
            new ObjectParameter("TermDescription", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_TermsAndCondition_Update", iDParameter, termNameParameter, termDescriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_TransactionsPO_OC_Delete(Nullable<int> purchaseOrderId, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
            new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
            new ObjectParameter("PurchaseOrderId", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_TransactionsPO_OC_Delete", purchaseOrderIdParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_Unit_Delete(Nullable<int> unitID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var unitIDParameter = unitID.HasValue ?
            new ObjectParameter("UnitID", unitID) :
            new ObjectParameter("UnitID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Unit_Delete", unitIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_Unit_GetAll_Result> usp_tbl_Unit_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Unit_GetAll_Result>("usp_tbl_Unit_GetAll");
    }


    public virtual ObjectResult<usp_tbl_Unit_GetByID_Result> usp_tbl_Unit_GetByID(Nullable<int> unitID)
    {

        var unitIDParameter = unitID.HasValue ?
            new ObjectParameter("UnitID", unitID) :
            new ObjectParameter("UnitID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_Unit_GetByID_Result>("usp_tbl_Unit_GetByID", unitIDParameter);
    }


    public virtual int usp_tbl_Unit_Insert(string unitName, string unitCode, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var unitNameParameter = unitName != null ?
            new ObjectParameter("UnitName", unitName) :
            new ObjectParameter("UnitName", typeof(string));


        var unitCodeParameter = unitCode != null ?
            new ObjectParameter("UnitCode", unitCode) :
            new ObjectParameter("UnitCode", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_Unit_Insert", unitNameParameter, unitCodeParameter, descriptionParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_Unit_Update(Nullable<int> unitID, string unitName, string unitCode, string description, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var unitIDParameter = unitID.HasValue ?
            new ObjectParameter("UnitID", unitID) :
            new ObjectParameter("UnitID", typeof(int));


        var unitNameParameter = unitName != null ?
            new ObjectParameter("UnitName", unitName) :
            new ObjectParameter("UnitName", typeof(string));


        var unitCodeParameter = unitCode != null ?
            new ObjectParameter("UnitCode", unitCode) :
            new ObjectParameter("UnitCode", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_Unit_Update", unitIDParameter, unitNameParameter, unitCodeParameter, descriptionParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_UserDetails_Delete(Nullable<int> employeeID, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("EmployeeID", employeeID) :
            new ObjectParameter("EmployeeID", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_UserDetails_Delete", employeeIDParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_UserDetails_GetAll_Result> usp_tbl_UserDetails_GetAll(Nullable<int> userId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_UserDetails_GetAll_Result>("usp_tbl_UserDetails_GetAll", userIdParameter);
    }


    public virtual int usp_tbl_UserDetails_GetByID(Nullable<int> employeeID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("EmployeeID", employeeID) :
            new ObjectParameter("EmployeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_UserDetails_GetByID", employeeIDParameter);
    }


    public virtual int usp_tbl_UserDetails_Insert(string employeeName, Nullable<int> designationID, Nullable<int> organisationID, string employeeMobileNo, string emailId, string employeeGender, Nullable<System.DateTime> employeeJoingDate, string employeeAddress, string userName, string password, Nullable<int> roleId, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var employeeNameParameter = employeeName != null ?
            new ObjectParameter("EmployeeName", employeeName) :
            new ObjectParameter("EmployeeName", typeof(string));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("DesignationID", designationID) :
            new ObjectParameter("DesignationID", typeof(int));


        var organisationIDParameter = organisationID.HasValue ?
            new ObjectParameter("OrganisationID", organisationID) :
            new ObjectParameter("OrganisationID", typeof(int));


        var employeeMobileNoParameter = employeeMobileNo != null ?
            new ObjectParameter("EmployeeMobileNo", employeeMobileNo) :
            new ObjectParameter("EmployeeMobileNo", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var employeeGenderParameter = employeeGender != null ?
            new ObjectParameter("EmployeeGender", employeeGender) :
            new ObjectParameter("EmployeeGender", typeof(string));


        var employeeJoingDateParameter = employeeJoingDate.HasValue ?
            new ObjectParameter("EmployeeJoingDate", employeeJoingDate) :
            new ObjectParameter("EmployeeJoingDate", typeof(System.DateTime));


        var employeeAddressParameter = employeeAddress != null ?
            new ObjectParameter("EmployeeAddress", employeeAddress) :
            new ObjectParameter("EmployeeAddress", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_UserDetails_Insert", employeeNameParameter, designationIDParameter, organisationIDParameter, employeeMobileNoParameter, emailIdParameter, employeeGenderParameter, employeeJoingDateParameter, employeeAddressParameter, userNameParameter, passwordParameter, roleIdParameter, isActiveParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_UserDetails_Update(Nullable<int> employeeID, string employeeName, Nullable<int> designationID, Nullable<int> organisationID, string employeeMobileNo, string emailId, string employeeGender, Nullable<System.DateTime> employeeJoingDate, string employeeAddress, string userName, string password, Nullable<int> roleId, Nullable<bool> isActive, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("EmployeeID", employeeID) :
            new ObjectParameter("EmployeeID", typeof(int));


        var employeeNameParameter = employeeName != null ?
            new ObjectParameter("EmployeeName", employeeName) :
            new ObjectParameter("EmployeeName", typeof(string));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("DesignationID", designationID) :
            new ObjectParameter("DesignationID", typeof(int));


        var organisationIDParameter = organisationID.HasValue ?
            new ObjectParameter("OrganisationID", organisationID) :
            new ObjectParameter("OrganisationID", typeof(int));


        var employeeMobileNoParameter = employeeMobileNo != null ?
            new ObjectParameter("EmployeeMobileNo", employeeMobileNo) :
            new ObjectParameter("EmployeeMobileNo", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var employeeGenderParameter = employeeGender != null ?
            new ObjectParameter("EmployeeGender", employeeGender) :
            new ObjectParameter("EmployeeGender", typeof(string));


        var employeeJoingDateParameter = employeeJoingDate.HasValue ?
            new ObjectParameter("EmployeeJoingDate", employeeJoingDate) :
            new ObjectParameter("EmployeeJoingDate", typeof(System.DateTime));


        var employeeAddressParameter = employeeAddress != null ?
            new ObjectParameter("EmployeeAddress", employeeAddress) :
            new ObjectParameter("EmployeeAddress", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_UserDetails_Update", employeeIDParameter, employeeNameParameter, designationIDParameter, organisationIDParameter, employeeMobileNoParameter, emailIdParameter, employeeGenderParameter, employeeJoingDateParameter, employeeAddressParameter, userNameParameter, passwordParameter, roleIdParameter, isActiveParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_usp_tbl_StockMaster_Insert_Insert(Nullable<int> itemID, string itemName, string item_Code, Nullable<decimal> itemUnitPrice, string itemUnit, Nullable<double> stockQuantity, Nullable<int> gRNId, Nullable<int> pO_Id, string pO_Number, string saledOrder_Number, Nullable<int> sO_Id, string remarks, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var itemIDParameter = itemID.HasValue ?
            new ObjectParameter("ItemID", itemID) :
            new ObjectParameter("ItemID", typeof(int));


        var itemNameParameter = itemName != null ?
            new ObjectParameter("ItemName", itemName) :
            new ObjectParameter("ItemName", typeof(string));


        var item_CodeParameter = item_Code != null ?
            new ObjectParameter("Item_Code", item_Code) :
            new ObjectParameter("Item_Code", typeof(string));


        var itemUnitPriceParameter = itemUnitPrice.HasValue ?
            new ObjectParameter("ItemUnitPrice", itemUnitPrice) :
            new ObjectParameter("ItemUnitPrice", typeof(decimal));


        var itemUnitParameter = itemUnit != null ?
            new ObjectParameter("ItemUnit", itemUnit) :
            new ObjectParameter("ItemUnit", typeof(string));


        var stockQuantityParameter = stockQuantity.HasValue ?
            new ObjectParameter("StockQuantity", stockQuantity) :
            new ObjectParameter("StockQuantity", typeof(double));


        var gRNIdParameter = gRNId.HasValue ?
            new ObjectParameter("GRNId", gRNId) :
            new ObjectParameter("GRNId", typeof(int));


        var pO_IdParameter = pO_Id.HasValue ?
            new ObjectParameter("PO_Id", pO_Id) :
            new ObjectParameter("PO_Id", typeof(int));


        var pO_NumberParameter = pO_Number != null ?
            new ObjectParameter("PO_Number", pO_Number) :
            new ObjectParameter("PO_Number", typeof(string));


        var saledOrder_NumberParameter = saledOrder_Number != null ?
            new ObjectParameter("SaledOrder_Number", saledOrder_Number) :
            new ObjectParameter("SaledOrder_Number", typeof(string));


        var sO_IdParameter = sO_Id.HasValue ?
            new ObjectParameter("SO_Id", sO_Id) :
            new ObjectParameter("SO_Id", typeof(int));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_usp_tbl_StockMaster_Insert_Insert", itemIDParameter, itemNameParameter, item_CodeParameter, itemUnitPriceParameter, itemUnitParameter, stockQuantityParameter, gRNIdParameter, pO_IdParameter, pO_NumberParameter, saledOrder_NumberParameter, sO_IdParameter, remarksParameter, isDeletedParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_VegWasherDosageLog_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_VegWasherDosageLog_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_VegWasherDosageLog_GetAll_Result> usp_tbl_VegWasherDosageLog_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_VegWasherDosageLog_GetAll_Result>("usp_tbl_VegWasherDosageLog_GetAll");
    }


    public virtual ObjectResult<usp_tbl_VegWasherDosageLog_GetAllByDate_Result> usp_tbl_VegWasherDosageLog_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_VegWasherDosageLog_GetAllByDate_Result>("usp_tbl_VegWasherDosageLog_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_VegWasherDosageLog_GetByID_Result> usp_tbl_VegWasherDosageLog_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_VegWasherDosageLog_GetByID_Result>("usp_tbl_VegWasherDosageLog_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_VegWasherDosageLog_Insert(Nullable<System.DateTime> date, Nullable<decimal> vegWasher1SolutionAMl, Nullable<decimal> vegWasher1SolutionBMl, string nameOfItem1, string washingTime1, string ppm1, Nullable<decimal> vegWasher2SolutionAMl, Nullable<decimal> vegWasher2SolutionBMl, string nameOfItem2, string washingTime2, string ppm2, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var vegWasher1SolutionAMlParameter = vegWasher1SolutionAMl.HasValue ?
            new ObjectParameter("VegWasher1SolutionAMl", vegWasher1SolutionAMl) :
            new ObjectParameter("VegWasher1SolutionAMl", typeof(decimal));


        var vegWasher1SolutionBMlParameter = vegWasher1SolutionBMl.HasValue ?
            new ObjectParameter("VegWasher1SolutionBMl", vegWasher1SolutionBMl) :
            new ObjectParameter("VegWasher1SolutionBMl", typeof(decimal));


        var nameOfItem1Parameter = nameOfItem1 != null ?
            new ObjectParameter("NameOfItem1", nameOfItem1) :
            new ObjectParameter("NameOfItem1", typeof(string));


        var washingTime1Parameter = washingTime1 != null ?
            new ObjectParameter("WashingTime1", washingTime1) :
            new ObjectParameter("WashingTime1", typeof(string));


        var ppm1Parameter = ppm1 != null ?
            new ObjectParameter("Ppm1", ppm1) :
            new ObjectParameter("Ppm1", typeof(string));


        var vegWasher2SolutionAMlParameter = vegWasher2SolutionAMl.HasValue ?
            new ObjectParameter("VegWasher2SolutionAMl", vegWasher2SolutionAMl) :
            new ObjectParameter("VegWasher2SolutionAMl", typeof(decimal));


        var vegWasher2SolutionBMlParameter = vegWasher2SolutionBMl.HasValue ?
            new ObjectParameter("VegWasher2SolutionBMl", vegWasher2SolutionBMl) :
            new ObjectParameter("VegWasher2SolutionBMl", typeof(decimal));


        var nameOfItem2Parameter = nameOfItem2 != null ?
            new ObjectParameter("NameOfItem2", nameOfItem2) :
            new ObjectParameter("NameOfItem2", typeof(string));


        var washingTime2Parameter = washingTime2 != null ?
            new ObjectParameter("WashingTime2", washingTime2) :
            new ObjectParameter("WashingTime2", typeof(string));


        var ppm2Parameter = ppm2 != null ?
            new ObjectParameter("Ppm2", ppm2) :
            new ObjectParameter("Ppm2", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_VegWasherDosageLog_Insert", dateParameter, vegWasher1SolutionAMlParameter, vegWasher1SolutionBMlParameter, nameOfItem1Parameter, washingTime1Parameter, ppm1Parameter, vegWasher2SolutionAMlParameter, vegWasher2SolutionBMlParameter, nameOfItem2Parameter, washingTime2Parameter, ppm2Parameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_VegWasherDosageLog_Update(Nullable<int> id, Nullable<System.DateTime> date, Nullable<decimal> vegWasher1SolutionAMl, Nullable<decimal> vegWasher1SolutionBMl, string nameOfItem1, string washingTime1, string ppm1, Nullable<decimal> vegWasher2SolutionAMl, Nullable<decimal> vegWasher2SolutionBMl, string nameOfItem2, string washingTime2, string ppm2, string verifyByName, Nullable<bool> isDeleted, string remark, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var vegWasher1SolutionAMlParameter = vegWasher1SolutionAMl.HasValue ?
            new ObjectParameter("VegWasher1SolutionAMl", vegWasher1SolutionAMl) :
            new ObjectParameter("VegWasher1SolutionAMl", typeof(decimal));


        var vegWasher1SolutionBMlParameter = vegWasher1SolutionBMl.HasValue ?
            new ObjectParameter("VegWasher1SolutionBMl", vegWasher1SolutionBMl) :
            new ObjectParameter("VegWasher1SolutionBMl", typeof(decimal));


        var nameOfItem1Parameter = nameOfItem1 != null ?
            new ObjectParameter("NameOfItem1", nameOfItem1) :
            new ObjectParameter("NameOfItem1", typeof(string));


        var washingTime1Parameter = washingTime1 != null ?
            new ObjectParameter("WashingTime1", washingTime1) :
            new ObjectParameter("WashingTime1", typeof(string));


        var ppm1Parameter = ppm1 != null ?
            new ObjectParameter("Ppm1", ppm1) :
            new ObjectParameter("Ppm1", typeof(string));


        var vegWasher2SolutionAMlParameter = vegWasher2SolutionAMl.HasValue ?
            new ObjectParameter("VegWasher2SolutionAMl", vegWasher2SolutionAMl) :
            new ObjectParameter("VegWasher2SolutionAMl", typeof(decimal));


        var vegWasher2SolutionBMlParameter = vegWasher2SolutionBMl.HasValue ?
            new ObjectParameter("VegWasher2SolutionBMl", vegWasher2SolutionBMl) :
            new ObjectParameter("VegWasher2SolutionBMl", typeof(decimal));


        var nameOfItem2Parameter = nameOfItem2 != null ?
            new ObjectParameter("NameOfItem2", nameOfItem2) :
            new ObjectParameter("NameOfItem2", typeof(string));


        var washingTime2Parameter = washingTime2 != null ?
            new ObjectParameter("WashingTime2", washingTime2) :
            new ObjectParameter("WashingTime2", typeof(string));


        var ppm2Parameter = ppm2 != null ?
            new ObjectParameter("Ppm2", ppm2) :
            new ObjectParameter("Ppm2", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_VegWasherDosageLog_Update", idParameter, dateParameter, vegWasher1SolutionAMlParameter, vegWasher1SolutionBMlParameter, nameOfItem1Parameter, washingTime1Parameter, ppm1Parameter, vegWasher2SolutionAMlParameter, vegWasher2SolutionBMlParameter, nameOfItem2Parameter, washingTime2Parameter, ppm2Parameter, verifyByNameParameter, isDeletedParameter, remarkParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual int usp_tbl_WaterAnalysis_Delete(Nullable<int> id, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tbl_WaterAnalysis_Delete", idParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_WaterAnalysis_GetAll_Result> usp_tbl_WaterAnalysis_GetAll()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_WaterAnalysis_GetAll_Result>("usp_tbl_WaterAnalysis_GetAll");
    }


    public virtual ObjectResult<usp_tbl_WaterAnalysis_GetAllByDate_Result> usp_tbl_WaterAnalysis_GetAllByDate(Nullable<int> flagdate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var flagdateParameter = flagdate.HasValue ?
            new ObjectParameter("flagdate", flagdate) :
            new ObjectParameter("flagdate", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_WaterAnalysis_GetAllByDate_Result>("usp_tbl_WaterAnalysis_GetAllByDate", flagdateParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<usp_tbl_WaterAnalysis_GetByID_Result> usp_tbl_WaterAnalysis_GetByID(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_WaterAnalysis_GetByID_Result>("usp_tbl_WaterAnalysis_GetByID", idParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_WaterAnalysis_Insert(Nullable<System.DateTime> date, string time, string pAPH, string pATDS, string pAHardness, string pASaltAdded, string sWPH, string sWTDS, string sWHardness, string eTPTEM, string eTPPH, string eTPTDS, string tEM, Nullable<decimal> gasReading, string verifyByName, string remark, Nullable<bool> isDeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeParameter = time != null ?
            new ObjectParameter("Time", time) :
            new ObjectParameter("Time", typeof(string));


        var pAPHParameter = pAPH != null ?
            new ObjectParameter("PAPH", pAPH) :
            new ObjectParameter("PAPH", typeof(string));


        var pATDSParameter = pATDS != null ?
            new ObjectParameter("PATDS", pATDS) :
            new ObjectParameter("PATDS", typeof(string));


        var pAHardnessParameter = pAHardness != null ?
            new ObjectParameter("PAHardness", pAHardness) :
            new ObjectParameter("PAHardness", typeof(string));


        var pASaltAddedParameter = pASaltAdded != null ?
            new ObjectParameter("PASaltAdded", pASaltAdded) :
            new ObjectParameter("PASaltAdded", typeof(string));


        var sWPHParameter = sWPH != null ?
            new ObjectParameter("SWPH", sWPH) :
            new ObjectParameter("SWPH", typeof(string));


        var sWTDSParameter = sWTDS != null ?
            new ObjectParameter("SWTDS", sWTDS) :
            new ObjectParameter("SWTDS", typeof(string));


        var sWHardnessParameter = sWHardness != null ?
            new ObjectParameter("SWHardness", sWHardness) :
            new ObjectParameter("SWHardness", typeof(string));


        var eTPTEMParameter = eTPTEM != null ?
            new ObjectParameter("ETPTEM", eTPTEM) :
            new ObjectParameter("ETPTEM", typeof(string));


        var eTPPHParameter = eTPPH != null ?
            new ObjectParameter("ETPPH", eTPPH) :
            new ObjectParameter("ETPPH", typeof(string));


        var eTPTDSParameter = eTPTDS != null ?
            new ObjectParameter("ETPTDS", eTPTDS) :
            new ObjectParameter("ETPTDS", typeof(string));


        var tEMParameter = tEM != null ?
            new ObjectParameter("TEM", tEM) :
            new ObjectParameter("TEM", typeof(string));


        var gasReadingParameter = gasReading.HasValue ?
            new ObjectParameter("GasReading", gasReading) :
            new ObjectParameter("GasReading", typeof(decimal));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_WaterAnalysis_Insert", dateParameter, timeParameter, pAPHParameter, pATDSParameter, pAHardnessParameter, pASaltAddedParameter, sWPHParameter, sWTDSParameter, sWHardnessParameter, eTPTEMParameter, eTPPHParameter, eTPTDSParameter, tEMParameter, gasReadingParameter, verifyByNameParameter, remarkParameter, isDeletedParameter, createdByParameter, createdDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tbl_WaterAnalysis_Update(Nullable<int> id, Nullable<System.DateTime> date, string time, string pAPH, string pATDS, string pAHardness, string pASaltAdded, string sWPH, string sWTDS, string sWHardness, string eTPTEM, string eTPPH, string eTPTDS, string tEM, Nullable<decimal> gasReading, string remark, string verifyByName, Nullable<int> lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeParameter = time != null ?
            new ObjectParameter("Time", time) :
            new ObjectParameter("Time", typeof(string));


        var pAPHParameter = pAPH != null ?
            new ObjectParameter("PAPH", pAPH) :
            new ObjectParameter("PAPH", typeof(string));


        var pATDSParameter = pATDS != null ?
            new ObjectParameter("PATDS", pATDS) :
            new ObjectParameter("PATDS", typeof(string));


        var pAHardnessParameter = pAHardness != null ?
            new ObjectParameter("PAHardness", pAHardness) :
            new ObjectParameter("PAHardness", typeof(string));


        var pASaltAddedParameter = pASaltAdded != null ?
            new ObjectParameter("PASaltAdded", pASaltAdded) :
            new ObjectParameter("PASaltAdded", typeof(string));


        var sWPHParameter = sWPH != null ?
            new ObjectParameter("SWPH", sWPH) :
            new ObjectParameter("SWPH", typeof(string));


        var sWTDSParameter = sWTDS != null ?
            new ObjectParameter("SWTDS", sWTDS) :
            new ObjectParameter("SWTDS", typeof(string));


        var sWHardnessParameter = sWHardness != null ?
            new ObjectParameter("SWHardness", sWHardness) :
            new ObjectParameter("SWHardness", typeof(string));


        var eTPTEMParameter = eTPTEM != null ?
            new ObjectParameter("ETPTEM", eTPTEM) :
            new ObjectParameter("ETPTEM", typeof(string));


        var eTPPHParameter = eTPPH != null ?
            new ObjectParameter("ETPPH", eTPPH) :
            new ObjectParameter("ETPPH", typeof(string));


        var eTPTDSParameter = eTPTDS != null ?
            new ObjectParameter("ETPTDS", eTPTDS) :
            new ObjectParameter("ETPTDS", typeof(string));


        var tEMParameter = tEM != null ?
            new ObjectParameter("TEM", tEM) :
            new ObjectParameter("TEM", typeof(string));


        var gasReadingParameter = gasReading.HasValue ?
            new ObjectParameter("GasReading", gasReading) :
            new ObjectParameter("GasReading", typeof(decimal));


        var remarkParameter = remark != null ?
            new ObjectParameter("Remark", remark) :
            new ObjectParameter("Remark", typeof(string));


        var verifyByNameParameter = verifyByName != null ?
            new ObjectParameter("VerifyByName", verifyByName) :
            new ObjectParameter("VerifyByName", typeof(string));


        var lastModifiedByParameter = lastModifiedBy.HasValue ?
            new ObjectParameter("LastModifiedBy", lastModifiedBy) :
            new ObjectParameter("LastModifiedBy", typeof(int));


        var lastModifiedDateParameter = lastModifiedDate.HasValue ?
            new ObjectParameter("LastModifiedDate", lastModifiedDate) :
            new ObjectParameter("LastModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tbl_WaterAnalysis_Update", idParameter, dateParameter, timeParameter, pAPHParameter, pATDSParameter, pAHardnessParameter, pASaltAddedParameter, sWPHParameter, sWTDSParameter, sWHardnessParameter, eTPTEMParameter, eTPPHParameter, eTPTDSParameter, tEMParameter, gasReadingParameter, remarkParameter, verifyByNameParameter, lastModifiedByParameter, lastModifiedDateParameter);
    }


    public virtual ObjectResult<usp_tbl_WorkOrderNumber_Get_Result> usp_tbl_WorkOrderNumber_Get()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tbl_WorkOrderNumber_Get_Result>("usp_tbl_WorkOrderNumber_Get");
    }

}

}

