@model InVanWebApp_BO.BatchPlanningMasterBO
@{
    ViewBag.Title = "AddBatchPlanning";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddBatchPlanning", "BatchPlanning"))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Batch Planning</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Batch Planning Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.BatchPlanningDocumentNo, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.BatchPlanningDocumentNo, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("SO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.SO_Id, (IEnumerable<SelectListItem>)ViewData["SO_dd"], "--Select--",
        new { @class = "form-control form-control-sm", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.SO_Id, "", new { @class = "error mt-2 text-danger" })

                    @Html.HiddenFor(model => model.SONumber)
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Work Order No")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WorkOrderNumber, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.WorkOrderNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "--Select--", new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model => model.LocationName)
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Packing Size (Kg)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PackingSize, new { @class = "form-control form-control-sm", onkeypress = "return isNumberKey(event)", maxlength = "4" })
                    @Html.ValidationMessageFor(model => model.PackingSize, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Raw Material Yield")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.TotalRawMaterialYeild, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.TotalRawMaterialYeild, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Product Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    <select id="ProductId" name="ProductId" class="form-control form-control-sm" onchange="SelectedIndexChangedProductName($(this).val())" data-val="true" data-val-number="The field ProductId must be a number." data-val-required="Select the Product Name!">
                        <option value="">--Select--</option>
                    </select>
                    @*@Html.DropDownListFor(model => model.ProductId, (IEnumerable<SelectListItem>)ViewData["Product_dd"], "--Select--", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedProductName($(this).val())" })*@
                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model => model.ProductName)
                </div>
                <div class="col-md-2">
                    @Html.Label("Packing Type")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PackingType, new { @class = "form-control form-control-sm", Value = "Flat Pouches", title = "Flat Pouches" })
                    @Html.ValidationMessageFor(model => model.PackingType, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Order Quantity")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.OrderQuantity, new { @class = "form-control form-control-sm", onkeypress = "return isNumberKey(event)", maxlength = "8", onchange = "OnOrderQtyChange($(this).val())", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.OrderQuantity, "", new { @class = "error mt-2 text-danger", id = "valOrderQtyMsg" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Order Quantity Unit")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.OrderQuantityUnit, new { @class = "form-control form-control-sm", Value = "Pouches", title = "Pouches" })
                    @Html.ValidationMessageFor(model => model.OrderQuantityUnit, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Required Quantity (KG)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.RequiredQuantityInKG, new { @class = "form-control form-control-sm", onkeypress = "return isNumberKey(event)", maxlength = "8", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.RequiredQuantityInKG, "", new { @class = "error mt-2 text-danger", id = "valRequiredQtyMgs" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", maxlength = 100 })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title" style="color:darkcyan">Item Details</h4><hr />
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle d-n d-none">Item Id</th>
                                                <th class="sortStyle">Ingredients</th>
                                                <th class="sortStyle">Percentage (%)</th>
                                                <th class="sortStyle">Batch Size (KG)</th>
                                                <th class="sortStyle">Total Batches (KG)</th>
                                                <th class="sortStyle">Yeild (%)</th>
                                                <th class="sortStyle">Actual Requirement (KG)</th>
                                                <th class="sortStyle">Stock In Hand</th>
                                                <th class="sortStyle">To be Procured (KG)</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @*<input class="form-control text-right" id="TxtItemDetails" name="TxtItemDetails" value="" />*@
                            @Html.TextBoxFor(model => model.txtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Batch Size (KG)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.TotalBatchSize, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.TotalBatchSize, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Total Batches")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.TotalNoBatches, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.TotalNoBatches, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />

            <br />
            <a href="@Url.Action("Index", "BatchPlanning")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button id="btnSave" type="submit" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right;" onclick="SaveBtnClick()">Save</button>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

@Html.Raw(TempData["Success"])

<script>

    function OnOrderQtyChange(value) {
        if (value == '' || value == null)
            value = 0;
        value = parseFloat(value);

        //Checking the packing size value.
        var PackingSize = $('#PackingSize').val();
        PackingSize = parseFloat(PackingSize);

        //Checking the total raw material yield value.
        var totalRawYield = $('#TotalRawMaterialYeild').val();
        totalRawYield = parseFloat(totalRawYield);

        if (value != 0) {
            $('#RequiredQuantityInKG').val(value * PackingSize);
            $('#valOrderQtyMsg').hide();
            var table = document.getElementById('submissionTable');
            var rowCount = table.rows.length;
            var i = 0;
            var totalPercentage = 0, TotalBatchSize = 0;
            while (i < rowCount - 1) {
                totalPercentage = totalPercentage + parseFloat(document.getElementById('RoundedRatio_' + i).innerHTML);
                TotalBatchSize = TotalBatchSize + parseFloat(document.getElementById('BatchSize_' + i).innerHTML);
                i++;
            }
            var totalBatchYield = ((totalRawYield * TotalBatchSize) / totalPercentage);
            TotalBatchSize = Math.round(TotalBatchSize*100)/100;
            $('#TotalBatchSize').val(TotalBatchSize);

            var RequiredQuantityInKG = $('#RequiredQuantityInKG').val();
            RequiredQuantityInKG = parseFloat(RequiredQuantityInKG);

            var TotalNoOfBatch = (RequiredQuantityInKG / totalBatchYield);
            TotalNoOfBatch = Math.round(TotalNoOfBatch * 1000) / 1000;
            $('#TotalNoBatches').val(TotalNoOfBatch);

            i = 0;
            while (i < rowCount - 1) {
                var batchSize = document.getElementById('BatchSize_' + i).innerHTML;
                batchSize = parseFloat(batchSize);
                var totalBatchCol = (TotalNoOfBatch * batchSize);
                totalBatchCol = Math.round(totalBatchCol * 1000) / 1000;
                document.getElementById('TotalBatches_' + i).value = totalBatchCol;
                i++;
            }
        }
        else {
            $('#RequiredQuantityInKG').val(value * PackingSize);
            $('#valOrderQtyMsg').show();
            $('#valOrderQtyMsg').text('Enter Order Quantity!');
            $('#OrderQuantity').focus();
            return;
        }

    }

    function OnChangeYield(value, id) {
        $("#ProductId").prop("readonly", "readonly");
        $('#btnSave').prop('disabled', false);
        var rowNo = id.split('_')[1];

        if (value == null || value == '')
            value = 0;

        value = parseFloat(value);

        if (value != 0) {

            var totalBatch = document.getElementById('TotalBatches_' + rowNo).value;
            totalBatch = parseFloat(totalBatch);

            var RequiredQty = (totalBatch * 100) / value;
            RequiredQty = Math.round(RequiredQty * 1000) / 1000;
            document.getElementById('ActualRequirement_' + rowNo).value = RequiredQty;

            var StockInHand = (document.getElementById('StockInHand_' + rowNo).innerHTML).split(' ')[0];
            StockInHand = parseFloat(StockInHand);

            var ToBeProcured = RequiredQty - StockInHand;

            if (ToBeProcured < 0)
                ToBeProcured = 0;
            else {
                ToBeProcured = Math.round(ToBeProcured * 1000) / 1000;
                document.getElementById('ToBeProcured_' + rowNo).value = ToBeProcured;
            }
        }
    }

    function SelectedIndexChanged(id) {
        $('#btnSave').prop('disabled', false);

        $.ajax({
            url: '/BatchPlanning/GetWorkOrderNumber',
            type: "POST",
            data: { id },
            success: function (result) {
                if (result.IsBatchDone == 1) {
                    $('#btnSave').prop('disabled', true);
                    alert('Batch planning of the selected SO is done!');
                    return;
                }
                else {
                    $('#btnSave').prop('disabled', false);
                }

                $('#WorkOrderNumber').val(result.WorkOrderNo);
                var count = result.salesOrderItemsDetails.length;

                $('#PackingSize').removeAttr('readonly');
                $('#TotalRawMaterialYeild').removeAttr('readonly');
                
                var i = 0;
                $("#ProductId option").remove();
                $("#ProductId").append($("<option></option>").val('').html('--Select--'));
                while (i < count) {
                    $("#ProductId").append($("<option></option>").val(result.salesOrderItemsDetails[i].Item_ID).html(result.salesOrderItemsDetails[i].ItemName));
                    i++;
                }

            },
            error: function (err) {
                alert('Not able to get the work order number!');
            }
        });
    }

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 0, flag = 0;
        while (i < rowCount) {
            var Yield = $('#Yield_' + i).val();
            if (Yield == '' || Yield == null) {
                Yeild = 0;
            }
            else
                Yield = parseFloat(Yield);

            if (Yield == 0) {
                flag = 1;
                break;
            }
            i++;
        }

        if (flag == 1) {
            alert("Yield is zero or null! Cannot plan the batch!");
            $('#btnSave').prop('disabled', true);
            event.preventDefault();
            return;
        }
        else
            $('#btnSave').prop('disabled', false);

        createJson();
    };
    //==========end===============

    //=====================Onchange of Product Name description===========================
    function SelectedIndexChangedProductName(id) {

        $('#valRequiredQtyMgs').hide();

        //Checking the packing size value.
        var PackingSize = $('#PackingSize').val();
        if (PackingSize == null || PackingSize == '' || PackingSize == 0) {
            $('#PackingSize').focus();
            document.getElementById('ProductId').selectedIndex = 0;
            return;
        }
        else {
            parseFloat(PackingSize);
            document.getElementById('PackingSize').setAttribute("readonly", "readonly");
        }

        var totalRawYield = $('#TotalRawMaterialYeild').val();
        if (totalRawYield == null || totalRawYield == '' || totalRawYield == 0) {
            $('#TotalRawMaterialYeild').focus();
            document.getElementById('ProductId').selectedIndex = 0;
            return;
        }
        else {
            parseFloat(totalRawYield);
            document.getElementById('TotalRawMaterialYeild').setAttribute("readonly", "readonly");
        }
        //Check whether the currency dropdown is selected or not

        var CurrencyIDCheck = $('#SO_Id option:selected').text();
        if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
            $('#SO_Id').focus();
            document.getElementById('ProductId').selectedIndex = 0;
            return;
        }
        else {
            $("#SONumber").val(CurrencyIDCheck);
            $("#SO_Id").prop("readonly", "readonly");
        }

        var LId = $("#LocationId").val();
        if (LId == '' || LId == null) {
            $('#LocationId').focus();
            document.getElementById('ProductId').selectedIndex = 0;
            return;
        }
        else {
            $("#LocationName").val($("#LocationId option:selected").text());
            $("#LocationId").prop("readonly", "readonly");
        }
        //For deleting the rows of Item table if exist.

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        var ProductNumber = $("#ProductId option:selected").text();
        $('#ProductName').val(ProductNumber);
        var SOId = $('#SO_Id').val();

        $.ajax({
            url: '/BatchPlanning/GetRecipe?id=' + id + "&LocationId=" + LId + "&SId=" + SOId,
            type: "POST",
            data: {},
            success: function (result) {
                if (result.length != 0) {
                    $('#OrderQuantity').val(result[0].SalesOrderQty);

                    var table = document.getElementById('submissionTable');
                    for (var j = 0; j < result.length; j++) {
                        var rowCount = table.rows.length;
                        var cellCount = table.rows[0].cells.length;
                        var row = table.insertRow(rowCount);

                        for (var i = 0; i < cellCount; i++) {
                            var cell = 'cell' + i;
                            cell = row.insertCell(i);

                            if (i == 0) {
                                cell.innerHTML = result[j].ItemCode;
                                cell.setAttribute("id", "ItemCode_" + j);
                            }
                            else if (i == 1) {
                                cell.innerHTML = result[j].ItemId;
                                cell.setAttribute("class", "d-none");
                                cell.setAttribute("id", "ItemID_" + j);
                            }
                            else if (i == 2) {
                                cell.innerHTML = result[j].ItemName;
                                cell.setAttribute("id", "ItemName_" + j);

                            }
                            else if (i == 3) {
                                cell.innerHTML = result[j].RoundedRatio;
                                cell.setAttribute("id", "RoundedRatio_" + j);

                            }
                            else if (i == 4) {
                                cell.innerHTML = result[j].BatchSize;
                                cell.setAttribute("id", "BatchSize_" + j);
                            }
                            else if (i == 5) {
                                var t4 = document.createElement("input");
                                t4.id = "TotalBatches_" + j;
                                t4.setAttribute("value", result[j].TotalBatches);
                                t4.setAttribute("class", "form-control form-control-sm");
                                t4.setAttribute("readonly", "readonly");
                                cell.appendChild(t4);
                            }

                            else if (i == 6) {
                                var t4 = document.createElement("input");
                                t4.id = "Yield_" + j;
                                t4.setAttribute("value", result[j].Yield);
                                t4.setAttribute("class", "form-control form-control-sm");
                                t4.setAttribute("maxlength", "8");
                                t4.setAttribute("onkeypress", "return isNumberKey(event)");
                                t4.setAttribute("onchange", "OnChangeYield($(this).val(),id)");
                                cell.appendChild(t4);
                            }
                            else if (i == 7) {
                                var t4 = document.createElement("input");
                                t4.id = "ActualRequirement_" + j;
                                t4.setAttribute("value", result[j].ActualRequirement);
                                t4.setAttribute("class", "form-control form-control-sm");
                                t4.setAttribute("readonly", "readonly");
                                cell.appendChild(t4);
                            }
                            else if (i == 8) {
                                cell.innerHTML = result[j].StockInHand + " Kg";
                                cell.setAttribute("id", "StockInHand_" + j);
                            }
                            else if (i == 9) {
                                var t4 = document.createElement("input");
                                t4.id = "ToBeProcured_" + j;
                                t4.setAttribute("value", result[j].ToBeProcured);
                                t4.setAttribute("class", "form-control form-control-sm");
                                t4.setAttribute("readonly", "readonly");
                                cell.appendChild(t4);
                            }
                        }

                    }

                    var value = $('#OrderQuantity').val();
                    OnOrderQtyChange(value);
                }
                else
                    alert('No recipe is made for the selected product name! Create the recipe.')

            },
            error: function (err) {
                alert('Not able to fetch recipe!');

            }
        });
    }

    //=============End==============

    var TxtItemDetails = "";

    function createJson() {

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 0;
        TxtItemDetails = "[";
        for (i = 0; i < rowCount - 1; i++) {
            var ItemCode = (document.getElementById("ItemCode_" + i)).innerHTML;
            var ItemID = (document.getElementById("ItemID_" + i)).innerHTML;
            var ItemName = (document.getElementById("ItemName_" + i)).innerHTML;
            var Percentage = ((document.getElementById("RoundedRatio_" + i)).innerHTML);
            var BatchSizeCol = ((document.getElementById("BatchSize_" + i)).innerHTML);
            var TotalBatchesCol = ((document.getElementById("TotalBatches_" + i)).value);
            var YeildCol = ((document.getElementById("Yield_" + i)).value);
            var ActualRequirementCol = ((document.getElementById("ActualRequirement_" + i)).value);

            TotalBatchesCol = (TotalBatchesCol == null || TotalBatchesCol == '' || TotalBatchesCol == 0) ? 0 : TotalBatchesCol;
            YeildCol = (YeildCol == null || YeildCol == '' || YeildCol == 0) ? 0 : YeildCol;

            var StockInHandCol = document.getElementById("StockInHand_" + i).innerHTML.split(' ')[0];
            StockInHandCol = (StockInHandCol == null || StockInHandCol == '') ? 0 : StockInHandCol;

            var ToBeProcuredCol = (document.getElementById("ToBeProcured_" + i)).value;

            TxtItemDetails = TxtItemDetails + "{\"Item_Code\":\"" + ItemCode + "\", \"ItemId\":" + ItemID +
                ", \"ItemName\": \"" + ItemName + "\", \"Percentage\": " + Percentage
                + ", \"BatchSizeCol\": " + BatchSizeCol + ", \"TotalBatchesCol\": " + TotalBatchesCol
                + ",\"YeildCol\": " + YeildCol + ", \"ActualRequirementCol\": " + ActualRequirementCol
                + ", \"StockInHandCol\": " + StockInHandCol + ", \"ToBeProcuredCol\": " + ToBeProcuredCol;

            if (i == (rowCount - 2))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]";
        $('#txtItemDetails').val(TxtItemDetails);
    }

    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
</script>
