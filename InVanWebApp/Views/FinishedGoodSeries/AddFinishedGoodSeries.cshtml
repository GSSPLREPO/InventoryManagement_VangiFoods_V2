@model InVanWebApp_BO.FinishedGoodSeriesBO

@{ ViewBag.Title = "AddFinishedGoodSeries";
    Layout = "~/Views/Shared/MainMaster.cshtml"; }

@using (Html.BeginForm("AddFinishedGoodSeries", "FinishedGoodSeries", FormMethod.Post, new { enctype = "multipart/form-data", id = "formId" }))
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-body">
            <h4>Add Finished Goods Series</h4>
            <hr />
            @Html.ValidationSummary(true)
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Sales Order Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.SalesOrderId, (IEnumerable<SelectListItem>)ViewData["SONumbers"], "---Select---", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedSoNumber($(this).val())" })
                    @Html.HiddenFor(model => model.SONo)
                    @Html.ValidationMessageFor(model => model.SalesOrderId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Work Order No")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WorkOrderNo, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.WorkOrderNo, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationDD"], "---Select---", new { @class = "form-control form-control-sm" })
                    @Html.HiddenFor(model => model.LocationName)
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Product Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    <select id="ProductId" name="ProductId" class="form-control form-control-sm" onchange="SelectedIndexChangedProductName($(this).val())">
                        <option value="">--Select--</option>
                    </select>
                    <span id="valMsgProd" style="display:none;" class="error mt-2 text-danger field-validation-error">Select Product Name!</span>
                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model => model.ProductName)

                    @*@Html.TextBoxFor(model => model.ProductName, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabets(event);" })
                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "error mt-2 text-danger" })*@
                </div>
                <div class="col-md-2">
                    @Html.Label("Manufacture Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.MfgDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd") })
                    @Html.ValidationMessageFor(model => model.MfgDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Package Size")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PackageSize, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.PackageSize, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Quantity (Packets)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.QuantityInKG, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.QuantityInKG, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("No of Carton Box")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.NoOfCartonBox, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.NoOfCartonBox, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Batch No")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    <select id="BatchNo" name="BatchNo" class="form-control form-control-sm">
                        onchange="SelectedBatchNo()
                        <option>--Select--</option>
                    </select>
                    <span id="valMsgBatchNo" style="display:none;" class="error mt-2 text-danger field-validation-error">Select Batch Number!</span>
                    @*@Html.TextBoxFor(model => model.BatchNo, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericSpecial(event);" })*@
                    @Html.ValidationMessageFor(model => model.BatchNo, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Packaging")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Packaging, new List<SelectListItem>{
                        new SelectListItem{ Text="Ok", Value = "Ok" },
                        new SelectListItem{ Text="Not Ok", Value = "Not Ok" }
                        }, "---Select---", new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Packaging, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Sealing")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Sealing, new List<SelectListItem>{
                        new SelectListItem{ Text="Ok", Value = "Ok" },
                        new SelectListItem{ Text="Not Ok", Value = "Not Ok" }
                        }, "---Select---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Sealing, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Labelling")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Labelling, new List<SelectListItem>{
                        new SelectListItem{ Text="Ok", Value = "Ok" },
                        new SelectListItem{ Text="Not Ok", Value = "Not Ok" }
                        }, "---Select---", new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Labelling, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Quality Control Check")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.QCCheck, new List<SelectListItem>{
                        new SelectListItem{ Text="Ok", Value = "Ok" },
                        new SelectListItem{ Text="Not Ok", Value = "Not Ok" }
                        }, "---Select---", new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.QCCheck, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Expected Packets")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ExpectedPackets, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return IsNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.ExpectedPackets, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Actual Packets")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ActualPackets, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return IsNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.ActualPackets, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Expected Yield (%)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ExpectedYield, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return isNumberKeyDecimal(event);", onkeyup = "this.value = minmax(this.value, 0, 100)" })
                    @Html.ValidationMessageFor(model => model.ExpectedYield, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Actual Yield (%)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ActualYield, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return isNumberKeyDecimal(event);", onkeyup = "this.value = minmax(this.value, 0, 100)" })
                    @Html.ValidationMessageFor(model => model.ActualYield, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", maxlength = "100", title = "Maximum length for remakrs are 100 characters" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "FinishedGoodSeries")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@Html.Raw(TempData["Success"])


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<script type="text/javascript">

    $("#btnSave").on("click", function () {

        if ($("#formId").valid()) {
            var LocationName = $("#LocationId option:selected").text();
            $('#LocationName').val(LocationName);
            if ($('#ProductId').val() == 0 || $('#ProductId').val() == '') {
                if ($('#BatchNo').val() == '--Select--' || $('#BatchNo').val() == 0 || $('#BatchNo').val() == '') {
                    //$('#ProductId').focus();
                    $('#valMsgProd').show();
                    //$('#BatchNo').focus();
                    $('#valMsgBatchNo').show();
                }
                else {
                    $('#valMsgBatchNo').hide();
                }
                event.preventDefault();
                return;
            }
            else {
                if ($('#BatchNo').val() == '--Select--' || $('#BatchNo').val() == 0 || $('#BatchNo').val() == '') {
                    $('#BatchNo').focus();
                    $('#valMsgBatchNo').show();
                    $('#valMsgProd').hide();
                    event.preventDefault();
                    return;
                }
                else {
                    $('#valMsgBatchNo').hide();
                }

            }


        }
        else {
            if ($('#ProductId').val() == 0 || $('#ProductId').val() == '') {
                if ($('#BatchNo').val() == '--Select--' || $('#BatchNo').val() == 0 || $('#BatchNo').val() == '') {
                    //$('#ProductId').focus();
                    $('#valMsgProd').show();
                    //$('#BatchNo').focus();
                    $('#valMsgBatchNo').show();
                }
                else {
                    $('#valMsgBatchNo').hide();
                }
                event.preventDefault();
                return;
            }
            else {
                if ($('#BatchNo').val() == '--Select--' || $('#BatchNo').val() == 0 || $('#BatchNo').val() == '') {
                    $('#BatchNo').focus();
                    $('#valMsgBatchNo').show();
                    $('#valMsgProd').hide();
                    event.preventDefault();
                    return;
                }
                else {
                    $('#valMsgBatchNo').hide();
                }
            }
        }

    });

    function SelectedBatchNo() {
        $('#valMsgBatchNo').hide();
    }

    function SelectedIndexChangedProductName(id) {
        var ProductNumber = $("#ProductId option:selected").text();
        $('#ProductName').val(ProductNumber);
        var SOId = $('#SalesOrderId').val();
        $('#valMsgProd').hide();


        $.ajax({
            url: '/FinishedGoodSeries/BatchNumber?SId=' + SOId,
            type: "POST",
            data: {},
            success: function (result) {
                var count = result.length;
                var i = 0;
                $("#BatchNo option").remove();
                $("#BatchNo").append($("<option></option>").val('').html('--Select--'));
                if (count != 0) {
                    while (i < count) {
                        $("#BatchNo").append($("<option></option>").val(result[i].BatchNumber).html(result[i].BatchNumber));
                        i++;
                    }
                }
                else {
                    alert('First create Batch planning of the selected product of the selected SO!');
                    window.location.href = '/BatchPlanning';
                }
            },
            error: function (err) {
                alert('Not able to fetch batch number!');

            }
        });
    }

    //Custom validation for only HorizontalTab,Backspace,Alphabets(A-z,a-z),Space( )
    function IsAlphabets(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only HorizontalTab,Backspace,Numeric(0-9), Alphabets(A-z,a-z),Space( )
    function IsAlphaNumeric(e) {
        debugger
        var unicode = e.charCode ? e.charCode : e.keyCode;
        //Rahul added 'unicode == 46' for 'parts value.split('.')' 29-05-2023 start. 
        if (unicode == 8 || unicode == 9 || unicode == 46 || (unicode >= 48 && unicode <= 57) || unicode == 32 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            var parts = e.srcElement.value.split('.');
            if (parts.length > 1 && unicode == 46)
                return false;
            else
                return true;
        }
        else
            return false;
        //Rahul added 'unicode == 46' for 'parts value.split('.')' 29-05-2023 end. 
    }
    //Custom validation for only HorizontalTab,Backspace,Numeric(0-9), Alphabets(A-z,a-z),Space( ),Underscore(_),Minus(-),Dot(.)
    function IsAlphaNumericSpecial(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32 || unicode == 45 || unicode == 46 || unicode == 95
            || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only HorizontalTab,Backspace, Numeric(0-9)
    function IsNumeric(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only HorizontalTab,Backspace, Numeric(0-9), Single Decimal(.)
    function isNumberKeyDecimal(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

    function SelectedIndexChangedSoNumber(id) {
        $('#valMsgProd').hide();
        $('#valMsgBatchNo').hide();

        $.ajax({
            url: '/BatchPlanning/GetWorkOrderNumber',
            type: "POST",
            data: { id },
            success: function (result) {
                //if (result.IsBatchDone == 1) {
                //    $('#btnSave').prop('disabled', true);
                //    alert('Batch planning of the selected SO is done!');
                //    return;
                //}
                //else {
                //    $('#btnSave').prop('disabled', false);
                //}
                var SalesNo = $('#SalesOrderId option:selected').text();
                $('#SONo').val(SalesNo);

                $('#WorkOrderNo').val(result.WorkOrderNo);
                $('#LocationId').val(result.LocationId);
                $('#LocationName').val(result.LocationName);

                var count = result.salesOrderItemsDetails.length;
                var i = 0;
                $("#ProductId option").remove();
                $("#ProductId").append($("<option></option>").val('0').html('--Select--'));
                while (i < count) {
                    $("#ProductId").append($("<option></option>").val(result.salesOrderItemsDetails[i].Item_ID).html(result.salesOrderItemsDetails[i].ItemName));
                    i++;
                }

            },
            error: function (err) {
                alert('Not able to get the work order number!');
            }
        });

        //var selectedOptionSONumber, soNO;
        //selectedOptionSONumber = document.getElementById("SalesOrderId").selectedIndex;
        //soNO = document.getElementById("SalesOrderId").options[selectedOptionSONumber].innerText;
        //document.getElementById("SONo").value = soNO;
        //$.ajax({
        //    type: "POST",
        //    url: `/FinishedGoodSeries/BindWorkOrderNo?id=` + id,
        //    data: "{}",
        //    contentType: "application/json; charset=utf-8",
        //    dataType: "json",
        //    success: function (result) {
        //        var workOrderNo = result[0].WorkOrderNo;
        //        $("#WorkOrderNo").val(workOrderNo);
        //    }
        //});
    }

    function minmax(value, min, max) {

        //value = Math.round((value + Number.EPSILON) * 100) / 100;
        min = parseFloat(min);
        max = parseFloat(max);
        if (parseFloat(value) < min || isNaN(parseFloat(value)))
            return min;
        else if (parseFloat(value) > max)
            return min;
        else {
            return value;
        }
    }
</script>