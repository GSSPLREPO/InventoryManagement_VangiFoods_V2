@model InVanWebApp_BO.IndentBO
@{ ViewBag.Title = "AddIndent";
    Layout = "~/Views/Shared/MainMaster.cshtml"; }

@using (Html.BeginForm("AddIndent", "Indent", FormMethod.Post))
{
@Html.AntiForgeryToken()

                <div class="card">
                    <div class="card-body">
                        <h4>Add Indent</h4>
                        <hr />
                        @Html.ValidationSummary(true)

                        <div class="row">
                            <div class="col-md-2">
                                @Html.Label("Indent Number")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.IndentNo, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.IndentNo, "", new { @class = "error mt-2 text-danger" })
                            </div>
                            <div class="col-md-2">
                                @Html.Label("Indent Date")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.IndentDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.IndentDate, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-2">
                                @Html.Label("Indent By")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @*/*Rahul added '"---Select---",' 04-08-2023.*/*@
                                @Html.DropDownListFor(model => model.RaisedBy, (IEnumerable<SelectListItem>)ViewData["EmployeeName"], "---Select---", new { @class = "form-control", onchange = "SetUserName()" })
                                @*@Html.DropDownListFor(model => model.RaisedBy, (IEnumerable<SelectListItem>)ViewData["EmployeeName"], new { @class = "form-control", onchange = "SetUserName()" })*@
                                @Html.ValidationMessageFor(model => model.RaisedBy, "", new { @class = "error mt-2 text-danger" })
                            </div>
                            <div class="col-md-4 d-none">
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                            </div>
                            <div class="col-md-2">
                                @Html.Label("Designation")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @*/*Rahul added '"---Select---",' 04-08-2023.*/*@
                                @Html.DropDownListFor(model => model.DesignationId, (IEnumerable<SelectListItem>)ViewData["Designations"], "---Select---", new { @class = "form-control", onchange = "SetDesignationName()" })
                                @*@Html.DropDownListFor(model => model.DesignationId, (IEnumerable<SelectListItem>)ViewData["Designations"], new { @class = "form-control", onchange = "SetDesignationName()" })*@
                                @Html.ValidationMessageFor(model => model.DesignationId, "", new { @class = "error mt-2 text-danger" })
                            </div>
                            <div class="col-md-4 d-none">
                                @Html.TextBoxFor(model => model.DesignationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-2">
                                @Html.Label("Location Name")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @*/*Rahul added '"---Select---",' 04-08-2023.*/*@
                                @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control", onchange = "SetLocationName()" })
                                @*@Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], new { @class = "form-control", onchange = "SetLocationName()" })*@
                                @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                            </div>
                            <div class="col-md-4 d-none">
                                @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                            </div>
                            <div class="col-md-2">
                                @Html.Label("Remarks")
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.Description, new { @class = "form-control form-control-sm", maxlength = "95" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="col-md-12 grid-margin stretch-card">
                            <div class="card">
                                <div class="card-body">
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                                <table class="table table-hover" id="submissionTable">
                                                    <thead>
                                                        <tr>
                                                            <th class="sortStyle">
                                                                Item
                                                            </th>
                                                            <th class="sortStyle d-n d-none">
                                                                Selected Item Code
                                                            </th>
                                                            <th class="sortStyle d-n d-none">
                                                                Item
                                                            </th>
                                                            <th class="sortStyle">
                                                                Indent Quantity
                                                            </th>
                                                            <th class="sortStyle">
                                                                Units
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="myTableBody">
                                                        <tr id="tablerow">
                                                            <td>
                                                                @*/*Rahul added ' "--Select Item--",', 'height:30px; to height:auto;' 04-08-2023.*/*@
                                                                @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control form-control-sm", style = "height:auto;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                                @*@Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], new { @class = "form-control form-control-sm", style = "height:30px;", onchange = "SelectedIndexChangedItemList($(this).val())" })*@
                                                            </td>
                                                            <td class="col-md-4 d-none">
                                                                @Html.TextBoxFor(model => model.ItemCode, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                            </td>
                                                            <td class="d-n d-none">
                                                                @Html.TextBox("ItemName", "", new { @class = "form-control form-control-sm", style = "height:30px;", @readonly = "readonly" })
                                                            </td>
                                                            <td>
                                                                @Html.TextBoxFor(model => model.RequiredQuantity, new { @class = "form-control form-control-sm text-right", style = "height:30px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8" })
                                                            </td>
                                                            <td>
                                                                @Html.TextBox("ItemUnit", "", new { @class = "form-control form-control-sm", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                            </td>
                                                            <td>
                                                                <button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" enable="true" disabled>Delete</button>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <br />
                                                <button type="button" class="btn btn-sm btn-primary shadow" style="background: linear-gradient(85deg, #392c70, #6a005b);" id="AddItem">
                                                    + Add Item
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        @*<input class="form-control text-right" id="TxtItemDetails" name="TxtItemDetails" value="" />*@
                                        @Html.TextBoxFor(model => model.itemDetails, new { style = "display:none" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />


                        <a href="@Url.Action("Index", "Indent")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                </div>}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">
    /*Rahul added 'function create_custom_dropdowns()' 22-05-2023. start*/
    $(document).ready(function () {
        //create_custom_dropdowns_RaisedBy();
        //create_custom_dropdowns_DesignationId();
        //create_custom_dropdowns_LocationId();
        //create_custom_dropdowns_Item_ID("Item_ID");
        SetUserName();
        SetDesignationName();
        SetLocationName();
    });

    (function ($) {
            
        $.fn.searchit = function (options) {

            return this.each(function () {

                $.fn.searchit.globals = $.fn.searchit.globals || {
                    counter: 0
                }
                $.fn.searchit.globals.counter++;
                var $counter = $.fn.searchit.globals.counter;

                var $t = $(this);
                var opts = $.extend({}, $.fn.searchit.defaults, options);

                // Setup default text field and class
                if (opts.textField == null) {
                    $t.before("<input type='textbox' id='__searchit" + $counter +
                        "' placeholder='Search'> <span id = 'faSearch" + $counter + "' style = 'margin:-8%;'> <i class='fas fa-search'></i></span > <br>");
                    opts.textField = $('#__searchit' + $counter);
                }
                if (opts.textField.length > 1) opts.textField = $(opts.textField[0]);

                if (opts.textFieldClass) opts.textField.addClass(opts.textFieldClass);
                //MY CODE-------------------------------------------------------------------
                if (opts.selected) opts.textField.val($(this).find(":selected").val());
                //MY CODE ENDS HERE -------------------------------------------------------
                if (opts.dropDown) {
                    $t.css("padding", "5px")
                        .css("margin", "-5px -20px -5px -5px");

                    $t.wrap("<div id='__searchitWrapper" + $counter + "' />");
                    opts.wrp = $('#__searchitWrapper' + $counter);
                    opts.wrp.css("display", "inline-block")
                        .css("vertical-align", "top")
                        .css("overflow", "hidden")
                        //.css("border", "solid grey 1px")
                        .css("border", "1px solid #e7eaf0")
                        .css("position", "absolute")
                        .hide();
                    if (opts.dropDownClass) opts.wrp.addClass(opts.dropDownClass);
                }

                opts.optionsFiltered = [];
                opts.optionsCache = [];

                // Save listbox current content
                $t.find("option").each(function (index) {
                    opts.optionsCache.push(this);
                });

                // Save options 
                $t.data('opts', opts);

                // Hook listbox click
                $t.click(function (event) {
                    _opts($t).textField.val($(this).find(":selected").text());
                    _opts($t).wrp.hide();
                    event.stopPropagation();
                });

                // Hook html page click to close dropdown
                $("html").click(function () {
                    _opts($t).wrp.hide();
                });

                // Hook the keyboard and we're done 
                //_opts($t).textField.keyup(function (event) {
                _opts($t).textField.mouseenter(function (event) {
                     // Space or Enter
                    if (event.keyCode == 32 || event.keyCode == 13) {
                        $(this).val($t.find(":selected").text());
                        _opts($t).wrp.hide();
                        return;
                    }
                    setTimeout(_findElementsInListBox($t, $(this)), 50);
                })

            })


            function _findElementsInListBox(lb, txt) {

                if (!lb.is(":visible")) {
                    _showlb(lb);
                }

                _opts(lb).optionsFiltered = [];
                var count = _opts(lb).optionsCache.length;
                var dropDown = _opts(lb).dropDown;
                var searchText = txt.val().toLowerCase();

                // find match (just the old classic loop, will make the regexp later)
                $.each(_opts(lb).optionsCache, function (index, value) {
                    if ($(value).text().toLowerCase().indexOf(searchText) > -1) {
                        // save matching items 
                        _opts(lb).optionsFiltered.push(value);
                    }

                    // Trigger a listbox reload at the end of cycle    
                    if (!--count) {
                        _filterListBox(lb);
                    }
                });
            }

            function _opts(lb) {
                return lb.data('opts');
            }

            function _showlb(lb) {
                if (_opts(lb).dropDown) {
                    var tf = _opts(lb).textField;
                    lb.attr("size", _opts(lb).size);
                    _opts(lb).wrp.show().offset({
                        top: tf.offset().top + tf.outerHeight(),
                        left: tf.offset().left
                    });
                    _opts(lb).wrp.css("width", tf.outerWidth() + "px");
                    lb.css("width", (tf.outerWidth() + 25) + "px");
                }
            }

            function _filterListBox(lb) {
                lb.empty();

                if (_opts(lb).optionsFiltered.length == 0) {
                    lb.append("<option>" + _opts(lb).noElementText + "</option>");
                } else {
                    $.each(_opts(lb).optionsFiltered, function (index, value) {
                        lb.append(value);
                    });
                    lb[0].selectedIndex = 0;
                }
            }
        }

        $.fn.searchit.defaults = {
            textField: null,
            textFieldClass: null,
            dropDown: true,
            dropDownClass: null,
            size: 5,
            filtered: true,
            noElementText: "No elements found",
            //MY CODE------------------------------------------
            selected: false
            //MY CODE ENDS ------------------------------------
        }

    }(jQuery))

    $("select").searchit({
        textFieldClass: 'searchbox',
        selected: true
    });

    //function create_custom_dropdowns_RaisedBy() {
    //    $('select#RaisedBy').each(function (i, select) {
            
    //        if (!$(this).next().hasClass('dropdown-select')) {
                
    //                $('#RaisedBy').removeClass('form-control');
    //                $(this).after('<div id="divRaisedBy" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
    //                var dropdown = $(this).next();
    //                var options = $(select).find('option');
    //                var selected = $(this).find('option:selected');
    //                dropdown.find('.current').html(selected.data('display-text') || selected.text());
    //                options.each(function (j, o) {
    //                    var display = $(o).data('display-text') || '';
    //                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
    //                });
    //            }
    //        });
    //    //$('.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValue" autocomplete="off" onkeyup="filter()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    //    $('#divRaisedBy.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValue" autocomplete="off" onkeyup="filter()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    //}
    //function create_custom_dropdowns_DesignationId() {
    //    $('select#DesignationId').each(function (i, select) {
            
    //        if (!$(this).next().hasClass('dropdown-select')) {
                
    //            $('#DesignationId').removeClass('form-control');
    //            $(this).after('<div id="divDesignationId" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
    //            var dropdown = $(this).next();
    //            var options = $(select).find('option');
    //            var selected = $(this).find('option:selected');
    //            dropdown.find('.current').html(selected.data('display-text') || selected.text());
    //            options.each(function (j, o) {
    //                var display = $(o).data('display-text') || '';
    //                dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
    //            });
    //        }
    //    });
    //    $('#divDesignationId.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueDesignationId" autocomplete="off" onkeyup="filterDesignationId()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    //}
    //function create_custom_dropdowns_LocationId() {
    //    $('select#LocationId').each(function (i, select) {
            
    //        if (!$(this).next().hasClass('dropdown-select')) {
                
    //            $('#LocationId').removeClass('form-control');
    //            $(this).after('<div id="divLocationId" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
    //            var dropdown = $(this).next();
    //            var options = $(select).find('option');
    //            var selected = $(this).find('option:selected');
    //            dropdown.find('.current').html(selected.data('display-text') || selected.text());
    //            options.each(function (j, o) {
    //                var display = $(o).data('display-text') || '';
    //                dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
    //            });
    //        }
    //    });
    //    $('#divLocationId.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueLocationId" autocomplete="off" onkeyup="filterLocationId()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    //}
    //function create_custom_dropdowns_Item_ID(id) {        
    //    $('select#' + id).each(function (i, select) {            
    //        if (!$(this).next().hasClass('dropdown-select')) {                
    //            $('#' + id).removeClass('form-control');
    //            $('#' + id).removeClass('form-control-sm');
    //            $(this).after('<div id="div'+id+'" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
    //            var dropdown = $(this).next();
    //            var options = $(select).find('option');
    //            var selected = $(this).find('option:selected');
    //            dropdown.find('.current').html(selected.data('display-text') || selected.text());
    //            options.each(function (j, o) {
    //                var display = $(o).data('display-text') || '';
    //                dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
    //            });
    //        }
    //    });
    //    $('#div' + id + '.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValue' + id +'" autocomplete="off" onkeyup="filterItem_ID(id)" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    //}

    //// Event listeners

    //// Open/close
    //$(document).on('click', '.dropdown-select', function (event) {
    //    if ($(event.target).hasClass('dd-searchbox')) {
    //        return;
    //    }
    //    $('.dropdown-select').not($(this)).removeClass('open');
    //    $(this).toggleClass('open');
    //    if ($(this).hasClass('open')) {
    //        $(this).find('.option').attr('tabindex', 0);
    //        $(this).find('.selected').focus();
    //    } else {
    //        $(this).find('.option').removeAttr('tabindex');
    //        $(this).focus();
    //    }
    //});

    //// Close when clicking outside
    //$(document).on('click', function (event) {
    //    if ($(event.target).closest('.dropdown-select').length === 0) {
    //        $('.dropdown-select').removeClass('open');
    //        $('.dropdown-select .option').removeAttr('tabindex');
    //    }
    //    event.stopPropagation();
    //});
    //// Search
    //function filter() {        
    //    var valThis = $('#txtSearchValue').val();
    //    $('.dropdown-select ul > li').each(function () {
    //        var text = $(this).text();
    //        (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
    //    });
    //};
    //function filterDesignationId() {        
    //    var valThis = $('#txtSearchValueDesignationId').val();
    //    $('.dropdown-select ul > li').each(function () {
    //        var text = $(this).text();
    //        (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
    //    });
    //};
    //function filterLocationId() {        
    //    var valThis = $('#txtSearchValueLocationId').val();
    //    $('.dropdown-select ul > li').each(function () {
    //        var text = $(this).text();
    //        (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
    //    });
    //};
    //function filterItem_ID(id) {
    //    //debugger
    //    var valThis = $('#' + id +'').val();
    //    $('.dropdown-select ul > li').each(function () {
    //        var text = $(this).text();
    //        (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
    //    });
    //};

    //// Option click
    //$(document).on('click', '.dropdown-select .option', function (event) {
    //    $(this).closest('.list').find('.selected').removeClass('selected');
    //    $(this).addClass('selected');
    //    var text = $(this).data('display-text') || $(this).text();
    //    $(this).closest('.dropdown-select').find('.current').text(text);
    //    $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
    //});

    //// Keyboard events
    //$(document).on('keydown', '.dropdown-select', function (event) {
    //    var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
    //    // Space or Enter
    //    //if (event.keyCode == 32 || event.keyCode == 13) {
    //    if (event.keyCode == 13) {
    //        if ($(this).hasClass('open')) {
    //            focused_option.trigger('click');
    //        } else {
    //            $(this).trigger('click');
    //        }
    //        return false;
    //        // Down
    //    } else if (event.keyCode == 40) {
    //        if (!$(this).hasClass('open')) {
    //            $(this).trigger('click');
    //        } else {
    //            focused_option.next().focus();
    //        }
    //        return false;
    //        // Up
    //    } else if (event.keyCode == 38) {
    //        if (!$(this).hasClass('open')) {
    //            $(this).trigger('click');
    //        } else {
    //            var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
    //            focused_option.prev().focus();
    //        }
    //        return false;
    //        // Esc
    //    } else if (event.keyCode == 27) {
    //        if ($(this).hasClass('open')) {
    //            $(this).trigger('click');
    //        }
    //        return false;
    //    }
    //});
    /*Rahul added 'function create_custom_dropdowns()' 22-05-2023. end*/
    function SetUserName() {
       // debugger
        var selectedOptionTerms = document.getElementById("RaisedBy").selectedIndex;
        var tempUserName = document.getElementById("RaisedBy").options[selectedOptionTerms].innerText;
        document.getElementById("UserName").value = tempUserName;        
    }

    function SetDesignationName() {
        var selectedOptionTerms = document.getElementById("DesignationId").selectedIndex;
        var tempDesignation = document.getElementById("DesignationId").options[selectedOptionTerms].innerText;
        document.getElementById("DesignationName").value = tempDesignation;
    }

    function SetLocationName() {
        var selectedOptionTerms = document.getElementById("LocationId").selectedIndex;
        var tempLocation = document.getElementById("LocationId").options[selectedOptionTerms].innerText;
        document.getElementById("LocationName").value = tempLocation;
    }

    var TxtItemDetails = "";

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {   debugger
        var tableLength = document.getElementById('submissionTable').rows.length;
        var flag = 0, i = 1;

        var RequiredQuantity = $('#RequiredQuantity').val();
        RequiredQuantity = (RequiredQuantity == '' || RequiredQuantity == null) ? 0 : parseFloat(RequiredQuantity);

        var IndentBy = $('#RaisedBy').val();
        if (IndentBy == '' || IndentBy == null) {
            $('#RaisedBy').focus();
            flag = 1;
        }
        if (RequiredQuantity != 0) {
            flag = 1;
        }

        if (tableLength > 1) {
            /*//while (i <= tableLength - 2) { // Rahul commented 17-06-23*/
            while (i <= tableLength - 1) {
                var PhyQty = document.getElementById("requiredQuantity_" + i);  // Rahul added 'PhyQty', 'if (PhyQty == null || PhyQty == '') else' 17-06-23
                if (PhyQty == null || PhyQty == '') {
                    i++;
                }
                else {
                    var PhyQty = document.getElementById("requiredQuantity_" + i).value;
                    PhyQty = (PhyQty == null || PhyQty == '') ? 0 : PhyQty;
                    PhyQty = parseFloat(PhyQty);

                    if (PhyQty == 0) {
                        alert("Required quantity is zero or null! Cannot create indent!");
                        $('#btnSave').prop('disabled', true);
                        event.preventDefault();
                        return;
                    }
                    else {
                        flag = 1;
                    }

                    //if (PhyQty != 0) {
                    //    flag = 1;
                    //}
                    i++;
                }
            }
            if (flag != 1) {
                alert("Required quantity is zero or null! Cannot create indent!");
                $('#btnSave').prop('disabled', true);
                return;
            }
            else
                $('#btnSave').prop('disabled', false);
        }
        createJson();
    };

    function createJson() {
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        var TxtItemDetails = JSON.stringify(res);
        console.log(TxtItemDetails);
        $('#itemDetails').val(TxtItemDetails);
    }
    //==========end===============

    $("#Item_ID").change(function () {
       // debugger
        $('#btnSave').prop('disabled', false);
        getitemDetails();
    });

    function getitemDetails() {
                    $("#f").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails","PurchaseOrder")', // we are calling json method

                dataType: 'json',

                data: { id: $("#Item_ID").val(), currencyId: '0' },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                success: function (itemDescription) {

                    var description = JSON.stringify(itemDescription);
                    $("#ItemName").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#RequiredQuantity").val('0');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


    }

    function getitemDetailsJSTbl(count) {
        var itemId = "ItemID_" + count;
        var selectedItemId = $("#" + itemId).val();
                    $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails","PurchaseOrder")', // we are calling json method

                dataType: 'json',
                data: { id: selectedItemId, currencyId: '0' },
                //Rahul 'currencyId' added from controller
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                        success: function (itemDescription) {
                            var description = JSON.stringify(itemDescription);

                            $("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#requiredQuantity_" + count).val('0');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


       // $("#itemDescription" + count).val(count.Item_Name);

    }

    function SelectedIndexChangedItemList(id) {

        $('#btnSave').prop('disabled', false);
        getitemDetails();

        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        itemCode = itemCode.split(' (')[0];
        document.getElementById("ItemCode").value = itemCode;
    }

    var counter = 1;

    $("#AddItem").click(function () {        
        var itemId = "ItemID_" + counter;
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var itemQuantity = "requiredQuantity_" + counter;
        var itemUnit = "itemUnit_" + counter;        
        $('<tr id="tablerow' + counter + '">' + '<td>' +
            //'<select id="ItemID" class="form-control" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" required="required" /></select>' +
            //'<input type="text" id="ItemID" class="form-control" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" value="" required="required" />' +
            //'<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:30px;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +
            '<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:auto;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +
            '</td>' +
            '<td class="d-none">' +
            '<input type="text" id="' + itemCode + '" class="form-control form-control-sm" style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
            '</td>' +
            '<td class="d-n d-none">' +
            '<input type="text" id="' + itemDescription + '" class="form-control form-control-sm" style = "height:30px;" name="' + itemDescription + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;" name="' + itemQuantity + '" value="0" required="required" maxlength="8" onkeypress="return isNumberKey(event)"/>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control form-control-sm" style = "height:30px;width:100px;" name="' + itemUnit + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');        
        //create_custom_dropdowns_Item_ID(itemId);
        counter++;
        return false;        
    });

    function removeTr(index) {
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        if (counter > 1 & length == index) {
            $('#tablerow' + index).remove();
            counter--;
        }
        else {
            $('#tablerow' + index).remove();
        }
        //CalculateTotalBeforeTax();
        return false;
    }

    function isNumberKey(evt) {
        $('#btnSave').prop('disabled', false);
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

</script>

<style>
    .searchbox {
        /*border: 1px solid #456879;*/
        border: 1px solid #e7eaf0;
        border-radius: 6px;
        /*height: 22px;*/
        height: 38px;
        /*width: 200px;*/
        width: -webkit-fill-available;
        margin-top: 5px;
        padding-left: 1rem !important;
    }
</style> 

    @*<style>
    /*Rahul added 'style' for 'create_custom_dropdowns()' 22-05-2023. start*/
    select {
        display: none !important;
    }

    .dropdown-select {
        background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0) 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#40FFFFFF', endColorstr='#00FFFFFF', GradientType=0);
        background-color: #fff;
        border-radius: 6px;
        border: solid 1px #eee;
        box-shadow: 0px 2px 5px 0px rgba(155, 155, 155, 0.5);
        box-sizing: border-box;
        cursor: pointer;
        display: block;
        float: left;
        font-size: 14px;
        font-weight: normal;
        height: 42px;
        line-height: 40px;
        outline: none;
        padding-left: 18px;
        padding-right: 30px;
        position: relative;
        text-align: left !important;
        transition: all 0.2s ease-in-out;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        white-space: nowrap;
        width: auto;
    }

        .dropdown-select:focus {
            background-color: #fff;
        }

        .dropdown-select:hover {
            background-color: #fff;
        }

        .dropdown-select:active,
        .dropdown-select.open {
            background-color: #fff !important;
            border-color: #bbb;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05) inset;
        }

        .dropdown-select:after {
            height: 0;
            width: 0;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid #777;
            -webkit-transform: origin(50% 20%);
            transform: origin(50% 20%);
            transition: all 0.125s ease-in-out;
            content: '';
            display: block;
            margin-top: -2px;
            pointer-events: none;
            position: absolute;
            right: 10px;
            top: 50%;
        }

        .dropdown-select.open:after {
            -webkit-transform: rotate(-180deg);
            transform: rotate(-180deg);
        }

        .dropdown-select.open .list {
            -webkit-transform: scale(1);
            transform: scale(1);
            opacity: 1;
            pointer-events: auto;
        }

        .dropdown-select.open .option {
            cursor: pointer;
        }

        .dropdown-select.wide {
            width: 100%;
        }

            .dropdown-select.wide .list {
                left: 0 !important;
                right: 0 !important;
            }

        .dropdown-select .list {
            box-sizing: border-box;
            transition: all 0.15s cubic-bezier(0.25, 0, 0.25, 1.75), opacity 0.1s linear;
            -webkit-transform: scale(0.75);
            transform: scale(0.75);
            -webkit-transform-origin: 50% 0;
            transform-origin: 50% 0;
            box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.09);
            background-color: #fff;
            border-radius: 6px;
            margin-top: 4px;
            padding: 3px 0;
            opacity: 0;
            overflow: hidden;
            pointer-events: none;
            position: absolute;
            top: 100%;
            left: 0;
            z-index: 999;
            max-height: 250px;
            overflow: auto;
            border: 1px solid #ddd;
        }

            .dropdown-select .list:hover .option:not(:hover) {
                background-color: transparent !important;
            }

        .dropdown-select .dd-search {
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            /*margin: 0.5rem;*/
        }

        .dropdown-select .dd-searchbox {
            width: 90%;
            /*padding: 0.5rem;*/
            border: 1px solid #999;
            border-color: #999;
            border-radius: 4px;
            outline: none;
        }

            .dropdown-select .dd-searchbox:focus {
                border-color: #12CBC4;
            }

        .dropdown-select .list ul {
            padding: 0;
        }

        .dropdown-select .option {
            cursor: default;
            font-weight: 400;
            /*line-height: 40px;*/
            line-height: 24px;
            outline: none;
            padding-left: 18px;
            padding-right: 29px;
            text-align: left;
            transition: all 0.2s;
            list-style: none;
        }

            .dropdown-select .option:hover,
            .dropdown-select .option:focus {
                background-color: #f6f6f6 !important;
            }

            .dropdown-select .option.selected {
                font-weight: 600;
                color: #12cbc4;
            }

                .dropdown-select .option.selected:focus {
                    background: #f6f6f6;
                }

        .dropdown-select a {
            color: #aaa;
            text-decoration: none;
            transition: all 0.2s ease-in-out;
        }

            .dropdown-select a:hover {
                color: #666;
            }

    span#faSearch {
        position: absolute;
        margin-left: 400px;
    }
    /*Rahul added 'style' for 'create_custom_dropdowns()' 22-05-2023. end*/
</style>*@