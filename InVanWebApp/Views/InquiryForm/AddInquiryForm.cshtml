@model InVanWebApp_BO.InquiryFormBO

@{
    ViewBag.Title = "AddInquiryForm";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddInquiryForm", "InquiryForm", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Inquiry Form</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Inquiry Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InquiryNumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.InquiryNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.InquiryNumber, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Inquiry Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @*Rahul added @max for DateOfInquiry 10-02-2023.*@
                    @Html.TextBoxFor(model => model.DateOfInquiry, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                    @Html.ValidationMessageFor(model => model.DateOfInquiry, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.CurrencyID, (IEnumerable<SelectListItem>)ViewData["CurrencyName"], "---Select---", new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-1 d-none">
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Inquiry Status")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("InquiryStatusID", new List<SelectListItem>{
                            new SelectListItem{ Text="Open", Value = "0" },
                            //new SelectListItem{ Text="Close", Value = "1" },
                            }, new { @class = "form-control form-control-sm" })
                    @*@Html.DropDownListFor(model => model.InquiryStatusID, (IEnumerable<SelectListItem>)ViewData["CurrencyName"], "---Select---", new { @class = "form-control form-control-sm" })*@
                    @*@Html.ValidationMessageFor(model => model.InquiryStatusID, "", new { @class = "error mt-2 text-danger" })*@
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Contact Person Name")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ContactPersonName, new { @class = "form-control form-control-sm", type = "text", placeholder = "Contact Person Name" })
                    @Html.ValidationMessageFor(model => model.ContactPersonName, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Email ID")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ClientEmail, new { @class = "form-control form-control-sm", type = "text", placeholder = "Client Email Id" })
                    @Html.ValidationMessageFor(model => model.ClientEmail, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Contact Number")
                    @*<span style="color:red">*</span>*@
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ContactNo, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Client Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.VendorsID, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.VendorsID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
            </div>


            <div class="row">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Supplier Address
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control form-control-sm", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger", id = "valMsgDeliveryAdd" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Customer Address
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.SupplierAddress, new { id = "SupplierAddress", @class = "form-control form-control-sm", placeholder = "Customer address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "error mt-2 text-danger", id = "valMsgSupplierAdd" })

                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="col-md-12 stretch-card flex-wrap">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">
                                                    Item
                                                </th>
                                                <th class="sortStyle d-n d-none">
                                                    Selected Item Code
                                                </th>
                                                <th class="sortStyle d-n d-none">
                                                    Item
                                                </th>
                                                <th class="sortStyle">
                                                    Quantity
                                                </th>
                                                <th class="sortStyle">
                                                    Units
                                                </th>
                                                <th class="sortStyle">
                                                    Price (Per Unit)
                                                </th>
                                                <th class="sortStyle">
                                                    Quoted Price (Per Unit)
                                                </th>
                                                <th class="sortStyle">
                                                    Expected Price (Per Unit)
                                                </th>
                                                <th class="sortStyle">
                                                    Closer Price (Per Unit)
                                                </th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">
                                                    Tax
                                                </th>
                                                <th class="sortStyle">
                                                    Total before tax
                                                </th>
                                                <th class="sortStyle">
                                                    Delivery Date
                                                </th>
                                                <th class="sortStyle">
                                                    HSN Code
                                                </th>
                                                <th class="sortStyle">
                                                    Remarks
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            <tr id="tablerow">
                                                <td>
                                                    @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control form-control-sm", style = "height:34px;width:auto;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                </td>
                                                <td class="col-md-4 d-none">
                                                    @Html.TextBoxFor(model => model.ItemCode, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                </td>
                                                <td class="d-n d-none">
                                                    @Html.TextBox("ItemName", "", new { @class = "form-control form-control-sm", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.ItemQuantity, new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnit", "", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnitPrice", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("QuotedPrice", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.ExpectedPrice, new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("CloserPrice", "", new { Value = "0", @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("CurrencyName", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemTaxValue", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:80px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.TotalItemCost, "", new { @class = "form-control form-control-sm text-right", value = "0", id = "ItemTotalPrice", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                </td>
                                                @*<td>
                                                        @Html.TextBoxFor(model => model.CloserPrice, "", new { @class = "form-control form-control-sm text-right", id = "ItemTotalPrice", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                    </td>*@
                                                <td>
                                                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "DeliveryDate", @class = "form-control form-control-sm date1", type = "date" })
                                                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.HSN_Code, new { @class = "form-control form-control-sm", Value = "", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.Remarks, "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:200px;", onkeypress = "createJson();" })
                                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" enable="true" disabled>Delete</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>

                                    <button type="button" class="btn btn-sm btn-primary shadow mt-2" style="background: linear-gradient(85deg, #392c70, #6a005b);" id="AddItem">
                                        + Add Item
                                    </button>

                                    @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>


            <div class="col-md-12 grid-margin stretch-card flex-wrap">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    @*keep for ui*@
                </div>

                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card">
                        <div class="card-body">
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax"><b>Total (before tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalBeforeTax" name="TotalItemCost" value="0" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total tax: </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalTax" name="TotalTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total (after tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalAfterTax" name="TotalAfterTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total: </b></label>
                                    <input class="form-control text-right form-control-sm" id="GrandTotal" name="GrandTotal" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Advanced To Pay: </b></label>
                                    <input class="form-control text-right form-control-sm" id="AdvancedPayment" maxlength="8" name="AdvancedPayment" value="0" onkeypress="return isNumberKey(event)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="row mb-2">
                <div class="col-md-2 mb-1">
                    @*keep for ui*@
                </div>
                <div class="col-md-4">
                    @*keep for ui*@
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>


            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col"><button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button></div>

                    <div class="col">
                        <a href="@Url.Action("Index", "InquiryForm")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>

            </div>

        </div>
    </div>


}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">

    var TxtItemDetails = "";

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        var tableLength = document.getElementById('submissionTable').rows.length;
        var flag = 0, i = 1;
        var ItemQuantity = $('#ItemQuantity').val();
        ItemQuantity = (ItemQuantity == '' || ItemQuantity == null) ? 0 : parseFloat(ItemQuantity);

        if (ItemQuantity == 0) {
            flag = 0;
        }
        else {
            flag = 1;
        }

        if (tableLength > 1) {
            while (i <= tableLength - 2) {
                ItemQuantity = document.getElementById("itemQuantity_" + i).value;
                ItemQuantity = (ItemQuantity == '' || ItemQuantity == null) ? 0 : ItemQuantity;
                ItemQuantity = parseFloat(ItemQuantity);

                if (ItemQuantity == 0) {
                    alert("Ordering quantity cannot be zero/null! Cannot generate inquiry!");
                    $('#btnSave').prop('disabled', true);
                    event.preventDefault();
                    return;
                }
                else {
                    flag = 1;
                }
                i++;

            }
            if (flag != 1) {
                alert("Ordering quantity cannot be zero/null! Cannot generate inquiry!");
                $('#btnSave').prop('disabled', true);
                event.preventDefault();
                return;
            }
            else
                $('#btnSave').prop('disabled', false);
        }

        createJson();
    };
    //==========end===============

    //===========OnChange of item if currency is not selected================
    $("#Item_ID").change(function () {
        var CurrencyIDCheck = $('#CurrencyID').val();
        console.log(CurrencyIDCheck);
        if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
            alert("Select Currency!");
            $('#CurrencyID').focus();
            document.getElementById('Item_ID').selectedIndex = 0;
            return;
        }
        else { getitemDetails(); }

    });
    //==================end======================

    //Dropdownlist Selectedchange event
    function getitemDetails() {
                    $("#f").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',

                data: { id: $("#Item_ID").val(), currencyId: $("#CurrencyID").val() },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                success: function (itemDescription) {
                    //console.log("itemDescription: " + itemDescription);
                    var description = JSON.stringify(itemDescription);
                    $("#ItemName").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#ItemUnitPrice").val(itemDescription.UnitPrice);
                    $("#QuotedPrice").val(itemDescription.UnitPrice);
                    $("#ExpectedPrice").val('0');
                    $("#CloserPrice").val('0');
                    $("#CurrencyName").val(itemDescription.IndianCurrencyValue);
                    $("#ItemTaxValue").val(itemDescription.ItemTaxValue);
                    $("#ItemQuantity").val('0');
                    $("#ItemTotalPrice").val('0');

                    $("#TotalBeforeTax").val('0');
                    $("#TotalTax").val('');
                    $("#TotalAfterTax").val('');
                    $("#GrandTotal").val('');
                    $("#AdvancedPAyment").val('');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


    }

    function getitemDetailsJSTbl(count) {
        console.log(count);
        var itemId = "ItemID_" + count;
        var currencyID = $('#CurrencyID').val();
        var selectedItemId = $("#" + itemId).val();
        var delDate_Id = 'deliveryDate_' + count;
        deliveryDate(delDate_Id);

                    $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',
                data: { id: selectedItemId, currencyId: currencyID },
                //Rahul 'currencyId' added from controller
                        success: function (itemDescription) {
                            var description = JSON.stringify(itemDescription);
                            console.log(description);

                            $("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#itemPrice_" + count).val(itemDescription.UnitPrice);
                            $("#quotedPrice_" + count).val(itemDescription.UnitPrice);
                            $("#expectedPrice_" + count).val('0');
                            $("#closerPrice_" + count).val('0');
                            $("#currencyName_" + count).val(itemDescription.IndianCurrencyValue); //Rahul added 03/12/2022.
                            $("#itemTax_" + count).val(itemDescription.ItemTaxValue);
                            $("#itemQuantity_" + count).val('0');
                            $("#totalItemCost_" + count).val('0');

                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });
    }

    var counter = 1;

    function deliveryDate(id) {
        const d = new Date();
        d.setYear(d.getFullYear());
        //var id = "deliveryDate_";
        var tempDate = d.toISOString().split("T")[0];
        $("#" + id).val(tempDate);
        document.getElementById(id).setAttribute("min", tempDate.toString());
    }

    $("#AddItem").click(function () {
        var itemId = "ItemID_" + counter;
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var itemQuantity = "itemQuantity_" + counter;
        var itemUnit = "itemUnit_" + counter;
        var itemPrice = "itemPrice_" + counter;
        var quotedPrice = "quotedPrice_" + counter;
        var expectedPrice = "expectedPrice_" + counter;
        var closerPrice = "closerPrice_" + counter;
        var currencyName = "currencyName_" + counter;
        var itemTax = "itemTax_" + counter;
        var totalItemCost = "totalItemCost_" + counter;
        var deliveryDate = "deliveryDate_" + counter;
        var hsnCode = "hsnCode_" + counter;
        var remarks = "remarks_" + counter;
        $('<tr id="tablerow' + counter + '">' + '<td>' +
            '<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:30px;width:auto;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +
            '</td>' +
            '<td class="d-none">' +
            '<input type="text" id="' + itemCode + '" class="form-control form-control-sm" style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
            '</td>' +
            '<td class="d-n d-none">' +
            '<input type="text" id="' + itemDescription + '" class="form-control form-control-sm" style = "height:30px;width:200px;" name="' + itemDescription + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /*'<input type="text" id="' + itemQuantity + '" onkeyup="calcTax(' + counter + ',' + this.value + ')"; class="form-control" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +*/
            '<input type="text" id="' + itemQuantity + '" onchange="CalItemTotalPrice($(this).val(),id)"; class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0" required="required" onkeypress = "return isNumberKey(event)"  MaxLength = "8"  />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control form-control-sm" style = "height:30px;auto;" name="' + itemUnit + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemPrice + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + itemPrice + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /// Rahul added 03/01/2023.
            '<input type="text" id="' + quotedPrice + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + quotedPrice + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + expectedPrice + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + expectedPrice + '" value="" required="required" onkeypress = "return isNumberKey(event)" MaxLength = "8" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + closerPrice + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + closerPrice + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + currencyName + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + currencyName + '"readonly = "readonly" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemTax + '" class="form-control form-control-sm text-right" style = "height:30px;width:80px;" name="' + itemTax + ' "readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + totalItemCost + '" class="form-control form-control-sm text-right" style = "height:30px;width:200px;" name="' + totalItemCost + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="date" id="' + deliveryDate + '" class="form-control form-control-sm date1" style = "height:30px;width:100%;" name="' + deliveryDate + '" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + hsnCode + '" class="form-control form-control-sm " style = "height:30px;width:200px;" name="' + hsnCode + '"  />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + remarks + '" onchange="createJson()"; class="form-control form-control-sm  text-right" style = "height:30px;width:200px;" name="' + remarks + '"  />' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');

        counter++;
        return false;
    });

    function CalItemTotalPrice(value, id) {
        $('#btnSave').prop('disabled', false);

        var temp_rowNo = id.split('_');
        var rowNo = temp_rowNo[1];
        if (value == '')
            value = 0;

        value = parseFloat(value);
        if (value != 0) {
            var price = $("#itemPrice_" + rowNo).val();
            price = parseFloat(price);
            var totalPrice = price * value;
            totalPrice = Math.round(totalPrice);
            $("#totalItemCost_" + rowNo).val(totalPrice);
        }
        else
            $("#totalItemCost_" + rowNo).val(0);

        CalculateTotalBeforeTax();
    }

    function CalculateTotalBeforeTax() {
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 2;

        //var ItemTotalPrice = $("#ItemTotalPrice").val(totalPrice);

        var total = parseFloat(ItemTotalPrice.value);
        total = Math.round(total);
        var totalTax = (parseFloat(ItemTaxValue.value) / 100) * total;
        totalTax = Math.round(totalTax);

        var i = 1;
        while (i <= length) {
            //This if -else condition is written for: If user delete any other row of the dynamic table.

            if ($('#tablerow' + i).length) {
                var temp = document.getElementById("totalItemCost_" + i).value;
                var tempTotalTax = document.getElementById("itemTax_" + i).value;
                total = parseFloat(temp) + total;

                tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
                totalTax = parseFloat(tempTotalTax) + totalTax;
                i++;
            }
            else {
                i++;
                length++;
            }
        }
        $('#TotalBeforeTax').val(total);
        $('#TotalTax').val(totalTax.toFixed(2));
        var tempGrandTotal = total + totalTax;
        $('#TotalAfterTax').val(tempGrandTotal.toFixed(2));
        $('#GrandTotal').val(tempGrandTotal.toFixed(2));

        createJson();
    }

    function createJson() {
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        //console.log(res);
        var TxtItemDetails = JSON.stringify(res);
        $('#TxtItemDetails').val(TxtItemDetails);
    }

    $("#ItemQuantity").change(function () {

        $('#btnSave').prop('disabled', false);

        var quantity = $("#ItemQuantity").val();
        var price = $("#ItemUnitPrice").val();
        var tempTax = $("#ItemTaxValue").val().split("%")
        var tax = tempTax[0];

        //Set total price in item grid.
        var totalPrice = quantity * price;
        totalPrice = Math.round(totalPrice);
        $("#ItemTotalPrice").val(totalPrice);

        ////Set values in Bill
        //var totalPriceAfterTax = (totalPrice) + ((totalPrice * tax) / 100);
        //$("#TotalBeforeTax").val(totalPrice);

        //var itemTaxVal = tax / 100 * totalPrice;
        //itemTaxVal = Math.round(itemTaxVal);
        //totalPriceAfterTax = Math.round(totalPriceAfterTax);

        //$("#TotalTax").val(itemTaxVal);
        //$("#TotalAfterTax").val(totalPriceAfterTax);
        //$("#GrandTotal").val(totalPriceAfterTax);
        CalculateTotalBeforeTax();
    });

    function SelectedIndexChangedLocation(id) {
        $('#valMsgDeliveryAdd').hide();

        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;
        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }

    function SelectedIndexChanged(id) {
        $('#valMsgSupplierAdd').hide();

        var selectedOption, companyName;
        selectedOption = document.getElementById("VendorsID").selectedIndex;
        companyName = document.getElementById("VendorsID").options[selectedOption].innerText;
        document.getElementById("CompanyName").value = companyName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindCompanyAddress?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);
                var suplierAdd = result[0].SupplierAddress;
                $("#SupplierAddress").val(suplierAdd);
            }
        });
    }

    function SelectedIndexChangedItemList(id) {
        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        itemCode = itemCode.split(' (')[0];
        document.getElementById("ItemCode").value = itemCode;
    }

    /*Rahul : Add Javascript validation on 12 Oct 2022.*/
    function isNumberKey(evt) {
        $('#btnSave').prop('disabled', false);
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

    function removeTr(index) {
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        //console.log("Length: " + length + counter);
        if (counter > 1 & length == index) {
            $('#tablerow' + index).remove();
            counter--;
        }
        else {
            $('#tablerow' + index).remove();
        }
        CalculateTotalBeforeTax();
        return false;
    }


</script>

