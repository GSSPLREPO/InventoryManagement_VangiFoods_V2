@model InVanWebApp_BO.InwardNoteBO
@{
    ViewBag.Title = "AddInwardNote";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddInwardNote", "InwardNote", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Inward Note</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Inward Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InwardNumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.InwardNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Inward Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InwardDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date" })
                    @Html.ValidationMessageFor(model => model.InwardDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("PO_Id", (IEnumerable<SelectListItem>)ViewData["PONumberAndId"], "--Select--",
                   new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                @*<div class="col-md-2">
                        @Html.Label("PO Date")
                        <span style="color:red">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PODate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date" })
                        @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "error mt-2 text-danger" })
                    </div>*@
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Shipping Details")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.ShippingDetails, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.ShippingDetails, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Supplier Details")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.SupplierDetails, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.SupplierDetails, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item details")
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-striped" id="ItemTable">
                        <tr>
                            <th>Item</th>
                            <th>Code</th>
                            <th>Quantity</th>
                            <th>Tax</th>
                            <th>Unit Price</th>
                            @*<th>Inward Quantity</th>*@
                        </tr>
                    </table>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Signature")
                </div>
                <div class="col-md-4">
                    <input type="file" name="Signature" id="fileupload" class="file-drop-zone" onchange="return fileValidation()">
                    <span id="sfileupload" class="text-danger"></span>
                    @*@Html.TextBoxFor(model => model.Signature, new { @class = "form-control form-control-sm" })
                        @Html.ValidationMessageFor(model => model.Signature, "", new { @class = "error mt-2 text-danger" })*@
                </div>
                <div class="col-md-2">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <a href="@Url.Action("Index", "InwardNote")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right;">Save</button>
        </div>
    </div>
}

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">


    function SelectedIndexChanged(id) {

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        console.log(rowCount)
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        $.ajax({
            type: "POST",
            url: `/InwardNote/BindPODetails?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                console.log(result);
                //$('#PODate').val(result[0].PODate);
                $('#ShippingDetails').val(result[0].BuyerAddress);
                $('#SupplierDetails').val(result[0].SupplierAddress);
                var ColCount = result.length

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            cell.innerHTML = result[j].ItemName;
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_Code;
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemQuantity + " " + result[j].ItemUnit;
                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemTaxValue + " %";
                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].ItemUnitPrice + " Rs";
                        }
                        //else if (i == 5) {
                        //    var trow = '<input type="text"  name="TextBox'+i+'" value="TextBox'+i+'" >';
                        //    cell.append(trow);
                        //}
                    }

                }
            }
        });
    }

    function fileValidation() {
        var fileInput =
            document.getElementById('fileupload');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:50%;width:50%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }

</script>
@Html.Raw(TempData["Success"])