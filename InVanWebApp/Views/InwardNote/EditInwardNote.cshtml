@model InVanWebApp_BO.InwardNoteBO
@{
    ViewBag.Title = "EditInwardNote";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("EditInwardNote", "InwardNote", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Edit Inward Note</h4>
            <hr />
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.ID)
            @Html.TextBoxFor(model => model.ID, new { style = "display:none;" })

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Inward Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InwardNumber, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.InwardNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Inward Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InwardDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date" })
                    @Html.ValidationMessageFor(model => model.InwardDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("PO_Id", (IEnumerable<SelectListItem>)ViewData["PONumberAndId"], "--Select--",
                   new { @class = "form-control", onchange = "SelectedIndexChanged()", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Shipping Details")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.ShippingDetails, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.ShippingDetails, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Supplier Details")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.SupplierDetails, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.SupplierDetails, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item details")
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-striped" id="ItemTable">
                        <tr>
                            <th>Item</th>
                            <th>Code</th>
                            <th>Quantity</th>
                            <th>Tax</th>
                            <th>Unit Price</th>
                            <th>Inward Quantity (Kg)</th>
                        </tr>
                    </table>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Signature")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Signature, new { @class = "file-drop-zone", type = "file", onchange = "return fileValidation()", value = ViewData["Signature"] })
                    <span id="sfileupload" class="text-danger"></span>
                </div>
                <div class="col-md-2">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <a href="@Url.Action("Index", "InwardNote")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right;" onclick="SetInwardQty()">Save</button>
        </div>
    </div>
    @Html.TextBoxFor(model => model.InwardQuantities, new { style = "display:none" })
}

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">
    var InwardQuantities = "";

    $(document).ready(function () {
        BindItemDetails();
    });

    function BindItemDetails() {
        var id = $('#PO_Id').val();
        var InwardId = $('#ID').val();
        //For deleting the rows of Item table if exist.

        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        //console.log(rowCount)
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        //Clearing the address textarea
        $('#ShippingDetails').val(' ');
        $('#SupplierDetails').val(' ');

        $.ajax({
            type: "POST",
            url: `/InwardNote/BindPODetails?id=` + id + "&InwId=" + InwardId,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);
                //$('#PODate').val(result[0].PODate);
                $('#ShippingDetails').val(result[0].BuyerAddress);
                $('#SupplierDetails').val(result[0].SupplierAddress);
                var ColCount = result.length

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            cell.innerHTML = result[j].ItemName;
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_Code;
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemQuantity + " " + result[j].ItemUnit;
                            cell.setAttribute("id", "ItemQty" + j);
                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemTaxValue + " %";
                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].ItemUnitPrice + " Rs";
                        }
                        else if (i == 5) {

                            var t5 = document.createElement("input");
                            t5.id = "txtInwardQty" + j;
                            t5.setAttribute("onchange", "OnChangeIWQty($(this).val(),id)");
                            t5.setAttribute("type", "number");
                            t5.setAttribute("value", result[j].InwardQuantity != 0 ? result[j].InwardQuantity : '0');
                            cell.appendChild(t5);
                        }
                    }

                }
            }
        });
    }

    function SelectedIndexChanged() {
        BindItemDetails();
    }

    function OnChangeIWQty(value, id) {

        var rowNo = id.split('y')[1];
        var cell = document.getElementById("ItemQty" + rowNo);
        var temp_itemQty = cell.innerHTML.split(' ');
        var itemQty = parseFloat(temp_itemQty[0]);
        value = parseFloat(value);

        if (value > itemQty) {
            alert("Inward quantity cannot be greater then order quantity!");
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {
            InwardQuantities = InwardQuantities + "txtInwardQty" + rowNo + "*" + value + ",";
            document.getElementById(id).setAttribute("style", "border-color:none;");
        }
    }


    function fileValidation() {
        var fileInput =
            document.getElementById('Signature');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
    }

    function SetInwardQty() {
        $('#InwardQuantities').val(InwardQuantities);
        alert($('#InwardQuantities').val());
    }

</script>
@Html.Raw(TempData["Success"])

