@model InVanWebApp_BO.InwardQCBO
@{
    ViewBag.Title = "AddInwardQC";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddInwardQC", "InwardQCSorting"))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Inward QC Sorting</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Inward QC Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InwardQCNo, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.InwardQCNo, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Inward QC Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.InwardQCDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date" })
                    @Html.ValidationMessageFor(model => model.InwardQCDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Inward Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("InwardNote_Id", (IEnumerable<SelectListItem>)ViewData["InwNumberAndId"], "--Select--",
                   new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.InwardNote_Id, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Supplier Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.SupplierName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.SupplierName, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item QC details")
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-striped" id="ItemTable">
                        <tr>
                            <th>Item</th>
                            <th>Code</th>
                            <th>Unit Price</th>
                            <th>Inward Quantity</th>
                            <th>Total Quantity taken for Shorting (Kg)</th>
                            <th>Total Waste Quantity (Kg)</th>
                            <th>Post Sorting (Kg)</th>
                            <th>Wastage in Percentage (%)</th>
                            <th>Remarks</th>
                        </tr>
                    </table>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <a href="@Url.Action("Index", "InwardQCSorting")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right;" onclick="SetInwardQty()">Save</button>
        </div>
    </div>
    @*@Html.TextBoxFor(model => model.InwardQuantities, new { style = "display:none" })
        @Html.TextBoxFor(model => model.BalanceQuantities, new { style = "display:none" })*@
}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>


<script type="text/javascript">

    var InwardQuantities = "";
    var BalanceQuantities = "";
    function SelectedIndexChanged(id) {

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        //Clearing the address textarea
        $('#ShippingDetails').val(' ');
        $('#SupplierDetails').val(' ');

        $.ajax({
            type: "POST",
            url: `/InwardQCSorting/BindInwDetails?id=` + id,
            data: "{ }",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);
                //$('#PODate').val(result[0].PODate);
                $('#ShippingDetails').val(result[0].BuyerAddress);
                $('#SupplierDetails').val(result[0].SupplierAddress);
                var ColCount = result.length

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            cell.innerHTML = result[j].ItemName;
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_Code;
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemQuantity + " " + result[j].ItemUnit;
                            cell.setAttribute("id", "ItemQty" + j);
                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemTaxValue + " %";
                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].ItemUnitPrice + " Rs";
                        }
                        else if (i == 5) {

                            cell.innerHTML = result[j].InwardQuantity;
                            cell.setAttribute("id", "DeliveredQty" + j);
                        }
                        else if (i == 6) {

                            var t6 = document.createElement("input");
                            t6.id = "txtInwardQty" + j;
                            t6.removeAttribute("disabled", "false");
                            t6.removeAttribute("disabled", "true");

                            var cellData = document.getElementById("ItemQty" + j);
                            var temp_itemQty = cellData.innerHTML.split(' ');
                            cellData = document.getElementById("DeliveredQty" + j);
                            var deliveredQty = cellData.innerHTML;
                            if (parseFloat(temp_itemQty[0]) == parseFloat(deliveredQty)) {
                                t6.setAttribute("disabled", "true");
                            }
                            else {
                                t6.removeAttribute("disabled", "false");
                                t6.removeAttribute("disabled", "true");
                                t6.setAttribute("onchange", "OnChangeIWQty($(this).val(),id)");
                            }
                            t6.setAttribute("type", "number");
                            cell.appendChild(t6);
                        }
                        else if (i == 7) {
                            var t7 = document.createElement("input");
                            t7.id = "txtBalanceQty" + j;
                            t7.setAttribute("disabled", "true");
                            t7.setAttribute("value", result[j].BalanceQuantity != 0 ? result[j].BalanceQuantity : '0');
                            cell.appendChild(t7);
                        }
                    }

                }
            }
        });
    }

    function OnChangeIWQty(value, id) {

        var rowNo = id.split('y')[1];
        var cell = document.getElementById("ItemQty" + rowNo);
        var temp_itemQty = cell.innerHTML.split(' ');
        cell = document.getElementById("DeliveredQty" + rowNo);
        var deliveredQty = cell.innerHTML;
        //console.log(deliveredQty);
        var itemQty = parseFloat(temp_itemQty[0]) - parseFloat(deliveredQty);
        value = parseFloat(value);

        if (value > itemQty) {
            alert("Inwarding quantity cannot be greater then balanced quantity!");
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {
            var tempInwQty = document.getElementById("txtInwardQty" + rowNo).value;
            console.log(tempInwQty + " " + temp_itemQty[0] + " " + deliveredQty);
            document.getElementById("txtBalanceQty" + rowNo).value = parseFloat(temp_itemQty[0]) - (parseFloat(deliveredQty) + parseFloat(tempInwQty));
            InwardQuantities = InwardQuantities + "txtInwardQty" + rowNo + "*" + value + ",";

            var BalQty = document.getElementById("txtBalanceQty" + rowNo).value;
            BalanceQuantities = BalanceQuantities + "txtBalanceQty" + rowNo + "*" + BalQty + ",";
            document.getElementById(id).setAttribute("style", "border-color:none;");
        }
    }


    function SetInwardQty() {
        $('#InwardQuantities').val(InwardQuantities);
        $('#BalanceQuantities').val(BalanceQuantities);
        //alert($('#InwardQuantities').val());
        //alert($('#BalanceQuantities').val());
    }

</script>

@Html.Raw(TempData["Success"])