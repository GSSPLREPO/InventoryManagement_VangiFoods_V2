@model InVanWebApp_BO.OilAnalysisBO

@{
    ViewBag.Title = "AddOilAnalysis";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddOilAnalysis", "OilAnalysis", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-body">
            <h4>Add Oil Analysis</h4>
            <hr />
            @Html.ValidationSummary(true)

        <div class="row">
            <div class="col-md-2">
                @Html.Label("User")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.VerifyByName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.VerifyByName, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Date")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4" @*id="datetimepicker"*@>

                @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Time")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">

                @Html.TextBoxFor(model => model.Time, new { @class = "form-control form-control-sm", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>
            
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Lot No")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "error mt-2 text-danger", id = "validationMgsPAPH" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Sample Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.SampleName, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.SampleName, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2 mb-1">
                    @Html.Label("ACID Value")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ACIDValue, new { @class = "form-control form-control-sm", maxlength = "15", @onkeypress = "return customValidation(event);" })
                    @Html.ValidationMessageFor(model => model.ACIDValue, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2 mb-1">
                    @Html.Label("Peroxide Value (MGE/KG)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PeroxideValue, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return isNumberKey(event);" })
                    @Html.ValidationMessageFor(model => model.PeroxideValue, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

         
            <div class="row">

                <div class="col-md-2 mb-1">
                    @Html.Label("Color")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Color, new { @class = "form-control form-control-sm", maxlength = "30", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.Color, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Flavour")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Flavour, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.Flavour, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2 mb-1">
                    @Html.Label("Odour")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Odour, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.Odour, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
     

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remark, new { @class = "form-control form-control-sm", maxlength = "100",Title = "Remarks Will be Allow 100 Charachter" })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "OilAnalysis")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
@*<script src="jquery.min.js"></script>
    <script src="jquery-ui.min.js"></script>*@
<script src="jquery-ui-timepicker-addon.js"></script>


<script type="text/javascript">
    //Custom validation for only numeric, decimal and NA/na character.
    function customValidation(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 42 ||
            (unicode >= 48 && unicode <= 57)
            || unicode == 46) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, alphabets, underscore and NA/na character.
    function IsAlphaNumeric(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32 || unicode == 45 || (unicode >= 48 && unicode <= 57)
            || unicode == 95 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only  alphabets, underscore and NA/na character.
    function IsAlphabate(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32
            || unicode == 95 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, decimal.
    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;                                                                                         
            else
                return true;
        }
        return true;
    }
</script>