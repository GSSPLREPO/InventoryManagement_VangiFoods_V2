@model InVanWebApp_BO.ProductionIndentBO
@{ ViewBag.Title = "AddProductionIndent";
    Layout = "~/Views/Shared/MainMaster.cshtml"; }

@using (Html.BeginForm("AddProductionIndent", "ProductionIndent", FormMethod.Post))
{
@Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.ID)
                                <div class="card">
                                    <div class="card-body">
                                        <h4>Add Production Indent</h4>
                                        <hr />
                                        @Html.ValidationSummary(true)

                                        <div class="row">
                                            <div class="col-md-2">
                                                @Html.Label("Indent Number")
                                                <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.ProductionIndentNo, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.ProductionIndentNo, "", new { @class = "error mt-2 text-danger" })
                                            </div>
                                            <div class="col-md-2">
                                                @Html.Label("Issue Date")
                                                <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.IssueDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd"), @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.IssueDate, "", new { @class = "error mt-2 text-danger" })
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-2">
                                                @Html.Label("Indent By")
                                                <span style="color:red">*</span>
                                            </div>
                                            @if (@Session["UserId"] != null)
                                            {
                            <div class="col-md-4 d-none">
                                @Html.TextBoxFor(model => model.RaisedBy, new { @class = "form-control form-control-sm", Value = @Session["UserId"], @readonly = "readonly" })
                            </div>}

                                            @if (@Session["UserName"] != null)
                                            {
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control form-control-sm", Value = @Session["UserName"], @readonly = "readonly" })
                            </div>}
                                            <div class="col-md-2">
                                                @Html.Label("Production Date")
                                                <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.ProductionDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd") })
                                                @Html.ValidationMessageFor(model => model.ProductionDate, "", new { @class = "error mt-2 text-danger" })
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-2">
                                                @Html.Label("SO Number")
                                                <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.DropDownListFor(model => model.SO_Id, (IEnumerable<SelectListItem>)ViewData["SO_dd"], "--Select--",
                                                                  new { @class = "form-control form-control-sm", onchange = "SelectedIndexChanged($(this).val())" })
                                                @Html.ValidationMessageFor(model => model.SO_Id, "", new { @class = "error mt-2 text-danger" })
                                                @Html.HiddenFor(model => model.SONo)

                                            </div>
                                            <div class="col-md-2">
                                                @Html.Label("Work Order No")
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.WorkOrderNo, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.WorkOrderNo, "", new { @class = "error mt-2 text-danger", id = "ValChallanNo" })
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-2">
                                                @Html.Label("Product Name")
                                                <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                <select id="RecipeID" name="RecipeID" class="form-control form-control-sm" onchange="SelectedIndexChangedProductNameList($(this).val())"  data-val="true" data-val-number="The field RecipeID must be a number." data-val-required="Select the Product Name!">
                                                    <option value="">--Select--</option>
                                                </select>
                                                @Html.ValidationMessageFor(model => model.RecipeID, "", new { @class = "error mt-2 text-danger" })
                                                @Html.HiddenFor(model => model.RecipeName)
                                            </div>

                                            <div class="col-md-2">
                                                @Html.Label("Total Batches")
                                                <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.TotalBatches, new { @class = "form-control form-control-sm", maxlength = "8", })
                                                @Html.ValidationMessageFor(model => model.TotalBatches, "", new { @class = "error mt-2 text-danger" })
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-2">
                                                @Html.Label("Batch Number")
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.BatchNumber, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.BatchNumber, "", new { @class = "error mt-2 text-danger" })
                                            </div>

                                            <div class="col-md-2">
                                                @Html.Label("Remarks")
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.Description, new { @class = "form-control form-control-sm", maxlength = "95", onkeypress = "createJson();" })
                                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "error mt-2 text-danger" })
                                            </div>
                                        </div>
                                        <br />
                                        <hr />
                                        <div class="row">
                                            <div class="col-md-4" style="color:darkcyan">
                                                @Html.Label("Indent Ingredients detail")
                                            </div>
                                        </div>
                                        <hr />
                                        <div class="row">
                                            <div class="col-md-12 table-responsive">
                                                <table class="table table-hover" id="ItemTable">
                                                    <tr>
                                                        <th class="d-none">ItemID</th>
                                                        <th>Item Code</th>
                                                        <th>@*Ingredients*@ Item Name</th>
                                                        <th>Percentage</th>
                                                        <th>Batch Quantity</th>
                                                        <th>Final Quantity</th>
                                                        <th>Units</th>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                                        </div>
                                        <br />
                                        <a href="@Url.Action("Index", "ProductionIndent")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                                            Back To List
                                        </a>
                                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                                    </div>
                                </div>}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">

    var TxtItemDetails = "";

    $("#TotalBatches").change(function () {

        var totalBatches = $("#TotalBatches").val();
        var ID = $('#SO_Id').val();

        if (totalBatches == 0 || totalBatches == null || totalBatches == '') {
            totalBatches = 0;
        }
        else {
            totalBatches = parseFloat(totalBatches);
            var table = document.getElementById('ItemTable');
            var count = table.rows.length;

            for (var j = 0; j < count - 1; j++) {
                var FinalQty = parseFloat((document.getElementById("ItemQty_" + j)).innerHTML) * totalBatches;
                $("#txtFinalQty_" + j).val(FinalQty.toFixed(4));
            }

        }

        var batchNumber = "";
        $.ajax({
            url: '/ProductionIndent/GetBatchNumber?id=' + ID + "&TotalBatches=" + totalBatches,
            type: "POST",
            data: {},
            success: function (result) {
                for (var j = 0; j < result.length; j++) {
                    batchNumber = batchNumber + result[j].BatchNumber;
                    if (j != result.length - 1)
                        batchNumber = batchNumber + ",";
                }
                document.getElementById("BatchNumber").value = batchNumber;


            },
            error: function (err) {
                alert('Not able to fetch Batch Number, do batch planning!');
                $('#TotalBatches').val('');
                $('#BatchNumber').val('');
                $('#SO_Id').focus();   
            }
        });

    });

    // SO Number New Start
    function SelectedIndexChanged(id) {
        $('#btnSave').prop('disabled', false);

        var selectedSONumber_No, SONumber_No;
        selectedSONumber_No = document.getElementById("SO_Id").selectedIndex;
        SONumber_No = document.getElementById("SO_Id").options[selectedSONumber_No].innerText;
        document.getElementById("SONo").value = SONumber_No;

        $.ajax({
            url: '/ProductionIndent/GetWorkOrderNumber',
            type: "POST",
            data: { id },
            success: function (result) {
                $('#WorkOrderNo').val(result.WorkOrderNo);
                var count = result.salesOrderItemsDetails.length;
                var i = 0;
                $("#RecipeID option").remove();
                $("#RecipeID").append($("<option></option>").val('').html('--Select--'));
                while (i < count) {
                    $("#RecipeID").append($("<option></option>").val(result.salesOrderItemsDetails[i].Item_ID).html(result.salesOrderItemsDetails[i].ItemName));
                    i++;
                }

            },
            error: function (err) {
                alert('Not able to get the work order number!');
            }
        });

        //Check whether the Total Batches is entered or not 06-04-23.
        var TotalBatchesCheck = $('#TotalBatches').val();
        if (TotalBatchesCheck == '' || TotalBatchesCheck == null) {
            $('#TotalBatches').focus();
            document.getElementById('RecipeID').selectedIndex = 0;
            return;
        }
        else {
            $("#TotalBatches-error").prop("disabled", "true");
        }
    }
    // So Number New End

    function SelectedIndexChangedProductNameList(id) {
        $('#btnSave').prop('disabled', false);

        var selectedOptionRecipeName, RecipeName;

        selectedOptionRecipeName = document.getElementById("RecipeID").selectedIndex;
        RecipeName = document.getElementById("RecipeID").options[selectedOptionRecipeName].innerText;
        document.getElementById("RecipeName").value = RecipeName;

        var ProductNumber = $("#RecipeID option:selected").text();
        $('#RecipeName').val(ProductNumber);
        var recipeID = $('#SO_Id').val();
        if (recipeID == '' || recipeID == null) {
            recipeID = 0;
        }
        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        $.ajax({
            type: "POST",
            /*url: `/ProductionIndent/GetRecipe?id=` + id,*/
            url: '/ProductionIndent/GetRecipe?id=' + id + "&RecipeID=" + recipeID,
            data: "{ }",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var ColCount = result.length;

                if (ColCount > 1) {
                    $('#btnSave').prop('disabled', false);
                }
                else {
                    alert('There is no recipe for the selected product name!');
                    $('#RecipeID').focus();
                    $('#btnSave').prop('disabled', true);
                }

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 0; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            var t0 = document.createElement("input");
                            t0.id = "ItemID_" + j;
                            t0.setAttribute("disabled", "true");
                            t0.setAttribute("class", "d-none");
                            t0.setAttribute("value", result[j].ItemId);
                            cell.setAttribute("class", "d-none");
                            cell.appendChild(t0);
                        }
                        else if (i == 1) {
                            var t1 = document.createElement("input");
                            t1.id = "ItemCode_" + j;
                            t1.setAttribute("disabled", "true");
                            t1.setAttribute("style", "background:transparent;border:none;");
                            t1.setAttribute("value", result[j].ItemCode);
                            cell.appendChild(t1);
                        }
                        else if (i == 2) {
                            var t2 = document.createElement("input");
                            t2.id = "ItemName_" + j;
                            t2.setAttribute("disabled", "true");
                            t2.setAttribute("style", "background:transparent;border:none;");
                            t2.setAttribute("value", result[j].ItemName);
                            cell.appendChild(t2);
                        }
                        else if (i == 3) {
                            var t6 = document.createElement("input");
                            t6.id = "Percentage_" + j;
                            t6.setAttribute("disabled", "true");
                            t6.setAttribute("style", "background:transparent;border:none;");
                            /*t6.setAttribute("value", result[j].Ratio.toFixed(4));*/
                            t6.setAttribute("value", result[j].RoundedRatio.toFixed(4));
                            cell.appendChild(t6);
                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].BatchSize.toFixed(4);
                            cell.setAttribute("id", "ItemQty_" + j);
                        }
                        else if (i == 5) {
                            var t4 = document.createElement("input");
                            t4.id = "txtFinalQty_" + j;
                            t4.removeAttribute("disabled", "false");
                            t4.removeAttribute("disabled", "true");
                            t4.setAttribute("maxlength", "8");
                            t4.setAttribute("onkeypress", "return isNumberKey(event)");
                            t4.setAttribute("value", result[j].BatchSize.toFixed(4));
                            // t4.setAttribute("onchange", "OnChangeQty($(this).val(),id)");
                            t4.setAttribute("class", "form-control form-control-sm");
                            cell.appendChild(t4);
                        }
                        else if (i == 6) {
                            cell.innerHTML = result[j].UnitName;
                            cell.setAttribute("id", "ItemUnit_" + j);
                        }


                    }
                }
            }
        });
    }

    //function OnChangeQty(value, id) {
    //    var totalBatches = $("#TotalBatches").val();
    //    var rowNo = id.split('_')[1];
    //    var finalQty = $("#txtFinalQty_" + rowNo).val();
    //    //var percentage = $("#Percentage_" + rowNo).val();
    //    var finalQuantity = totalBatches * finalQty;
    //    $("#txtFinalQty_" + rowNo).val(finalQuantity.toFixed(4));
    //    $("#ItemQty_" + rowNo).val(finalQuantity.toFixed(4));

    //}

    function SetUserName() {
        var selectedOptionTerms = document.getElementById("RaisedBy").selectedIndex;
        var tempUserName = document.getElementById("RaisedBy").options[selectedOptionTerms].innerText;
        document.getElementById("UserName").value = tempUserName;
    }

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        createJson();
    };

    function createJson() {
        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        var i = 0;
        TxtItemDetails = "[";
        for (i = 0; i < rowCount - 1; i++) {
            var ItemID = $("#ItemID_" + i).val();
            var ItemCode = $("#ItemCode_" + i).val();
            var ItemName = $("#ItemName_" + i).val();
            var ItemQty = (document.getElementById("ItemQty_" + i)).innerHTML.split(" ")[0];
            var ItemQty = $("#txtFinalQty_" + i).val();
            ItemQty = (ItemQty == null || ItemQty == '') ? 0 : ItemQty;
            var FinalQty = $("#txtFinalQty_" + i).val();
            FinalQty = (FinalQty == null || FinalQty == '') ? 0 : FinalQty;
            var Unit = (document.getElementById("ItemUnit_" + i)).innerHTML;
            var Percentage = $("#Percentage_" + i).val();


            TxtItemDetails = TxtItemDetails + "{\"ItemId\":" + ItemID +
                ", \"Item_Code\":\"" + ItemCode + "\", \"ItemName\": \"" + ItemName + "\", \"ItemQty\": " + ItemQty +
                ", \"FinalQty\": " + FinalQty + ", \"ItemUnit\": \"" + Unit + "\", \"Percentage\": " + Percentage;

            if (i == (rowCount - 2))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]"
        $('#TxtItemDetails').val(TxtItemDetails);
    }
    //==========end===============

    function isNumberKey(evt) {
        $('#btnSave').prop('disabled', false);
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

</script>


