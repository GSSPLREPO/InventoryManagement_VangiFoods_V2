@model InVanWebApp_BO.ProductionIndentBO
@{ ViewBag.Title = "EditProductionIndent";
    Layout = "~/Views/Shared/MainMaster.cshtml"; }

@using (Html.BeginForm("EditProductionIndent", "ProductionIndent", FormMethod.Post))
{
<div class="card">
    <div class="card-body">
        <h4>Edit Production Indent</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.ID)

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Indent Number")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ProductionIndentNo, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.ProductionIndentNo, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Issue Date")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.IssueDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.IssueDate, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Indent By")
                <span style="color:red">*</span>
            </div>
            @if (@Session["UserId"] != null)
            {
<div class="col-md-4 d-none">
    @Html.TextBoxFor(model => model.RaisedBy, new { @class = "form-control", Value = @Session["UserId"], @readonly = "readonly" })
</div>          }

            @if (@Session["UserName"] != null)
            {
<div class="col-md-4">
    @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", Value = @Session["UserName"], @readonly = "readonly" })
</div>          }
            <div class="col-md-2">
                @Html.Label("Production Date")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ProductionDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.ProductionDate, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Product Name")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.RecipeName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                @Html.HiddenFor(model => model.RecipeID)
                @Html.ValidationMessageFor(model => model.RecipeName, "", new { @class = "error mt-2 text-danger" })
            </div>

            <div class="col-md-2">
                @Html.Label("Total Batches")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.TotalBatches, new { @class = "form-control form-control-sm", maxlength = "8", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.TotalBatches, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("SO Number")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model=>model.SONo, new { @class = "form-control form-control-sm", @readonly="readonly" })
                @Html.ValidationMessageFor(model => model.SONo, "", new { @class = "error mt-2 text-danger" })
                @Html.HiddenFor(model => model.SalesOrderId)
            </div>
            <div class="col-md-2">
                @Html.Label("Work Order No")
            </div>
            <div class="col-md-4">
                @*@Html.DropDownList("SOId", (IEnumerable<SelectListItem>)ViewData["WONumberAndId"], "--Select--",
                    new { @class = "form-control", onchange = "SelectedIndexChangedWO($(this).val(),id)", @disabled = "disabled" })
                     @Html.ValidationMessageFor(model => model.SalesOrderId, "", new { @class = "error mt-2 text-danger", id = "ValChallanNo" })*@
                @Html.TextBoxFor(model => model.WorkOrderNo, new { @class = "form-control form-control-sm", maxlength = "50", @disabled = "disabled" })
                @Html.HiddenFor(model => model.WorkOrderNo)
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Batch Number")
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.BatchNumber, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.BatchNumber, "", new { @class = "error mt-2 text-danger" })
            </div>

            <div class="col-md-2">
                @Html.Label("Remarks")
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Description, new { @class = "form-control form-control-sm", maxlength = "95", onkeypress = "createJson();" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>
        <br />
        <hr />
        <div class="row">
            <div class="col-md-4" style="color:darkcyan">
                @Html.Label("Indent Ingredients detail")
            </div>
        </div>
        <hr />
        <div class="col-md-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <div class="row">
                            <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                <table class="table table-hover" id="ItemTable">
                                    <thead>
                                        <tr>
                                            <th class="sortStyle d-none">
                                                ItemID
                                            </th>
                                            <th class="sortStyle">
                                                Item Code
                                            </th>
                                            <th class="sortStyle">
                                                Item Name
                                            </th>
                                            <th class="sortStyle">Percentage</th>
                                            <th class="sortStyle">
                                                Batch Quantity
                                            </th>
                                            <th class="sortStyle">
                                                Final Quantity
                                            </th>
                                            <th class="sortStyle">
                                                Units
                                            </th>

                                        </tr>
                                    </thead>
                                    <tbody id="myTableBody">
                                        @{ int c = 1;
                                            foreach (var item in Model.indent_Details)
                                            {
                                                string itemListForDD = "itemListForDD";
                                                itemListForDD = itemListForDD + (c - 1);
                            <tr id="tablerow_@c">
                                <td class="col-md-4 d-none">
                                    @Html.TextBox("ItemID_" + c, item.ItemId, new { @class = "form-control", @readOnly = "readOnly", style = "height:30px;width:110px;" })
                                </td>
                                <td>
                                    @Html.TextBox("ItemCode_" + c, item.ItemCode, new { @class = "form-control form-control-sm", @readonly = "readonly", style = "height:30px;" })
                                </td>
                                <td>
                                    @Html.TextBox("ItemName_" + c, item.ItemName, "", new { @class = "form-control form-control-sm", style = "height:30px;", @readonly = "readonly" })
                                </td>
                                <td>
                                    @Html.TextBox("Percentage_" + c, item.Percentage, "", new { @class = "form-control form-control-sm", style = "height:30px;width:100px;", @readonly = "readonly" })
                                </td>
                                <td>
                                    @Html.TextBox("ItemQty_" + c, item.BatchQuantity, new
                                    {
                                        @class = "form-control form-control-sm",
                                        style = "height:30px;",
                                        value = "0",
                                        onkeypress = "return isNumberKey(event)",
                                        maxlength = "8",
                                        @readonly = "readonly"
                                    })
                                </td>
                                <td>
                                    @Html.TextBox("txtFinalQty_" + c, item.FinalQuantity, new
                                    {
                                        @class = "form-control form-control-sm",
                                        style = "height:30px;",
                                        value = "0",
                                        onkeypress = "return isNumberKey(event)",
                                        maxlength = "8"
                                    })
                                </td>
                                <td>
                                    @Html.TextBox("ItemUnit_" + c, item.ItemUnit, "", new { @class = "form-control form-control-sm", style = "height:30px;width:100px;", @readonly = "readonly" })
                                </td>


                            </tr> { c++; }
                                            } }
                                    </tbody>
                                </table>
                                <br />

                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                    </div>
                </div>
            </div>
        </div>
        <br />
        <a href="@Url.Action("Index", "ProductionIndent")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
            Back To List
        </a>
        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Update</button>
    </div>
</div>}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">

    var TxtItemDetails = "";

    $("#TotalBatches").change(function () {
        var totalBatches = $("#TotalBatches").val();
        if (totalBatches > 0) {
            var len = document.getElementById("ItemTable").rows.length;
            len = parseFloat(len);
            var t = 1;
            while (t < len) {
                var totalBatches = $("#TotalBatches").val();
                var idItemQty = document.getElementById("ItemQty_" + t).value;
                var TotItemQty = idItemQty * totalBatches;
                document.getElementById("ItemQty_" + t).value = TotItemQty.toFixed(4);
                var idFinalQty = document.getElementById("txtFinalQty_" + t).value;
                var TotFinalQty = idFinalQty * totalBatches;
                document.getElementById("txtFinalQty_" + t).value = TotFinalQty.toFixed(4);
                t++;
            }
        }
    });

    //SO Number Start
    function SelectedIndexChangedSO(id) {
        var selectedOptionSO, SONo;
        selectedOptionSO = document.getElementById("SalesOrderId").selectedIndex;
        SONo = document.getElementById("SalesOrderId").options[selectedOptionSO].innerText;
        document.getElementById("SONo").value = SONo;
        SelectedIndexChangedWO(id);

        var TotalBatches = $("#TotalBatches").val();
        debugger
        $.get("@Url.Action("BindBatchNumber", "ProductionIndent")?id=" + id + "&TotalBatches=" + TotalBatches

            , function (data) {
                console.log(data);
                var len = data.length;
                var result = '';
                var i = 0;
                while (i < len) {
                        result = result + data[i].BatchNumber;
                    if (i != len-1) {
                        result = result + ',';
                    }
                    i++;
                }
                $('#BatchNumber').val(result);
            });

    }
    //SO Number End

    //WO Number Start
    function SelectedIndexChangedWO(id) {
        var selectedOptionWO, WONo;
        selectedOptionWO = document.getElementById("SOId").selectedIndex = id;
        WONo = document.getElementById("SOId").options[selectedOptionWO].innerText;
        document.getElementById("WorkOrderNo").value = WONo;
    }
    //WO Number End

    function SelectedIndexChangedProductNameList(id) {

        var selectedOptionRecipeName, RecipeName;
        selectedOptionRecipeName = document.getElementById("RecipeID").selectedIndex;
        RecipeName = document.getElementById("RecipeID").options[selectedOptionRecipeName].innerText;
        document.getElementById("RecipeName").value = RecipeName;

        $("#TotalBatches").val('1');
        //For deleting the rows of Item table if exist.
        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        $.ajax({
            type: "POST",
            url: `/ProductionIndent/BindRecipeDetails?id=` + id,
            data: "{ }",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var ColCount = result.length;

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 0; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            var t0 = document.createElement("input");
                            t0.id = "ItemID_" + j;
                            t0.setAttribute("disabled", "true");
                            t0.setAttribute("class", "d-none");
                            t0.setAttribute("value", result[j].Item_ID);
                            cell.setAttribute("class", "d-none");
                            cell.appendChild(t0);
                        }
                        else if (i == 1) {
                            var t1 = document.createElement("input");
                            t1.id = "ItemCode_" + j;
                            t1.setAttribute("disabled", "true");
                            t1.setAttribute("style", "background:transparent;border:none;");
                            t1.setAttribute("value", result[j].ItemCode);
                            cell.appendChild(t1);
                        }
                        else if (i == 2) {
                            var t2 = document.createElement("input");
                            t2.id = "ItemName_" + j;
                            t2.setAttribute("disabled", "true");
                            t2.setAttribute("style", "background:transparent;border:none;");
                            t2.setAttribute("value", result[j].ItemName);
                            cell.appendChild(t2);
                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemQuantity.toFixed(4);
                            cell.setAttribute("id", "ItemQty_" + j);
                        }
                        else if (i == 4) {
                            var t4 = document.createElement("input");
                            t4.id = "txtFinalQty_" + j;
                            t4.removeAttribute("disabled", "false");
                            t4.removeAttribute("disabled", "true");
                            t4.setAttribute("maxlength", "8");
                            t4.setAttribute("onkeypress", "return isNumberKey(event)");
                            t4.setAttribute("value", result[j].FinalQuantity.toFixed(4));
                            t4.setAttribute("onchange", "OnChangeQty($(this).val(),id)");
                            t4.setAttribute("class", "form-control form-control-sm");
                            cell.appendChild(t4);
                        }
                        else if (i == 5) {
                            cell.innerHTML = result[j].UnitName;
                            cell.setAttribute("id", "ItemUnit_" + j);
                        }
                        else if (i == 6) {
                            var t6 = document.createElement("input");
                            t6.id = "Percentage_" + j;
                            t6.setAttribute("disabled", "true");
                            t6.setAttribute("style", "background:transparent;border:none;");
                            t6.setAttribute("value", result[j].Ratio.toFixed(4));
                            cell.appendChild(t6);
                        }
                    }
                }
            }
        });
    }


    function OnChangeQty(value, id) {
        var totalBatches = $("#TotalBatches").val();
        var rowNo = id.split('_')[1];
        var finalQty = $("#txtFinalQty_" + rowNo).val();
        var percentage = $("#Percentage_" + rowNo).val();
        var finalQuantity = totalBatches * percentage * finalQty;
        $("#txtFinalQty_" + rowNo).val(finalQuantity.toFixed(4));
        $("#ItemQty_" + rowNo).val(finalQuantity.toFixed(4));
    }

    function SetUserName() {
        var selectedOptionTerms = document.getElementById("RaisedBy").selectedIndex;
        var tempUserName = document.getElementById("RaisedBy").options[selectedOptionTerms].innerText;
        document.getElementById("UserName").value = tempUserName;
    }

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        createJson();
    };

    function createJson() {
        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        var i = 1;
        TxtItemDetails = "[";
        for (i = 1; i < rowCount; i++) {
            var ItemID = $("#ItemID_" + i).val();
            var ItemCode = $("#ItemCode_" + i).val();
            var ItemName = $("#ItemName_" + i).val();
            var ItemQty = (document.getElementById("ItemQty_" + i)).value.split(" ")[0];
            var ItemQty = $("#txtFinalQty_" + i).val();
            ItemQty = (ItemQty == null || ItemQty == '') ? 0 : ItemQty;
            var FinalQty = $("#txtFinalQty_" + i).val();
            FinalQty = (FinalQty == null || FinalQty == '') ? 0 : FinalQty;
            var Unit = (document.getElementById("ItemUnit_" + i)).value;
            var Percentage = $("#Percentage_" + i).val();

            TxtItemDetails = TxtItemDetails + "{\"ItemId\":" + ItemID +
                ", \"Item_Code\":\"" + ItemCode + "\", \"ItemName\": \"" + ItemName + "\", \"ItemQty\": " + ItemQty + ", \"FinalQty\": " + FinalQty +
                ", \"ItemUnit\": \"" + Unit + "\", \"Percentage\": " + Percentage;

            if (i == (rowCount - 1))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]"
        $('#TxtItemDetails').val(TxtItemDetails);
    }
    //==========end===============

    function SelectedIndexChangedItemList(id) {
        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        itemCode = itemCode.split(' (')[0];
        document.getElementById("ItemCode").value = itemCode;
    }

    function isNumberKey(evt) {
        $('#btnSave').prop('disabled', false);
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

</script>


