
@model InVanWebApp_BO.PurchaseOrderBO

@{
    ViewBag.Title = "AddPurchaseOrder";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@*@using (Html.BeginForm())*@
@using (Html.BeginForm("AddPurchaseOrder", "PurchaseOrder", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Purchase Order</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Tittle")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Tittle, new { @class = "form-control form-control-sm", placeholder = "Purchase Order For Vangi Foods", type = "text" })
                    @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "error mt-2 text-danger" })
                </div>
                <br />

                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.PONumber, new { @class = "form-control text-right", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PO Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4 form-group">
                    @Html.TextBoxFor(model => model.PODate, new { @class = "form-control", type = "date" })
                    @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "error mt-2 text-danger" })
                </div>



                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4 form-group">
                    @Html.TextBoxFor(model => model.DeliveryDate, new { @class = "form-control", type = "date" })
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Terms And Condition")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("TermsAndConditionID", (IEnumerable<SelectListItem>)ViewData["TermsAndConditionID"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedTerms($(this).val())" })
                    @Html.ValidationMessageFor(model => model.TermsAndConditionID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.Terms, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            @*<div class="row">
                    <div class="col-md-2">
                        @Html.Label("Purchase Order Status")
                        <span style="color:red">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PurchaseOrderStatus, new { @class = "form-control form-control-sm", placeholder = "Pending", type = "text" })
                        @Html.ValidationMessageFor(model => model.PurchaseOrderStatus, "", new { @class = "error mt-2 text-danger" })
                    </div>
                </div>*@
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @*@Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })*@
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
                <br />
                <div class="col-md-2">
                    @Html.Label("Venders Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.VendorsID, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.VendorsID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />


            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Delivery Details</h4>
                            <hr />
                            <div class="form-group">
                                @*@Html.DropDownList("OrganisationId", (IEnumerable<SelectListItem>)ViewData["DeliveryAddress"], new { @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.OrganisationId, "", new { @class = "error mt-2 text-danger" })*@
                                @*@Html.DropDownList("LocationId", (IEnumerable<SelectListItem>)ViewData["DeliveryAddress"], new { @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })*@
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Supplier Details</h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.SupplierAddress, new { id = "SupplierAddress", @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "error mt-2 text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Amendment Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.Amendment, new { @class = "form-control text-right", Value = "0", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Amendment, "", new { @class = "error mt-2 text-danger" })
                </div>
                <br />
                <br />
                <div class="col-md-2 mb-1">
                    @Html.Label("Indent Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.IndentNumber, new { @class = "form-control form-control-sm text-right" })
                    @Html.ValidationMessageFor(model => model.IndentNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />

            <div class="row">
                @*<br />
                    <br />

                    <div id="AddMultipleDiv" class="col-6 mb-1">
                        <fieldset>
                            <div class="row">
                                <div class="col-lg-7">
                                    <label>Signature</label>
                                    <input type="file" name="Signature" id="fileupload" class="file-drop-zone" required>
                                    <span id="sfileupload" class="text-danger"></span>
                                </div>
                            </div>

                        </fieldset>
                    </div>

                    <br />
                    <br />
                    <br />*@
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">
                                                    Item Code
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle d-n">
                                                    Selected Item Code
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle">
                                                    Item Description
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle">
                                                    Quantity
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle">
                                                    Units
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle">
                                                    Price
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle">
                                                    Tax
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                                <th class="sortStyle">
                                                    Total before tax
                                                    <i class="fa fa-angle-down"></i>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            <tr id="tablerow">
                                                <td>
                                                    @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control", style = "height:30px;width:100px;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                </td>
                                                <td class="col-md-4">
                                                    @Html.TextBoxFor(model => model.Item_Code, new { @class = "form-control", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemName", "", new { @class = "form-control", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.ItemQuantity, new { @class = "form-control text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnit", "", new { @class = "form-control", style = "height:30px;width:100px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnitPrice", "", new { @class = "form-control text-right", style = "height:30px;width:100px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemTaxValue", "", new { @class = "form-control text-right", style = "height:30px;width:80px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.TotalItemCost, "", new { @class = "form-control text-right", id = "ItemTotalPrice", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-primary" onclick="removeTr(0);">Delete</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <button type="button" class="btn btn-info shadow" id="AddItem">
                                    + Add Item
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @*<input class="form-control text-right" id="TxtItemDetails" name="TxtItemDetails" value="" />*@
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card h-75">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            <hr />
                            @*<input type="file" name="img[]" class="file-upload-default" style="visibility:hidden;position:absolute;">
                                <div class="input-group col-xs-12">
                                    <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Signature" />
                                    <span class="input-group-append">
                                        <button type="button" class="file-upload-browse btn btn-primary">Attach</button>
                                    </span>
                                </div>*@
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />

                                <!-- Image preview -->
                                <span style="color:green">@ViewBag.Message</span>
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <br />

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax">Total (before tax): </label>
                                    <input class="form-control text-right" id="TotalBeforeTax" name="TotalItemCost" value="" />
                                </div>
                                <div class="row mb-2">
                                    <label>Total tax: </label>
                                    @*<input class="form-control" id="TotalTax" name="Tax" />*@
                                    <input class="form-control text-right" id="TotalTax" name="TotalTax" />
                                </div>
                                <div class="row mb-2">
                                    <label>Total (after tax):</label>
                                    @*<input class="form-control" id="TotalAfterTax" />*@
                                    <input class="form-control text-right" id="TotalAfterTax" name="TotalAfterTax" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total:</b></label>
                                    <input class="form-control text-right" id="GrandTotal" name="GrandTotal" />
                                </div>
                                <div class="row mb-2">
                                    <label>Advanced To Pay:</label>
                                    <input class="form-control text-right" id="AdvancedPayment" name="AdvancedPayment" onkeypress="return isNumberKey(event)" />
                                </div>
                            </div>
                            <br />
                            <button type="submit" id="btn_SaveDraft" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);" formaction="SaveDraft">Save Draft</button>
                            <button type="submit" id="btnSave"class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);" formaction="AddPurchaseOrder">Save</button>
                            @Html.ActionLink("Back to List", "Index", new { @class = "font-weight-light" })
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>



            <!--<div class="row text-right">
            <div class="col">
                <button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);">Save</button>
            </div>

            <a href="@Url.Action("Index", "PurchaseOrder")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);">Back To List</a>-->
            @*<button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);">Submit</button>
                <a href="@Url.Action("Index", "PurchaseOrder")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);">
                    Back To List
                </a>*@

            <!--</div>-->

        </div>
    </div>

    @Html.HiddenFor(model => model.DraftFlag, new { @Value = "false" })
    @*<input type="hidden" id="DraftFlag" name="@Html.NameFor(model => model.DraftFlag)" value="0" />*@
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">

    var TxtItemDetails = ""; 

    $("#btnAdd").click(function () {
        $("#AddMultipleDiv").hide();
        $("#AddDiv").show();
        $("#btnAdd").hide();
        $("#btnAddMultiple").hide();
    });

    $("#btnAddMultiple").click(function () {
        $("#AddMultipleDiv").show();
        $("#AddDiv").hide();
        $("#btnAdd").hide();
        $("#btnAddMultiple").hide();
        //ViewBag.Edit = true;
        //window.location.href = '/Project/Index';
    });


    $('#uploadexcel').show();
    $('#uploadexcel').attr("disabled", true);

    $('#uploadexcel').click(function () {

        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {


            var fileUpload = $("#fileupload").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object
            //fileData.append('username', ‘Manas’);

            $.ajax({
                url: '/PurchaseOrder/UploadSignature',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (result) {
                    alert(result);
                    window.location.href = "/PurchaseOrder/AddPurchaseOrder";
                },
                error: function (err) {
                    alert('Format of data uploaded is incorrect.');

                }
            });
        } else {
            alert("FormData is not supported.");
        }
    });

    $('#fileupload').change(function () {
        var fileExtension = ['jpg', 'jpeg', 'png'];
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            // $('#uploadexcel').attr("disabled", true);
            alert("Only '.jpg','.jpeg','png' formats are allowed.");
            $('#fileupload').val('');
            //$('#<%= myLabel.ClientID %>').html("Only '.jpeg','.jpg' formats are allowed.");
        }
        else {
            $('#uploadexcel').attr("disabled", false);
        }
    });

    //onchange = "SelectedIndexChanged($(this).val())"

    function SelectedIndexChangedItemList(id) {
        debugger
        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        document.getElementById("Item_Code").value = itemCode;
    }

    function SelectedIndexChangedTerms(id) {
        debugger
        var selectedOptionTerms, termsName;
        selectedOptionTerms = document.getElementById("TermsAndConditionID").selectedIndex;
        termsName = document.getElementById("TermsAndConditionID").options[selectedOptionTerms].innerText;
        document.getElementById("Terms").value = termsName;
    }

    function SelectedIndexChanged(id) {
        //alert(id);
        debugger
        var selectedOption,companyName;
        selectedOption = document.getElementById("VendorsID").selectedIndex;
        companyName = document.getElementById("VendorsID").options[selectedOption].innerText;
        document.getElementById("CompanyName").value = companyName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindCompanyAddress?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);
                var suplierAdd = result[0].SupplierAddress;
                $("#SupplierAddress").val(suplierAdd);
            }
        });
    }

    function SelectedIndexChangedLocation(id) {
        //alert(id);
        debugger
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                debugger;
                //console.log(result);
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }



        //Dropdownlist Selectedchange event
    function getitemDetails() {
                    $("#f").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',

                data: { id: $("#Item_ID").val() },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                success: function (itemDescription) {
                    debugger
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    //rahul added $(itemDescription).each(function ()
                    //$(itemDescription).each(function () {
                    //    debugger
                    //    $("#Item_ID").append($("<option></option>").val(this.ID).html(this.Item_Code));
                    //});

                    var description = JSON.stringify(itemDescription);
                    // var item = description.split("#");
                    //alert('hh' + itemDescription.Item_Name + "  " +itemDescription.UnitName+" "+itemDescription.Price);
                    $("#ItemName").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#ItemUnitPrice").val(itemDescription.UnitPrice);
                    $("#ItemTaxValue").val(itemDescription.ItemTaxValue);
                    $("#ItemQuantity").val('0');

                    $("#ItemTotalPrice").val('');
                    $("#TotalBeforeTax").val('');
                    $("#TotalTax").val('');
                    $("#TotalAfterTax").val('');
                    $("#GrandTotal").val('');
                    $("#AdvancedPAyment").val('');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


    }

    $("#Item_ID").change(function () {
        debugger        
        getitemDetails();
    });

    function getitemDetailsJSTbl(count) {
        debugger
        console.log(count);
        //SelectedIndexChangedItemList();
       // var itemId = "ItemID['" + counter + "']";
        //var itemId = "Item_ID['" + counter + "']";
        var itemId = "ItemID_" + count;
        var selectedItemId = $("#" + itemId).val();
                    $.ajax({
                type: 'POST',
                //url: '@Url.Action("GetitemDetails?id='+${itemId}+'")', // we are calling json method
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',
                data: { id: selectedItemId },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                        success: function (itemDescription) {
                    debugger
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    //rahul added $(itemDescription).each(function ()
                    //$(itemDescription).each(function () {
                    //    debugger
                    //    $("#Item_ID").append($("<option></option>").val(this.ID).html(this.Item_Code));
                    //});

                            var description = JSON.stringify(itemDescription);
                            console.log(description);
                    // var item = description.split("#");
                            //alert('hh' + itemDescription.Item_Name + "  " +itemDescription.UnitName+" "+itemDescription.Price);
                            $("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#itemPrice_" + count).val(itemDescription.UnitPrice);
                            $("#itemTax_" + count).val(itemDescription.ItemTaxValue);
                            $("#itemQuantity_" + count).val('0');
                            $("#totalItemCost_" + count).val('0');

                    //$("#ItemTotalPrice").val('');
                    //$("#TotalBeforeTax").val('');
                    //$("#TotalTax").val('');
                    //$("#TotalAfterTax").val('');
                    //$("#GrandTotal").val('');
                    //$("#AdvancedPAyment").val('');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


       // $("#itemDescription" + count).val(count.Item_Name);

    }

    function calcTax(cnt, e) {
        alert("calcTax");
        debugger;
        if (isNumberKey(e)) {
            debugger;
        var itemQuantity = $("#itemQuantity_" + cnt).val();
        console.log(itemQuantity);
        var itemPrice = $("#itemPrice_" + cnt).val();
        //var tempTax = $("#itemTax_").val().split("%");
        var tax = $("#itemTax_").val();
        //var tax = tempTax[0];

        //Set total price in item grid.
        var totalPrice = itemQuantity * itemPrice;
        $("#totalItemCost_" + cnt).val(totalPrice);
        //Set values in Bill
        var totalPriceAfterTax = (totalPrice) + ((totalPrice * tax) / 100);
        //console.log("quan:" + quantity + ",totalprice:" + totalPrice + ",tax:" + tax + ",TPAT:" + totalPriceAfterTax);
        $("#totalBeforeTax_").val(totalPrice);
        $("#totalTax_").val($("#ItemTax").val());
        $("#rotalAfterTax_").val(totalPriceAfterTax);
        $("#grandTotal_").val(totalPriceAfterTax);
        }
    }

    var counter = 1;

    $("#AddItem").click(function () {
        debugger
        //'<select id="ItemID" class="form-control" name="ItemID[' + counter + ']" required="required" /><optio >--Select Item--</option></select>' +
        //var nameItem = "Item_ID['" + counter + "']";
        var itemId = "ItemID_"+counter;
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var itemQuantity = "itemQuantity_" + counter;
        var itemUnit = "itemUnit_" + counter;
        var itemPrice = "itemPrice_" + counter;
        var itemTax = "itemTax_" + counter;
        var totalItemCost = "totalItemCost_" + counter;
        $('<tr id="tablerow' + counter + '">' + '<td>'+
            //'<select id="ItemID" class="form-control" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" required="required" /></select>' +
            //'<input type="text" id="ItemID" class="form-control" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" value="" required="required" />' +
            '<select id="'+itemId+'" onchange="getitemDetailsJSTbl('+counter+')"; class="form-control" data-val="true" data-val-number="The field Item_ID must be a number." name="'+itemId+' " style="height:30px;width:100px;" aria-describedby="Item_ID-error" aria-invalid="false">'+$('#Item_ID').html()+'</select>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemCode + '" class="form-control" style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemDescription + '" class="form-control" style = "height:30px;width:200px;" name="' + itemDescription + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /*'<input type="text" id="' + itemQuantity + '" onkeyup="calcTax(' + counter + ',' + this.value + ')"; class="form-control" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +*/
            '<input type="text" id="' + itemQuantity + '" onchange="CalItemTotalPrice($(this).val(),id)"; class="form-control text-right" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control" style = "height:30px;width:100px;" name="' + itemUnit + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemPrice + '" class="form-control text-right" style = "height:30px;width:100px;" name="' + itemPrice + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemTax + '" class="form-control text-right" style = "height:30px;width:80px;" name="' + itemTax+ ' " value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + totalItemCost + '" class="form-control text-right" style = "height:30px;width:200px;" name="' + totalItemCost + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-primary" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');

        counter++;
        return false;
    });



    function CalItemTotalPrice(value, id) {
        //alert(value + " " + id);
        var temp_rowNo = id.split('_');
        var rowNo = temp_rowNo[1];
        value = parseFloat(value);
        if (value != 0) {
            var price = $("#itemPrice_" + rowNo).val();
            price = parseFloat(price);
            var totalPrice = price * value;
            $("#totalItemCost_" + rowNo).val(totalPrice);
        }

        CalculateTotalBeforeTax();
    }

    function CalculateTotalBeforeTax() {
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 2;
        var total = parseFloat(ItemTotalPrice.value);
        var totalTax = (parseFloat(ItemTaxValue.value)/100)* total;
        var i = 1;
        while (i<=length) {
            var temp = document.getElementById("totalItemCost_" + i).value;
            var tempTotalTax = document.getElementById("itemTax_" + i).value;
            total = parseFloat(temp) + total;

            tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
            totalTax = parseFloat(tempTotalTax) + totalTax;
            i++;
        }
        $('#TotalBeforeTax').val(total);
        $('#TotalTax').val(totalTax);
        var tempGrandTotal = total + totalTax;
        $('#TotalAfterTax').val(tempGrandTotal);
        $('#GrandTotal').val(tempGrandTotal);
                
        createJson();
    }
    function createJson() {
        debugger
        //var table = $('#submissionTable').tableToJSON();
        ////table = { "myrows": table };//make myrows the parent object
        //alert(JSON.stringify(table));
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        console.log(res);
        var TxtItemDetails = JSON.stringify(res);
        console.log(TxtItemDetails);
        $('#TxtItemDetails').val(TxtItemDetails); 
    }

    //$("#btnSave").click(function () {
    //    debugger
    //        var $form = $(this).closest('form');  
    //        var dataPO = $form.serializeArray();  
  
    //        console.log(dataPO);  
  
    //        var arrIdPO = [];  
    //        var arrQtePO = [];  
  
    //        for( i = 0; i < dataPO.length; i++)  
    //        {
    //            debugger
    //            if (dataPO[i].name == 'product.Item_ID')
    //            {  
    //                arrIdPO.push(dataPO[i].value);  
    //            }  
    //            else if (dataPO[i].name == 'product.Item_Code')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }    
    //            else if (dataPO[i].name == 'product.ItemName')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }    
    //            else if (dataPO[i].name == 'product.ItemQuantity')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }    
    //            else if (dataPO[i].name == 'product.ItemUnit')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }      
    //            else if (dataPO[i].name == 'product.ItemUnitPrice')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }       
    //            else if (dataPO[i].name == 'product.ItemTaxValue')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }     
    //            else if (dataPO[i].name == 'product.TotalItemCost')
    //            {  
    //                arrQtePO.push(dataPO[i].value);    
    //            }  
    //        }  
  

    //    $.ajax({
    //        type: "POST",
    //        url: "/Home/PurchaseOrder/AddPurchaseOrder",
    //        data: { res, arrIdPO, arrQtePO}, 
    //        contentType: "application/json; charset=utf-8",
    //        dataType: "json",
    //        success: function (response) {
    //            alert("Hello: " + response.Name + " .\nCurrent Date and Time: " + response.DateTime);
    //        },
    //        failure: function (response) {
    //            alert(response.responseText);
    //        },
    //        error: function (response) {
    //            alert(response.responseText);
    //        }
    //    });
    //});


    $("#ItemQuantity").change(function () {
        debugger
        var quantity = $("#ItemQuantity").val();
        var price = $("#ItemUnitPrice").val();
        var tempTax = $("#ItemTaxValue").val().split("%")
        var tax = tempTax[0];

        //Set total price in item grid.
        var totalPrice = quantity * price;
        $("#ItemTotalPrice").val(totalPrice);
        //Set values in Bill
        var totalPriceAfterTax = (totalPrice) + ((totalPrice * tax) / 100);
        //console.log("quan:" + quantity + ",totalprice:" + totalPrice + ",tax:" + tax + ",TPAT:" + totalPriceAfterTax);
        $("#TotalBeforeTax").val(totalPrice);
        $("#TotalTax").val($("#ItemTaxValue").val());
        $("#TotalAfterTax").val(totalPriceAfterTax);
        $("#GrandTotal").val(totalPriceAfterTax);
    });


    function removeTr(index) {
        if (counter > 1) {
            $('#tablerow' + index).remove();
            counter--;
        }
        return false;
    }

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }

    $("#btn_SaveDraft").click(function () {
        $("#DraftFlag").val('true');
        //var ab=$("#DraftFlag").val();
        //console.log("abc:" + ab);
    });

    /*Rahul : Add Javascript validation on 12 Oct 2022.*/
        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        }


    @*#AddItem
        var itemId = $("#Item_ID").val();
    $("#ItemDescription").empty();
    $.ajax({
        type: 'POST',
        url: `@Url.Action("GetitemDetails?id=${itemId}")`, // we are calling json method

        dataType: 'json',

        //data: { id: $("#Item_ID").val() },
        data: {},
        // here we are get value of selected item and passing same value
        //as inputto json method GetitemDetails.

        success: function (itemDescription) {
            debugger
            // states contains the JSON formatted list
            // of states passed from the controller
            //rahul added $(itemDescription).each(function ()
            $(itemDescription).each(function () {
                debugger
                $("#Item_ID").append($("<option></option>").val(this.ID).html(this.Item_Code));
            });

            //var description = JSON.stringify(itemDescription);

        },
        failure: function () {
            alert('Failed to retrieved item detals!');
        },
        error: function (ex) {
            alert('Failed to retrieve Item description.' + ex);
        }
    });*@

       @*var itemlist = '@ViewData["itemListForDD"]';
    console.log(itemlist.innerHTML);
    //Create and append the options
    for (let i = 0; i < itemlist.length; i++) {
        const option = document.createElement("option");
        option.value = itemlist[i];
        option.text = itemlist[i];
        selectList.appendChild(option);
    }*@
        @*for (let i = 0; i < nameItem.length; i++) {
        const row = document.createElement("tr");
        row.id = 'ItemID' + nameItem[i][0];
        const cell0 = row.insertCell(0);
        cell0.appendChild(selectList.cloneNode(true));
        $('#submissionTable').appendChild(row);
    }*@

</script>
