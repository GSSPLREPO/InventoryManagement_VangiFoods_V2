
@model InVanWebApp_BO.PurchaseOrderBO

@{
    ViewBag.Title = "AddPurchaseOrder";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@*@using (Html.BeginForm())*@
@using (Html.BeginForm("AddPurchaseOrder", "PurchaseOrder", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Purchase Order</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Tittle")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Tittle, new { @class = "form-control form-control-sm", placeholder = "Purchase Order For Vangi Foods", type = "text" })
                    @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PONumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PO Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PODate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date" })
                    @*@Html.TextBoxFor(model => model.DeliveryDate, new { @class = "form-control form-control-sm", type = "text" })*@
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.CurrencyID, (IEnumerable<SelectListItem>)ViewData["CurrencyName1"], "---Select---", new { @class = "form-control", id="CurrID" })
                    @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Vendor Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.VendorsID, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.VendorsID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Supplier Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.SupplierAddress, new { id = "SupplierAddress", @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "error mt-2 text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Amendment Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.Amendment, new { @class = "form-control form-control-sm", Value = "0", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Amendment, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Indent Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.IndentID, (IEnumerable<SelectListItem>)ViewData["IndentDD"], "---Select---", new { @class = "form-control listbox", onchange = "SelectedIndexChangedIndent($(this).val())" })
                    @Html.ValidationMessageFor(model => model.IndentID, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
                @*<div class="col-md-2 mb-1">
                        @Html.Label("Indent Summary")
                    </div>
                    <div class="col-md-4">
                            @Html.TextAreaFor(modal => modal.IndentDescription, new { @class = "form-control form-control-sm", @readonly = "readonly", id = "IndentDescription" })
                            @Html.ValidationMessageFor(model => model.IndentDescription, "", new { @class = "error mt-2 text-danger" })
                        </div>*@
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.IndentNumber, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle d-n d-none">Item Id</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">Required Quantity</th>
                                                <th class="sortStyle">Order Quantity</th>
                                                <th class="sortStyle">Balance Quantity</th>
                                                <th class="sortStyle">Units</th>
                                                <th class="sortStyle">Price (Per Unit)</th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">Tax</th>
                                                <th class="sortStyle">Total before tax</th>
                                                <th class="sortStyle d-none">Actual Balance Quantity</th>
                                            </tr>
                                        </thead>
                                        @*<tbody id="myTableBody">
                                                <tr id="tablerow">
                                                    <td>
                                                        @Html.TextBoxFor(model => model.Item_Code,  new { @class = "form-control", style = "height:30px;width:100px;"})
                                                    </td>
                                                    <td class="col-md-4 d-none">
                                                        @Html.TextBoxFor(model => model.Item_ID, new { @class = "form-control", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("ItemName", "", new { @class = "form-control", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.RequiredQuantity, new { @class = "form-control text-right", style = "height:30px;width:100px;", MaxLength = "8" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.ItemQuantity, new { @class = "form-control text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("ItemUnit", "", new { @class = "form-control", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("ItemUnitPrice", "", new { @class = "form-control text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("CurrencyName", "", new { @class = "form-control text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("ItemTaxValue", "", new { @class = "form-control text-right", style = "height:30px;width:80px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.TotalItemCost, "", new { @class = "form-control text-right", id = "ItemTotalPrice", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" enable="true" disabled>Delete</button>
                                                    </td>
                                                </tr>
                                            </tbody>*@
                                    </table>
                                    @*<br />
                                        <button type="button" class="btn btn-primary shadow" style="background: linear-gradient(85deg, #392c70, #6a005b);" id="AddItem">
                                            + Add Item
                                        </button>*@
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @*<input class="form-control text-right" id="TxtItemDetails" name="TxtItemDetails" value="" />*@
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-40 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />


                                <!-- Image preview -->
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                        <p style="padding-left: 5%;">(Note: Only .png,.jpeg and jpg are allowed!)</p>
                    </div>
                    <div class="card" h-50>
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Terms and Conditions<span style="color:red"> * </span></h4>
                            <hr />
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("T & C")
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.TermsAndConditionID, (IEnumerable<SelectListItem>)ViewData["TermsAndConditionID"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedTerms($(this).val())" })
                                    @Html.ValidationMessageFor(model => model.TermsAndConditionID, "", new { @class = "error mt-2 text-danger" })
                                </div>
                                @*<div class="col-md-4 d-none">
                                    @Html.TextBoxFor(model => model.Terms, new { @class = "form-control", Value = "", @readonly = "readonly" })
                                </div>*@
                            </div>
                            <br />
                            @*Rahul set ''T&C'' from top to here 02/12/2022.*@
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("Terms Description")
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.Terms, new { @class = "form-control", placeholder = "Term Description", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.Terms, "", new { @class = "error mt-2 text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<br /><br />
                        <div class="card h-50">
                            <div class="card-body">
                                <h4 class="card-title" style="color:darkcyan">Attach File<span style="color:red"> * </span></h4>

                                <hr />
                                <div class="form-group">
                                    <input type="file" name="Attachment" id="fileattach" class="file-drop-zone" required>
                                    <span id="sfileupload" class="text-danger"></span>
                                    <br /><br />
                                </div>
                            </div>
                        </div>*@

                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax"><b>Total (before tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalBeforeTax" name="TotalItemCost" value="" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total tax: </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalTax" name="TotalTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total (after tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalAfterTax" name="TotalAfterTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total: </b></label>
                                    <input class="form-control text-right form-control-sm" id="GrandTotal" name="GrandTotal" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Advanced To Pay: </b></label>
                                    <input class="form-control text-right form-control-sm" id="AdvancedPayment" maxlength="8" name="AdvancedPayment" value="0" onkeyup="ValidateAdvancePayment($(this).val(),id)" onkeypress="return isNumberKey(event)" />
                                    <span id="ValMsgAdvancePayment" style="display:none; color:red"></span>
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>

            <a href="@Url.Action("Index", "PurchaseOrder")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button type="submit" id="btn_SaveDraft" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right">Save Draft</button>
            <button type="submit" id="btnSave" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
        </div>
    </div>

    @Html.HiddenFor(model => model.DraftFlag, new { @Value = "false" })
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
@*<script src="~/Scripts/Script/AddPurchaseOrder.js"></script>*@
<script type="text/javascript">
    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        createJson();
    };
    //==========end===============

    //=====================Onchange of Terms and Condition===========================
    function SelectedIndexChangedTerms(id) {
        $.ajax({
            url: '/PurchaseOrder/GetTermsDescription',
            type: "POST",
            data: { id: id },
            success: function (result) {
                $('#Terms').val(result.TermDescription);
            },
            error: function (err) {
                alert('Not able to get the selected terms and condition value!');

            }
        });
    }

    //=============End==============

    //=====================Onchange of Indent description===========================
    function SelectedIndexChangedIndent(id) {

        //Check whether the currency dropdown is selected or not
        var CurrencyIDCheck = $('#CurrID').val();
        if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
            $('#CurrID').focus();
            document.getElementById('IndentID').selectedIndex = 0;
            return;
        }
        else
            document.getElementById('CurrID').setAttribute("disabled", "true");

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        var IdentNumber = $("#IndentID option:selected").text();
        $('#IndentNumber').val(IdentNumber);
        var CurrencyName = $("#CurrID option:selected").text();

        $.ajax({
            url: '/PurchaseOrder/GetIndentDescription',
            type: "POST",
            data: { id: id, tempCurrencyId: CurrencyIDCheck },
            success: function (result) {

                var table = document.getElementById('submissionTable');
                for (var j = 0; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);

                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);

                        if (i == 0) {
                            cell.innerHTML = result[j].ItemCode;
                            cell.setAttribute("id", "ItemCode_" + j);
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].ItemId;
                            cell.setAttribute("class", "d-none");
                            cell.setAttribute("id", "ItemID_" + j);
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemName;
                            cell.setAttribute("id", "ItemName_" + j);

                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].RequiredQuantity + " " + result[j].ItemUnit;
                            cell.setAttribute("id", "RequiredQuantity_" + j);

                        }
                        else if (i == 4) {
                            var t6 = document.createElement("input");
                            t6.id = "txtItemQty_" + j;
                            t6.removeAttribute("disabled", "false");
                            t6.removeAttribute("disabled", "true");
                            t6.setAttribute("maxlength", "8");
                            t6.setAttribute("onkeypress", "return isNumberKey(event)");

                            if (parseFloat(result[j].BalanceQuantity) == 0) {
                                t6.setAttribute("disabled", "true");
                            }
                            else {
                                t6.removeAttribute("disabled", "false");
                                t6.removeAttribute("disabled", "true");
                                t6.setAttribute("onchange", "OnChangeQty($(this).val(),id)");
                            }
                            //t6.setAttribute("type", "number");
                            t6.setAttribute("class", "form-control form-control-sm");
                            cell.appendChild(t6);
                        }
                        else if (i == 5) {
                            var t4 = document.createElement("input");
                            t4.id = "BalanceQuantity_" + j;
                            t4.setAttribute("value", result[j].BalanceQuantity);
                            t4.setAttribute("readonly", "readonly");
                            t4.setAttribute("class", "form-control form-control-sm");
                            cell.appendChild(t4);

                        }
                        else if (i == 6) {
                            cell.innerHTML = result[j].ItemUnit;
                            cell.setAttribute("id", "ItemUnit_" + j);
                        }
                        else if (i == 7) {
                            var t4 = document.createElement("input");
                            t4.id = "ItemUnitPrice_" + j;
                            t4.setAttribute("value", result[j].ItemUnitPrice);
                            t4.setAttribute("class", "form-control form-control-sm");
                            t4.setAttribute("maxlength", "8");
                            t4.setAttribute("onchange", "OnChangeUnitPrice($(this).val(),id)");
                            cell.appendChild(t4);
                        }

                        else if (i == 8) {
                            cell.innerHTML = CurrencyName
                            cell.setAttribute("id", "CurrencyName_" + j);
                        }
                        else if (i == 9) {
                            cell.innerHTML = result[j].ItemTax + " %";
                            cell.setAttribute("id", "ItemTax_" + j);
                        }
                        else if (i == 10) {
                            var t4 = document.createElement("input");
                            t4.id = "TotalItemCost_" + j;
                            t4.setAttribute("class", "form-control form-control-sm");
                            t4.setAttribute("readonly", "readonly");
                            t4.setAttribute("value", 0);
                            cell.appendChild(t4);
                        }
                        else if (i == 11) {
                            cell.innerHTML = result[j].BalanceQuantity;
                            cell.setAttribute("class", "d-none");
                            cell.setAttribute("id", "ActualBalanceQuantity_" + j);
                        }
                    }

                }
            },
            error: function (err) {
                alert('Not able to fetch indent item details!');

            }
        });
    }

    //=============End==============

    var TxtItemDetails = "";


    function OnChangeUnitPrice(value, id) {
        var rowNo = id.split('_')[1];
        var UnitPrice = parseFloat(value);
        if (UnitPrice <= 0 || value == null || value == '') {
            alert("Price cannot be negative, null or zero!");
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {

            //Set total price in item grid.
            var quantity = $("#txtItemQty_" + rowNo).val();
            var totalPrice = quantity * UnitPrice;
            totalPrice = Math.round(totalPrice);
            $("#TotalItemCost_" + rowNo).val(totalPrice);
            CalculateTotalBeforeTax();
            document.getElementById(id).setAttribute("style", "none");
        }
    }

    function SelectedIndexChanged(id) {
        var selectedOption, companyName;
        selectedOption = document.getElementById("VendorsID").selectedIndex;
        companyName = document.getElementById("VendorsID").options[selectedOption].innerText;
        document.getElementById("CompanyName").value = companyName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindCompanyAddress?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);
                var suplierAdd = result[0].SupplierAddress;
                $("#SupplierAddress").val(suplierAdd);
            }
        });
    }

    function SelectedIndexChangedLocation(id) {
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                ////debugger;
                //console.log(result);
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }

    function CalculateTotalBeforeTax() {
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 2;
        var total = 0;
        var totalTax = 0;
        totalTax = Math.round(totalTax);

        var i = 0;
        while (i <= length) {
            var temp = document.getElementById("TotalItemCost_" + i).value;
            var tempTotalTax = ((document.getElementById("ItemTax_" + i)).innerHTML).split(" %")[0];
            total = parseFloat(temp) + total;

            tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
            totalTax = parseFloat(tempTotalTax) + totalTax;

            i++;
        }
        total = Math.round(total);
        totalTax = Math.round(totalTax);

        $('#TotalBeforeTax').val(total);
        $('#TotalTax').val(totalTax.toFixed(2));
        var tempGrandTotal = total + totalTax;
        $('#TotalAfterTax').val(tempGrandTotal.toFixed(2));
        $('#GrandTotal').val(tempGrandTotal.toFixed(2));

        createJson();
    }

    function createJson() {
        //let res = [...document.getElementById("myTableBody").children].map(tr =>
        //    Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
        //        [el.name, el.value])));
        //console.log(res);
        //var TxtItemDetails = JSON.stringify(res);
        //console.log(TxtItemDetails);
        //$('#TxtItemDetails').val(TxtItemDetails);

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 0;
        TxtItemDetails = "[";
        for (i = 0; i < rowCount - 1; i++) {
            var ItemCode = (document.getElementById("ItemCode_" + i)).innerHTML;
            var ItemID = (document.getElementById("ItemID_" + i)).innerHTML;
            var ItemName = (document.getElementById("ItemName_" + i)).innerHTML;
            var RequiredQty = (document.getElementById("RequiredQuantity_" + i)).innerHTML.split(" ")[0];
            var Unit = (document.getElementById("ItemUnit_" + i)).innerHTML;
            var OrderQty = $("#txtItemQty_" + i).val();
            OrderQty = (OrderQty == null || OrderQty == '') ? 0 : OrderQty;
            var BalanceQty = $("#BalanceQuantity_" + i).val();
            var PricePerUnit = $("#ItemUnitPrice_" + i).val();
            PricePerUnit = (PricePerUnit == null || PricePerUnit == '') ? 0 : PricePerUnit;
            var Tax = (document.getElementById("ItemTax_" + i)).innerHTML.split(" ")[0];
            var TotalItemCost = $("#TotalItemCost_" + i).val();
            TotalItemCost = (TotalItemCost == null || TotalItemCost == '') ? 0 : TotalItemCost;


            TxtItemDetails = TxtItemDetails + "{\"ItemId\":" + ItemID + ", \"Item_Code\":\"" + ItemCode +
                "\", \"ItemName\": \"" + ItemName + "\", \"OrderQty\": " + OrderQty + ", \"ItemUnit\": \"" + Unit +
                "\", \"ItemUnitPrice\": " + PricePerUnit + ",\"ItemTaxValue\": " + Tax +
                ", \"TotalItemCost\": " + TotalItemCost + ", \"BalanceQty\": " + BalanceQty + ", \"RequiredQty\": " + RequiredQty;

            if (i == (rowCount - 2))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]"
        $('#TxtItemDetails').val(TxtItemDetails);
    }

    //======Common function which get called on change of Item ordered quantity.==========================

    function OnChangeQty(value, id) {
        var rowNo = id.split('_')[1];
        var quantity = value;
        var BalanceQty = $("#BalanceQuantity_" + rowNo).val();
        BalanceQty = parseFloat(BalanceQty);
        quantity = parseFloat(quantity);
        var RequiredQty = (document.getElementById("RequiredQuantity_" + rowNo)).innerHTML.split(" ")[0];
        RequiredQty = parseFloat(RequiredQty);

        if (quantity > BalanceQty) {
            alert("Order quantity cannot be greater then indent balance quantity!");
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {
            var tempBalanceQty = BalanceQty - quantity;
            if (quantity == 0) {
                var ActualBalQty = (document.getElementById("ActualBalanceQuantity_" + rowNo)).innerHTML.split(" ")[0];
                ActualBalQty = parseFloat(ActualBalQty);
                $("#BalanceQuantity_" + rowNo).val(ActualBalQty);
            }
            else {
                $("#BalanceQuantity_" + rowNo).val(tempBalanceQty);
            }

            var price = $("#ItemUnitPrice_" + rowNo).val();
            var tempTax = ((document.getElementById("ItemTax_" + rowNo)).innerHTML).split(" %");
            var tax = tempTax[0];

            //Set total price in item grid.
            var totalPrice = quantity * price;
            totalPrice = Math.round(totalPrice);
            $("#TotalItemCost_" + rowNo).val(totalPrice);

            var totalPriceAfterTax = (totalPrice) + ((totalPrice * tax) / 100);
            $("#TotalBeforeTax").val(totalPrice);

            var itemTaxVal = tax / 100 * totalPrice;
            itemTaxVal = Math.round(itemTaxVal);
            totalPriceAfterTax = Math.round(totalPriceAfterTax);

            $("#TotalTax").val(itemTaxVal);
            $("#TotalAfterTax").val(totalPriceAfterTax);
            $("#GrandTotal").val(totalPriceAfterTax);

            CalculateTotalBeforeTax();
            document.getElementById(id).setAttribute("style", "border-color:none;");
        }


    };

    //=======================End======================================================//

    function ValidateAdvancePayment(value, id) {
        var GrandTotal = parseFloat($("#GrandTotal").val());
        value = parseFloat(value);
        if (value > GrandTotal) {
            $("#ValMsgAdvancePayment").text("Advance payment cannot be greater than Grand total!");
            $('#ValMsgAdvancePayment').show();
            document.getElementById(id).focus();
            return;
        }
        else
            $('#ValMsgAdvancePayment').hide();

    }

    $("#btn_SaveDraft").click(function () {
        $("#DraftFlag").val('true');
        createJson();
    });

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }

    $('#uploadexcel').show();

    $('#uploadexcel').attr("disabled", true);

    $('#uploadexcel').click(function () {

        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {


            var fileUpload = $("#fileupload").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object
            //fileData.append('username', ‘Manas’);

            $.ajax({
                url: '/PurchaseOrder/UploadSignature',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (result) {
                    alert(result);
                    window.location.href = "/PurchaseOrder/AddPurchaseOrder";
                },
                error: function (err) {
                    alert('Format of data uploaded is incorrect.');

                }
            });
        } else {
            alert("FormData is not supported.");
        }
    });

    $('#fileupload').change(function () {
        var fileExtension = ['jpg', 'jpeg', 'png'];
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            // $('#uploadexcel').attr("disabled", true);
            alert("Only '.jpg','.jpeg','png' formats are allowed.");
            $('#fileupload').val('');
            //$('#<%= myLabel.ClientID %>').html("Only '.jpeg','.jpg' formats are allowed.");
        }
        else {
            $('#uploadexcel').attr("disabled", false);
        }
    });

    /*Rahul : Add Javascript validation on 12 Oct 2022.*/
    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
</script>

@Html.Raw(TempData["Success"])