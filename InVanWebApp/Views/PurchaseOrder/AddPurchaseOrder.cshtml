
@model InVanWebApp_BO.PurchaseOrderBO

@{
    ViewBag.Title = "AddPurchaseOrder";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@*@using (Html.BeginForm())*@
@using (Html.BeginForm("AddPurchaseOrder", "PurchaseOrder", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Purchase Order</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Tittle")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Tittle, new { @class = "form-control form-control-sm", placeholder = "Purchase Order For Vangi Foods", type = "text" })
                    @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PONumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PO Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PODate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date" })
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.CurrencyID, (IEnumerable<SelectListItem>)ViewData["CurrencyName"], "---Select---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Vendor Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.VendorsID, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.VendorsID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Supplier Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.SupplierAddress, new { id = "SupplierAddress", @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "error mt-2 text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Amendment Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.Amendment, new { @class = "form-control form-control-sm", Value = "0", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Amendment, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Indent Number")
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.IndentID, (IEnumerable<SelectListItem>)ViewData["IndentDD"], "---Select---", new { @class = "form-control listbox", onchange = "SelectedIndexChangedIndent($(this).val())" })
                    @Html.ValidationMessageFor(model => model.IndentID, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Indent Summary")
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(modal=>modal.IndentDescription, new { @class = "form-control form-control-sm", @readonly = "readonly", id = "IndentDescription" })
                    @Html.ValidationMessageFor(model => model.IndentDescription, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.IndentNumber, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">
                                                    Item Code
                                                </th>
                                                <th class="sortStyle d-n d-none">
                                                    Selected Item Code
                                                </th>
                                                <th class="sortStyle">
                                                    Item
                                                </th>
                                                <th class="sortStyle">
                                                    Quantity
                                                </th>
                                                <th class="sortStyle">
                                                    Units
                                                </th>
                                                <th class="sortStyle">
                                                    Price (Per Unit)
                                                </th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">
                                                    Tax
                                                </th>
                                                <th class="sortStyle">
                                                    Total before tax
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            <tr id="tablerow">
                                                <td>
                                                    @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control", style = "height:30px;width:100px;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                </td>
                                                <td class="col-md-4 d-none">
                                                    @Html.TextBoxFor(model => model.Item_Code, new { @class = "form-control", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemName", "", new { @class = "form-control", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.ItemQuantity, new { @class = "form-control text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnit", "", new { @class = "form-control", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnitPrice", "", new { @class = "form-control text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("CurrencyName", "", new { @class = "form-control text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemTaxValue", "", new { @class = "form-control text-right", style = "height:30px;width:80px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.TotalItemCost, "", new { @class = "form-control text-right", id = "ItemTotalPrice", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" enable="true" disabled>Delete</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <br />
                                    <button type="button" class="btn btn-primary shadow" style="background: linear-gradient(85deg, #392c70, #6a005b);" id="AddItem">
                                        + Add Item
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @*<input class="form-control text-right" id="TxtItemDetails" name="TxtItemDetails" value="" />*@
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-40 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />


                                <!-- Image preview -->
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                            <p style="padding-left: 5%;">(Note: Only .png,.jpeg and jpg are allowed!)</p>
                    </div>
                    <div class="card" h-50>
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Terms and Conditions<span style="color:red"> * </span></h4>
                            <hr />
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("T & C")
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.TermsAndConditionID, (IEnumerable<SelectListItem>)ViewData["TermsAndConditionID"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedTerms($(this).val())" })
                                    @Html.ValidationMessageFor(model => model.TermsAndConditionID, "", new { @class = "error mt-2 text-danger" })
                                </div>
                                <div class="col-md-4 d-none">
                                    @Html.TextBoxFor(model => model.Terms, new { @class = "form-control", Value = "", @readonly = "readonly" })
                                </div>
                            </div>
                            <br />
                            @*Rahul set ''T&C'' from top to here 02/12/2022.*@
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("Terms Description")
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.TermDescription, new { id = "TermDescription", @class = "form-control", placeholder = "Term Description", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.TermDescription, "", new { @class = "error mt-2 text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<br /><br />
                        <div class="card h-50">
                            <div class="card-body">
                                <h4 class="card-title" style="color:darkcyan">Attach File<span style="color:red"> * </span></h4>

                                <hr />
                                <div class="form-group">
                                    <input type="file" name="Attachment" id="fileattach" class="file-drop-zone" required>
                                    <span id="sfileupload" class="text-danger"></span>
                                    <br /><br />
                                </div>
                            </div>
                        </div>*@

                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax"><b>Total (before tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalBeforeTax" name="TotalItemCost" value="" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total tax: </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalTax" name="TotalTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total (after tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalAfterTax" name="TotalAfterTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total: </b></label>
                                    <input class="form-control text-right form-control-sm" id="GrandTotal" name="GrandTotal" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Advanced To Pay: </b></label>
                                    <input class="form-control text-right form-control-sm" id="AdvancedPayment" maxlength="8" name="AdvancedPayment" value="0" onkeypress="return isNumberKey(event)" />
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>

            <a href="@Url.Action("Index", "PurchaseOrder")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button type="submit" id="btn_SaveDraft" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right" formaction="SaveDraft">Save Draft</button>
            <button type="submit" id="btnSave" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
        </div>
    </div>

    @Html.HiddenFor(model => model.DraftFlag, new { @Value = "false" })
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>


<script type="text/javascript">


    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        createJson();
    };
    //==========end===============

    //===========OnChange of item if currency is not selected================
    $("#Item_ID").change(function () {
        // //debugger
        //getitemDetails();
        debugger
        var CurrencyIDCheck = $('#CurrencyID').val();
        console.log(CurrencyIDCheck);
        if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
            debugger
            $('#CurrencyID').focus();
            document.getElementById('Item_ID').selectedIndex = 0;
            return;
        }
        else { getitemDetails(); }

    });
    //==================end======================

    //=====================Onchange of Terms and Condition===========================
    function SelectedIndexChangedTerms(id) {
        $.ajax({
            url: '/PurchaseOrder/GetTermsDescription',
            type: "POST",
            data: { id: id },
            success: function (result) {
                $('#TermDescription').val(result.TermDescription);
            },
            error: function (err) {
                alert('Not able to get the selected terms and condition value!');

            }
        });
    }

    //=============End==============

    //=====================Onchange of Indent description===========================
    function SelectedIndexChangedIndent(id) {
        var IdentNumber = $("#IndentID option:selected").text();
        $('#IndentNumber').val(IdentNumber);
        $.ajax({
            url: '/PurchaseOrder/GetIndentDescription',
            type: "POST",
            data: { id: id },
            success: function (result) {
                var objLength = result.length;
                var finalResult = "";
                var i = 0;
                if (result != [] & result != null) {
                    while (i < objLength) {
                        var balanceQty = parseFloat(result[i].RequiredQuantity) - parseFloat(result[i].SentQuantity);
                        finalResult = finalResult + "Item: " + result[i].ItemName + ",  Required Quantity: " +
                            result[i].RequiredQuantity + " KG , Balance Quantity: " + balanceQty + " KG \n";

                        i++;
                    }
                }
                $('#IndentDescription').val(finalResult);
            },
            error: function (err) {
                alert('Not able to get the selected indent summary!');

            }
        });
    }

    //=============End==============

    var TxtItemDetails = "";

    $('#uploadexcel').show();
    $('#uploadexcel').attr("disabled", true);

    $('#uploadexcel').click(function () {

        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {


            var fileUpload = $("#fileupload").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object
            //fileData.append('username', ‘Manas’);

            $.ajax({
                url: '/PurchaseOrder/UploadSignature',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (result) {
                    alert(result);
                    window.location.href = "/PurchaseOrder/AddPurchaseOrder";
                },
                error: function (err) {
                    alert('Format of data uploaded is incorrect.');

                }
            });
        } else {
            alert("FormData is not supported.");
        }
    });

    $('#fileupload').change(function () {
        var fileExtension = ['jpg', 'jpeg', 'png'];
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            // $('#uploadexcel').attr("disabled", true);
            alert("Only '.jpg','.jpeg','png' formats are allowed.");
            $('#fileupload').val('');
            //$('#<%= myLabel.ClientID %>').html("Only '.jpeg','.jpg' formats are allowed.");
        }
        else {
            $('#uploadexcel').attr("disabled", false);
        }
    });

    //onchange = "SelectedIndexChanged($(this).val())"

    function SelectedIndexChangedItemList(id) {
        ////debugger
        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        document.getElementById("Item_Code").value = itemCode;
    }

    //function SelectedIndexChangedTerms(id) {
    //    ////debugger
    //    var selectedOptionTerms, termsName;
    //    selectedOptionTerms = document.getElementById("TermsAndConditionID").selectedIndex;
    //    termsName = document.getElementById("TermsAndConditionID").options[selectedOptionTerms].innerText;
    //    document.getElementById("Terms").value = termsName;
    //}

    function SelectedIndexChanged(id) {
        //alert(id);
        ////debugger
        var selectedOption,companyName;
        selectedOption = document.getElementById("VendorsID").selectedIndex;
        companyName = document.getElementById("VendorsID").options[selectedOption].innerText;
        document.getElementById("CompanyName").value = companyName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindCompanyAddress?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);
                var suplierAdd = result[0].SupplierAddress;
                $("#SupplierAddress").val(suplierAdd);
            }
        });
    }

    function SelectedIndexChangedLocation(id) {
        //alert(id);
        ////debugger
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                ////debugger;
                //console.log(result);
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }



        //Dropdownlist Selectedchange event
    function getitemDetails() {
                    $("#f").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',

                data: { id: $("#Item_ID").val(), currencyId: $("#CurrencyID").val() },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                success: function (itemDescription) {

                    var description = JSON.stringify(itemDescription);
                    $("#ItemName").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#ItemUnitPrice").val(itemDescription.UnitPrice);
                    $("#CurrencyName").val(itemDescription.IndianCurrencyValue);
                    $("#ItemTaxValue").val(itemDescription.ItemTaxValue);
                    $("#ItemQuantity").val('0');

                    $("#ItemTotalPrice").val('');
                    $("#TotalBeforeTax").val('');
                    $("#TotalTax").val('');
                    $("#TotalAfterTax").val('');
                    $("#GrandTotal").val('');
                    $("#AdvancedPAyment").val('');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


    }

    function getitemDetailsJSTbl(count) {
        console.log(count);
        var itemId = "ItemID_" + count;
        var currencyID = $('#CurrencyID').val();
        var selectedItemId = $("#" + itemId).val();
                    $.ajax({
                type: 'POST',
                //url: '@Url.Action("GetitemDetails?id='+${itemId}+'")', // we are calling json method
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',
                data: { id: selectedItemId, currencyId: currencyID },
                //Rahul 'currencyId' added from controller
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                        success: function (itemDescription) {
                            var description = JSON.stringify(itemDescription);
                            console.log(description);

                            $("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#itemPrice_" + count).val(itemDescription.UnitPrice);
                            $("#currencyName_" + count).val(itemDescription.IndianCurrencyValue); //Rahul added 03/12/2022.
                            $("#itemTax_" + count).val(itemDescription.ItemTaxValue);
                            $("#itemQuantity_" + count).val('0');
                            $("#totalItemCost_" + count).val('0');

                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


       // $("#itemDescription" + count).val(count.Item_Name);

    }

    function calcTax(cnt, e) {
        alert("calcTax");
        //debugger;
        if (isNumberKey(e)) {
            //debugger;
        var itemQuantity = $("#itemQuantity_" + cnt).val();
        console.log(itemQuantity);
        var itemPrice = $("#itemPrice_" + cnt).val();
        //var tempTax = $("#itemTax_").val().split("%");
        var tax = $("#itemTax_").val();
        //var tax = tempTax[0];

        //Set total price in item grid.
        var totalPrice = itemQuantity * itemPrice;
        $("#totalItemCost_" + cnt).val(totalPrice);
        //Set values in Bill
        var totalPriceAfterTax = (totalPrice) + ((totalPrice * tax) / 100);
        //console.log("quan:" + quantity + ",totalprice:" + totalPrice + ",tax:" + tax + ",TPAT:" + totalPriceAfterTax);
        $("#totalBeforeTax_").val(totalPrice);
        $("#totalTax_").val($("#ItemTax").val());
        $("#rotalAfterTax_").val(totalPriceAfterTax);
        $("#grandTotal_").val(totalPriceAfterTax);
        }
    }

    var counter = 1;

    $("#AddItem").click(function () {
        ////debugger
        //'<select id="ItemID" class="form-control" name="ItemID[' + counter + ']" required="required" /><optio >--Select Item--</option></select>' +
        //var nameItem = "Item_ID['" + counter + "']";
        var itemId = "ItemID_"+counter;
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var itemQuantity = "itemQuantity_" + counter;
        var itemUnit = "itemUnit_" + counter;
        var itemPrice = "itemPrice_" + counter;
        var currencyName = "currencyName_" + counter;
        var itemTax = "itemTax_" + counter;
        var totalItemCost = "totalItemCost_" + counter;
        $('<tr id="tablerow' + counter + '">' + '<td>'+
            //'<select id="ItemID" class="form-control" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" required="required" /></select>' +
            //'<input type="text" id="ItemID" class="form-control" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" value="" required="required" />' +
            '<select id="'+itemId+'" onchange="getitemDetailsJSTbl('+counter+')"; class="form-control" data-val="true" data-val-number="The field Item_ID must be a number." name="'+itemId+' " style="height:30px;width:100px;" aria-describedby="Item_ID-error" aria-invalid="false">'+$('#Item_ID').html()+'</select>' +
            '</td>' +
            '<td class="d-none">' +
            '<input type="text" id="' + itemCode + '" class="form-control" style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemDescription + '" class="form-control" style = "height:30px;width:200px;" name="' + itemDescription + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /*'<input type="text" id="' + itemQuantity + '" onkeyup="calcTax(' + counter + ',' + this.value + ')"; class="form-control" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +*/
            '<input type="text" id="' + itemQuantity + '" onchange="CalItemTotalPrice($(this).val(),id)"; class="form-control text-right" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control" style = "height:30px;width:100px;" name="' + itemUnit + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemPrice + '" class="form-control text-right" style = "height:30px;width:100px;" name="' + itemPrice + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            //Rahul added 03/12/2022.
            '<input type="text" id="' + currencyName + '" class="form-control text-right" style = "height:30px;width:100px;" name="' + currencyName + '"readonly = "readonly" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemTax + '" class="form-control text-right" style = "height:30px;width:80px;" name="' + itemTax+ ' "readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + totalItemCost + '" class="form-control text-right" style = "height:30px;width:200px;" name="' + totalItemCost + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');

        counter++;
        return false;
    });



    function CalItemTotalPrice(value, id) {
        var temp_rowNo = id.split('_');
        var rowNo = temp_rowNo[1];
        value = parseFloat(value);
        if (value != 0) {
            var price = $("#itemPrice_" + rowNo).val();
            price = parseFloat(price);
            var totalPrice = price * value;
            totalPrice = Math.round(totalPrice);
            $("#totalItemCost_" + rowNo).val(totalPrice);
        }

        CalculateTotalBeforeTax();
    }

    function CalculateTotalBeforeTax() {
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 2;
        var total = parseFloat(ItemTotalPrice.value);
        total = Math.round(total);
        var totalTax = (parseFloat(ItemTaxValue.value) / 100) * total;
        totalTax = Math.round(totalTax);

        var i = 1;
        while (i <= length) {
            //This if -else condition is written for: If user delete any other row of the dynamic table.

            if ($('#tablerow' + i).length) {
                var temp = document.getElementById("totalItemCost_" + i).value;
                var tempTotalTax = document.getElementById("itemTax_" + i).value;
                total = parseFloat(temp) + total;

                tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
                totalTax = parseFloat(tempTotalTax) + totalTax;
                i++;
            }
            else {
                i++;
                length++;
            }
        }
        $('#TotalBeforeTax').val(total);
        $('#TotalTax').val(totalTax.toFixed(2));
        var tempGrandTotal = total + totalTax;
        $('#TotalAfterTax').val(tempGrandTotal.toFixed(2));
        $('#GrandTotal').val(tempGrandTotal.toFixed(2));

        createJson();
    }

    function createJson() {
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        console.log(res);
        var TxtItemDetails = JSON.stringify(res);
        console.log(TxtItemDetails);
        $('#TxtItemDetails').val(TxtItemDetails);
    }

    $("#ItemQuantity").change(function () {
        var quantity = $("#ItemQuantity").val();
        var price = $("#ItemUnitPrice").val();
        var tempTax = $("#ItemTaxValue").val().split("%")
        var tax = tempTax[0];

        //Set total price in item grid.
        var totalPrice = quantity * price;
        totalPrice = Math.round(totalPrice);
        $("#ItemTotalPrice").val(totalPrice);

        //Set values in Bill
        var totalPriceAfterTax = (totalPrice) + ((totalPrice * tax) / 100);
        $("#TotalBeforeTax").val(totalPrice);

        var itemTaxVal = tax / 100 * totalPrice;
        itemTaxVal = Math.round(itemTaxVal);
        totalPriceAfterTax = Math.round(totalPriceAfterTax);

        $("#TotalTax").val(itemTaxVal);
        $("#TotalAfterTax").val(totalPriceAfterTax);
        $("#GrandTotal").val(totalPriceAfterTax);
    });


    function removeTr(index) {
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        //console.log("Length: " + length + counter);
        if (counter > 1 & length == index) {
            $('#tablerow' + index).remove();
            counter--;
        }
        else {
            $('#tablerow' + index).remove();
        }
        CalculateTotalBeforeTax();
        return false;
    }

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }

    $("#btn_SaveDraft").click(function () {
        $("#DraftFlag").val('true');
    });

    /*Rahul : Add Javascript validation on 12 Oct 2022.*/
    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

</script>
