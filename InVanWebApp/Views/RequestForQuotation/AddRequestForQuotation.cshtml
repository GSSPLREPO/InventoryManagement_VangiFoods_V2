@model InVanWebApp_BO.RequestForQuotationBO

@{
    ViewBag.Title = "AddRequestForQuotation";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddRequestForQuotation", "RequestForQuotation", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Request For Quotation</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("RFQ Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.RFQNO, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.RFQNO, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @id = "Date", @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("Currency", (IEnumerable<SelectListItem>)ViewData["CurrencyName"], "---Select---", new { @class = "form-control form-control-sm", id = "CurrencyID" })
                    @Html.HiddenFor(model => model.CurrencyID, new { id = "tempCurrencyID" })
                    @Html.HiddenFor(model => model.CurrencyName)
                    @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CurrencyName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "DeliveryDate", @class = "form-control form-control-sm date1", type = "date" })
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Bidding Start Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.BiddingStartDate, "{0:yyyy-MM-dd}", new { @id = "BiddingStartDate", @class = "form-control form-control-sm date1", type = "date" })
                    @Html.ValidationMessageFor(model => model.BiddingStartDate, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Bidding End Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.BiddingEndDate, "{0:yyyy-MM-dd}", new { @id = "BiddingEndDate", @class = "form-control form-control-sm date1", type = "date" })
                    @Html.ValidationMessageFor(model => model.BiddingEndDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control form-control-sm", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                @Html.Label("Vendor Name")
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.DropDownListFor(model => model.CompanyName, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control form-control-sm js-example-basic-multiple", multiple = "multiple", onchange = "SelectedIndexChanged($(this).val())" })
                                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "error mt-2 text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.TextBoxFor(model => model.VendorIDs, new { style = "display:none" })
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Indent Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.IndentID, (IEnumerable<SelectListItem>)ViewData["IndentDD"], "---Select---", new { @class = "form-control listbox", onchange = "SelectedIndexChangedIndent($(this).val())" })
                    @Html.ValidationMessageFor(model => model.IndentID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.IndentNumber, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>

            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="d-none"></th>
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">Quantity<span style="color:red">*</span></th>
                                                <th class="sortStyle">Units</th>
                                                <th class="sortStyle">Delivery Date<span style="color:red">*</span></th>
                                                <th class="sortStyle">HSN Code</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <br />
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", onchange = "createJson()" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-100 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature<span style="color:red"> * </span></h4>

                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />

                                <!-- Image preview -->
                                @*<span style="color:green">@ViewBag.Message</span>*@
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">

                </div>
            </div>

            <a href="@Url.Action("Index", "RequestForQuotation")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>

            <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>

        </div>
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>


<script type="text/javascript">

    $(document).ready(function () {
        //alert('multiple called!')
        $('.js-example-basic-multiple').select2();
        deliveryDate();
        biddingStartDate();
        biddingEndDate();
    });

    //---BiddingStartDate todaysDate start ------
    function deliveryDate() {
        debugger
        const d = new Date();
        d.setYear(d.getFullYear());
        var id = "DeliveryDate";
        var tempDate = d.toISOString().split("T")[0];
        $("#" + id).val(tempDate);
        document.getElementById(id).setAttribute("min", tempDate.toString());
    }
    //---DeliveryDate todaysDate end ------

    //---BiddingStartDate todaysDate start ------
    function biddingStartDate() {
        debugger
        const d = new Date();
        d.setYear(d.getFullYear());
        var id = "BiddingStartDate";
        var tempDate = d.toISOString().split("T")[0];
        $("#" + id).val(tempDate);
        document.getElementById(id).setAttribute("min", tempDate.toString());
    }
    //---BiddingStartDate todaysDate end ------ 

    //---BiddingEndDate todaysDate start ------
    function biddingEndDate() {
        debugger 
        const d = new Date();
        d.setYear(d.getFullYear());                
        var id = "BiddingEndDate";
            var tempDate = d.toISOString().split("T")[0];
            $("#" + id).val(tempDate);
            document.getElementById(id).setAttribute("min", tempDate.toString());            
    }
    //---BiddingEndDate todaysDate end ------

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    var TxtItemDetails = "";

    function SaveBtnClick() {
        var CurrencyName = $("#CurrencyID option:selected").text();
        $("#CurrencyName").val(CurrencyName);
        createJson();
    };
    //==========end===============

    //=====================Onchange of Indent description===========================
    function SelectedIndexChangedIndent(id) {

        //Check whether the currency dropdown is selected or not

        var CurrencyIDCheck = $('#CurrencyID').val();
        if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
            $('#CurrencyID').focus();
            document.getElementById('IndentID').selectedIndex = 0;
            return;
        }
        else {
            $("#tempCurrencyID").val(CurrencyIDCheck);
            $("#CurrencyID").prop("disabled", "true");
        }

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        var IdentNumber = $("#IndentID option:selected").text();
        $('#IndentNumber').val(IdentNumber);
        var CurrencyName = $("#CurrencyID option:selected").text();

        $.ajax({
            url: '/RequestForQuotation/GetIndentDescription',
            type: "POST",
            data: { id: id, tempCurrencyId: CurrencyIDCheck },
            success: function (result) {

                var table = document.getElementById('submissionTable');
                for (var j = 0; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);

                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);

                        if(i == 0) {
                            cell.innerHTML = result[j].ItemId;
                            cell.setAttribute("class", "d-none");
                            cell.setAttribute("id", "ItemID_" + j);                            
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].ItemCode;
                            cell.setAttribute("id", "ItemCode_" + j);                            
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemName;
                            cell.setAttribute("id", "ItemName_" + j);                            
                        }
                        else if (i == 3) {                           
                            var t4 = document.createElement("input");
                            t4.id = "RequiredQuantity_" + j;
                            t4.setAttribute("type", "text");
                            t4.setAttribute("maxlength", "8");
                            t4.setAttribute("value", 0);
                            t4.setAttribute("class", "form-control form-control-sm text-right");
                            t4.setAttribute("onmouseleave", "OnChangeQuantity($(this).val(),id)"); //or use onmouseleave event
                            cell.appendChild(t4);
                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].ItemUnit;
                            cell.setAttribute("id", "ItemUnit_" + j);                            
                        }
                        else if (i == 5) {
                            var t4 = document.createElement("input");
                            t4.id = "DeliveryDate_" + j;
                            t4.setAttribute("type", "date");                            
                            t4.setAttribute("class", "form-control form-control-sm");
                            cell.appendChild(t4);
                        }
                        else if (i == 6) {
                            var t4 = document.createElement("input");
                            t4.id = "HSNCode_" + j;
                            t4.setAttribute("class", "form-control form-control-sm");
                            t4.setAttribute("type", "text");                            
                            cell.appendChild(t4);
                        }
                    }

                }
                todaysDate(rowCount);
            },
            error: function (err) {
                alert('Not able to fetch indent item details!');
            }
        });
    }
    //=====================Onchange of Indent description end===========================

    //---OnChangeQuantity start ------
    function OnChangeQuantity(value, id) {
        debugger
        var rowNo = id.split('_')[1];
        var RequiredQuantity = parseFloat(value);
        if (RequiredQuantity <= 0 || value == null || value == '') {
            alert("Quantity cannot be negative, null or zero!"); 
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {
            //Set Required Quantity in item grid.
            $("#RequiredQuantity_" + rowNo).val();
            document.getElementById(id).setAttribute("style", "none");
        }
    }
    //---OnChangeQuantity end ------

    //---DeliveryDate todaysDate start ------
    function todaysDate(rowCount) {
        //debugger 
        const d = new Date();
        d.setYear(d.getFullYear());
        var i = 0;
        while (i < rowCount) {
            var id = "DeliveryDate_" + i;
            var tempDate = d.toISOString().split("T")[0];
            $("#" + id).val(tempDate);
            document.getElementById(id).setAttribute("min", tempDate.toString()); 
            i++;
        }
    }
    //---DeliveryDate todaysDate end ------

//=============End==============

    function SelectedIndexChanged(id) {
        //alert(id);
        debugger
        var selectedOption;
        selectedOption = document.getElementById("CompanyName").selectedIndex;
        document.getElementById("VendorIDs").value = id;
        //console.log(id);
    }

    function SelectedIndexChangedLocation(id) {
        //alert(id);
        //debugger
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;

        $.ajax({
            type: "POST",
            url: `/RequestForQuotation/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                ////debugger;
                //console.log(result);
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }

    $('#uploadexcel').show();
    $('#uploadexcel').attr("disabled", true);

    $('#uploadexcel').click(function () {

        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {

            var fileUpload = $("#fileupload").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object
            //fileData.append('username', ‘Manas’);

            $.ajax({
                url: '/RequestForQuotation/UploadSignature',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (result) {
                    alert(result);
                    window.location.href = "/RequestForQuotation/AddRequestForQuotation";
                },
                error: function (err) {
                    alert('Format of data uploaded is incorrect.');

                }
            });
        } else {
            alert("FormData is not supported.");
        }
    });

    $('#fileupload').change(function () {
        var fileExtension = ['jpg', 'jpeg', 'png'];
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            // $('#uploadexcel').attr("disabled", true);
            alert("Only '.jpg','.jpeg','png' formats are allowed.");
            $('#fileupload').val('');
            //$('#<%= myLabel.ClientID %>').html("Only '.jpeg','.jpg' formats are allowed.");
        }
        else {
            $('#uploadexcel').attr("disabled", false);
        }
    });
    
    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }

    /*Rahul : Add Javascript validation on 12 Oct 2022.*/
        function isNumberKey(evt) {
            var keycode = (evt.which) ? evt.which : evt.keyCode;
            if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
                return false;
            }
            else {
                var parts = evt.srcElement.value.split('.');
                if (parts.length > 1 && keycode == 46)
                    return false;
                else
                    return true;
            }
            return true;
        }

    //==================createJson Set value in txtItemDetails onCick of Save/Update button======--------
    function createJson() {
        debugger
        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 0;
        TxtItemDetails = "[";
        for (i = 0; i < rowCount - 1; i++) {
            var ItemID = (document.getElementById("ItemID_" + i)).innerHTML;
            var ItemCode = (document.getElementById("ItemCode_" + i)).innerHTML;
            var ItemName = (document.getElementById("ItemName_" + i)).innerHTML;
            //var RequiredQty = (document.getElementById("RequiredQuantity_" + i)).innerHTML.split(" ")[0];
            var RequiredQty = $("#RequiredQuantity_" + i).val();
            RequiredQty = (RequiredQty == null || RequiredQty == '') ? 0 : RequiredQty;
            var Unit = (document.getElementById("ItemUnit_" + i)).innerHTML;
            var DeliveryDate = $("#DeliveryDate_" + i).val();
            var HSNCode = $("#HSNCode_" + i).val();

            TxtItemDetails = TxtItemDetails + "{\"ItemId\":" + ItemID + ", \"Item_Code\":\"" + ItemCode + 
                "\", \"ItemName\": \"" + ItemName + "\", \"RequiredQty\": " + RequiredQty + 
                ", \"ItemUnit\": \"" + Unit + "\", \"DeliveryDate\": \"" + DeliveryDate + "\", \"HSNCode\": \"" + HSNCode +"\"";

            if (i == (rowCount - 2))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]"   
        console.log(TxtItemDetails);
        $('#TxtItemDetails').val(TxtItemDetails);
    }
    //==================createJson Set value in txtItemDetails onCick of Save/Update button end======--------

</script>

@Html.Raw(TempData["Success"])

