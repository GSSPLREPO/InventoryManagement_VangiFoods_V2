@model InVanWebApp_BO.SILOCCPBO

@{ ViewBag.Title = "EditSILOCCP";
    Layout = "~/Views/Shared/MainMaster.cshtml"; }

@using (Html.BeginForm())
{
@Html.AntiForgeryToken()
                <div class="card">
                    <div class="card-body">
                        <h4>Edit SILO CCP</h4>
                        <hr />
                        @Html.ValidationSummary(true)
                        @Html.HiddenFor(model => model.ID)
                    <div class="row">
                        <div class="col-md-2">
                            @Html.Label("Date")
                            <span style="color:red">*</span>
                        </div>
                        <div class="col-md-4">
                            @*//Rahul added '@readonly = "readonly"' 12-06-2023.*@
                            @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd"), @max = DateTime.Today.ToString("yyyy-MM-dd"), @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
                        </div>
                        <div class="col-md-2">
                            @Html.Label("Time")
                        </div>
                        @*//Rahul updated 'Time' to 'HoldingSiloReceivingTime' 21-06-2023.*@ 
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.HoldingSiloReceivingTime, new { @class = "form-control form-control-sm", type = "time" })
                        </div>
                    </div>

                        <div class="row">
                            <div class="col-md-2">
                                @Html.Label("Product Name")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @*//Rahul added '@readonly = "readonly"' 12-06-2023.*@
                                @Html.DropDownListFor(model => model.ItemId, (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedItemList($(this).val())", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.ItemId, "", new { @class = "error mt-2 text-danger" })
                            </div>
                            <div class="col-md-2 mb-1">
                                @Html.Label("Lot No")
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-4">
                                @*//Rahul added '@readonly = "readonly"' 12-06-2023.*@
                                @Html.TextBoxFor(model => model.LotNumber, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNum(event);", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2 mb-1">
                                @Html.Label("Raw Batches No")
                            </div>
                            <div class="col-md-4">
                                @*//Rahul added '@readonly = "readonly"' 12-06-2023.*@
                                @Html.TextBoxFor(model => model.RawBatchesNo, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNum(event);", @readonly = "readonly" })
                            </div>
                            <div class="col-md-2">
                                @Html.Label("Weight (KG)")
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNum(event);" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2">
                                @Html.Label("Temperture (°C)")
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.Temperature, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNum(event);" })
                            </div>

                            <div class="col-md-2 mb-1">
                                @Html.Label("Pressure (BAR)")
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.Pressure, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNum(event);" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-2">
                                @Html.Label("Remarks")
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", maxlength = "95", Title = "Remarks Will be Allow 100 Charachter" })
                            </div>
                        </div>
                        <br />
                        <div class="col d-flex justify-content-end" style="margin-left: auto;">
                            <div class="row">
                                <div class="col">
                                    <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Update</button>
                                    @*<button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;">Save</button>*@
                                </div>
                                <div class="col">
                                    <a href="@Url.Action("Index", "SILOCCP")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                                        Back To List
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<link href="~/Theme/MainContent/css/CustomDropdown.css" rel="stylesheet" />

<script type="text/javascript">

    //Vedant added 'function createCustomDropdown()' 04-07-2023. start
    $(document).ready(function () {
        createCustomDropdown_ItemId();
    });

    function createCustomDropdown_ItemId() {
        $('select#ItemId').each(function (i, select) {
            if (!$(this).next().hasClass('dropdown-select')) {
                $('#ItemId').removeClass('form-control');
                $(this).after('<div id="divItemId" class="dropdown-select wide d-flex align-items-center' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divItemId.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueItemId" autocomplete="off" onkeyup="filterItemId()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterItemId() {
        var valThis = $('#txtSearchValueItemId').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    // Event listeners

    // Open/close
    $(document).on('click', '.dropdown-select', function (event) {
        if ($(event.target).hasClass('dd-searchbox')) {
            return;
        }
        $('.dropdown-select').not($(this)).removeClass('open');
        $(this).toggleClass('open');
        if ($(this).hasClass('open')) {
            $(this).find('.option').attr('tabindex', 0);
            $(this).find('.selected').focus();
        } else {
            $(this).find('.option').removeAttr('tabindex');
            $(this).focus();
        }
    });
    // Close when clicking outside
    $(document).on('click', function (event) {
        if ($(event.target).closest('.dropdown-select').length === 0) {
            $('.dropdown-select').removeClass('open');
            $('.dropdown-select .option').removeAttr('tabindex');
        }
        event.stopPropagation();
    });
    // Option click
    $(document).on('click', '.dropdown-select .option', function (event) {
        $(this).closest('.list').find('.selected').removeClass('selected');
        $(this).addClass('selected');
        var text = $(this).data('display-text') || $(this).text();
        $(this).closest('.dropdown-select').find('.current').text(text);
        $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
    });

    // Keyboard events
    $(document).on('keydown', '.dropdown-select', function (event) {
        var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
        // Space or Enter
        //if (event.keyCode == 32 || event.keyCode == 13) {
        if (event.keyCode == 13) {
            if ($(this).hasClass('open')) {
                focused_option.trigger('click');
            } else {
                $(this).trigger('click');
            }
            return false;
            // Down
        } else if (event.keyCode == 40) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                focused_option.next().focus();
            }
            return false;
            // Up
        } else if (event.keyCode == 38) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
                focused_option.prev().focus();
            }
            return false;
            // Esc
        } else if (event.keyCode == 27) {
            if ($(this).hasClass('open')) {
                $(this).trigger('click');
            }
            return false;
        }
    });
    //Vedant added 'function createCustomDropdown()' 04-07-2023. end


    function IsNum(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }

</script>
