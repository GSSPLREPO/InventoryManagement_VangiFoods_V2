@model InVanWebApp_BO.SalesOrderBO
@{
    ViewBag.Title = "AddSalesOrder";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddSalesOrder", "SalesOrder", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Sales Order</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Work Order Type")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.WorkOrderType, new List<SelectListItem> {
                        new SelectListItem{ Value="", Text="--Select--"},
                        new SelectListItem{ Text="Domestic", Value="Domestic"},
                        new SelectListItem{ Text="Export", Value="Export"},
                        new SelectListItem{ Text="JobWork", Value="JobWork"}
                    }, new { @class = "form-control form-control-sm", type = "text", onchange = "OnChangeWorkType()" })
                    @Html.ValidationMessageFor(model => model.WorkOrderType, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Sales Order Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.SONo, new { @class = "form-control form-control-sm", type = "text", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.SONo, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Work Order Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WorkOrderNo, new { @class = "form-control form-control-sm", type = "text", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.WorkOrderNo, "", new { id = "WorkOrderNoErr", @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-6"></div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("SO Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.SODate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.SODate, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @*@Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd") })*@
                    @*@Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd"), @max = DateTime.Now.ToString("yyyy-12-31") })*@
                    @*Rahul set 'DeliveryDate' ', @max = DateTime.Now.AddYears(1).ToString("yyyy-MM-dd")' 19/05/2023.*@
                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @min = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd"), @max = DateTime.Now.AddYears(1).ToString("yyyy-MM-dd") })
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model=>model.CurrencyID, (IEnumerable<SelectListItem>)ViewData["CurrencyList"], "---Select---", new { @class = "form-control DropdownRegular", id = "CurrencyID" })
                    @Html.HiddenFor(model => model.CurrencyID, new { id = "tempCurrencyID" })
                    @Html.HiddenFor(model => model.CurrencyName)
                    @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })

                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Inquiry Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.InquiryID, (IEnumerable<SelectListItem>)ViewData["InquiryDD"], "---Select---", new { @class = "form-control listbox", onchange = "SelectedIndexChangedInquiry($(this).val())" })
                    @Html.ValidationMessageFor(model => model.InquiryID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.InquiryNumber, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-4 d-none">
                    @*@Html.TextBox("CurrencyID","1",new { id= "CurrencyID" })*@
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Client Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ClientID, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Supplier Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.SupplierAddress, new { id = "SupplierAddress", @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { id = "SupplierAddressErr", @class = "error mt-2 text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { id = "DeliveryAddressErr", @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Amendment Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.Amendment, new { @class = "form-control form-control-sm", Value = "0", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Amendment, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            
            <br />
            
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                    <h4 class="card-title" style="color:darkcyan">Item Details</h4><hr />
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle d-n d-none">Item Id</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">Ordered Quantity</th>
                                                <th class="sortStyle">Price (Per Unit)</th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">Tax</th>
                                                <th class="sortStyle">Total before tax</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @*<input class="form-control text-right" id="TxtItemDetails" name="TxtItemDetails" value="" />*@
                            @Html.TextBoxFor(model => model.txtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-50 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />
                                <!-- Image preview -->
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                        <p style="padding-left: 5%;color:red;">(Note: Only .png,.jpeg and jpg are allowed!)</p>
                    </div>
                    <div class="card" h-50>
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Terms and Conditions<span style="color:red"> * </span></h4>
                            <hr />
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("T & C")
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.TermsAndConditionID, (IEnumerable<SelectListItem>)ViewData["Terms_dd"], "---Select---", new { @class = "form-control DropdownRegular", onchange = "SelectedIndexChangedTerms($(this).val())" })
                                    @Html.ValidationMessageFor(model => model.TermsAndConditionID, "", new { @class = "error mt-2 text-danger" })
                                </div>
                            </div>
                            <br />
                            @*Rahul set ''T&C'' from top to here 02/12/2022.*@
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("Terms Description")
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.Terms, new { @class = "form-control", placeholder = "Term Description", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.Terms, "", new { @class = "error mt-2 text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax"><b>Total (before tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalBeforeTax" name="TotalItemCost" value="" readonly="readonly" />
                                </div>
                                @*//Rahul added for 'VAN-1203' 18-05-2023.*@
                                <div class="row mb-2">
                                    <label id="lblDiscountPercentage"><b>Discount (%): </b></label>
                                    <input class="form-control text-right form-control-sm" id="DiscountPercentage" name="DiscountPercentage" value="0" onkeypress="return isNumberKey(event,id)" onchange="CalculateTotalBeforeTax()" onkeyup="this.value = minmax(this.value, 0, 100)" maxlength="8" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total tax (on items): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalTax" name="TotalTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Other Tax: </b></label>
                                    <input class="form-control text-right form-control-sm" id="OtherTax" maxlength="8" name="OtherTax" value="0" onkeypress="return isNumberKey(event,id)" onchange="CalculateTotalBeforeTax()" />  @*//Rahul added 'isNumberKey id' for 'DiscountVal' for 'VAN-1203' 18-05-2023.*@
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total (after tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalAfterTax" name="TotalAfterTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total: </b></label>
                                    <input class="form-control text-right form-control-sm" id="GrandTotal" name="GrandTotal" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Advanced To Pay: </b></label>
                                    <input class="form-control text-right form-control-sm" id="AdvancedPayment" maxlength="8" name="AdvancedPayment" value="0" onkeyup="ValidateAdvancePayment($(this).val(),id)" onkeypress="return isNumberKey(event,id)" />@*//Rahul added 'isNumberKey id' for 'DiscountVal' for 'VAN-1203' 18-05-2023.*@
                                    <span id="ValMsgAdvancePayment" style="display:none; color:red"></span>
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col-3">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col-4">
                        <button type="submit" id="btn_SaveDraft" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right">Save Draft</button>
                    </div>
                    <div class="col-4">
                        <a href="@Url.Action("Index", "SalesOrder")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @Html.HiddenFor(model => model.DraftFlag, new { @Value = "false" })
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<link href="~/Theme/MainContent/css/CustomDropdown.css" rel="stylesheet" />

@Html.Raw(TempData["Success"])
<script>

    $(document).ready(function () {
        create_custom_dropdowns_WorkOrderType();
        create_custom_dropdowns_InquiryID();
        create_custom_dropdowns_LocationId();
        create_custom_dropdowns_ClientID();
    });

    function create_custom_dropdowns_WorkOrderType() {
        $('select#WorkOrderType').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#WorkOrderType').removeClass('form-control');
                $(this).after('<div id="divWorkOrderType" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divWorkOrderType.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueWorkOrderType" autocomplete="off" onkeyup="filterWorkOrderType()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterWorkOrderType() {
        var valThis = $('#txtSearchValueWorkOrderType').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    function create_custom_dropdowns_InquiryID() {
        $('select#InquiryID').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#InquiryID').removeClass('form-control');
                $(this).after('<div id="divInquiryID" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divInquiryID.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueInquiryID" autocomplete="off" onkeyup="filterInquiryID()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterInquiryID() {
        var valThis = $('#txtSearchValueInquiryID').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    function create_custom_dropdowns_LocationId() {
        $('select#LocationId').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#LocationId').removeClass('form-control');
                $(this).after('<div id="divLocationId" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divLocationId.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueLocationId" autocomplete="off" onkeyup="filterLocationId()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterLocationId() {
        var valThis = $('#txtSearchValueLocationId').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    function create_custom_dropdowns_ClientID() {
        $('select#ClientID').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#ClientID').removeClass('form-control');
                $(this).after('<div id="divClientID" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divClientID.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueClientID" autocomplete="off" onkeyup="filterClientID()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterClientID() {
        var valThis = $('#txtSearchValueClientID').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };


    // Event listeners

    // Open/close
    $(document).on('click', '.dropdown-select', function (event) {
        if ($(event.target).hasClass('dd-searchbox')) {
            return;
        }
        $('.dropdown-select').not($(this)).removeClass('open');
        $(this).toggleClass('open');
        if ($(this).hasClass('open')) {
            $(this).find('.option').attr('tabindex', 0);
            $(this).find('.selected').focus();
        } else {
            $(this).find('.option').removeAttr('tabindex');
            $(this).focus();
        }
    });

    // Close when clicking outside
    $(document).on('click', function (event) {
        if ($(event.target).closest('.dropdown-select').length === 0) {
            $('.dropdown-select').removeClass('open');
            $('.dropdown-select .option').removeAttr('tabindex');
        }
        event.stopPropagation();
    });
    // Option click
    $(document).on('click', '.dropdown-select .option', function (event) {
        $(this).closest('.list').find('.selected').removeClass('selected');
        $(this).addClass('selected');
        var text = $(this).data('display-text') || $(this).text();
        $(this).closest('.dropdown-select').find('.current').text(text);
        $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
    });

    // Keyboard events
    $(document).on('keydown', '.dropdown-select', function (event) {
        var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
        // Space or Enter
        //if (event.keyCode == 32 || event.keyCode == 13) {
        if (event.keyCode == 13) {
            if ($(this).hasClass('open')) {
                focused_option.trigger('click');
            } else {
                $(this).trigger('click');
            }
            return false;
            // Down
        } else if (event.keyCode == 40) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                focused_option.next().focus();
            }
            return false;
            // Up
        } else if (event.keyCode == 38) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
                focused_option.prev().focus();
            }
            return false;
            // Esc
        } else if (event.keyCode == 27) {
            if ($(this).hasClass('open')) {
                $(this).trigger('click');
            }
            return false;
        }
    });

    function OnChangeWorkType() {
        var workOrderType = $("#WorkOrderType option:selected").text();
        $.ajax({
            url: '/SalesOrder/GetWorkOrderNumber',
            type: "POST",
            data: { workOrderNo: workOrderType },
            success: function (result) {
                $('#WorkOrderNo').val(result);
                //Added the below code for disappearing the validation msg.
                var WorkOrderNo = $('#WorkOrderNo').val();
                if (WorkOrderNo != '' || WorkOrderNo != null) {
                    $('#WorkOrderNoErr').hide();
                }

            },
            error: function (err) {
                alert('Not able to get the selected work order number!');

            }
        });
    }

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        var CurrencyName = $("#CurrencyID option:selected").text();
        $("#CurrencyName").val(CurrencyName);
        createJson();
    };
    //==========end===============

    //=====================Onchange of Terms and Condition===========================
    function SelectedIndexChangedTerms(id) {
        $.ajax({
            url: '/PurchaseOrder/GetTermsDescription',
            type: "POST",
            data: { id: id },
            success: function (result) {
                $('#Terms').val(result.TermDescription);
            },
            error: function (err) {
                alert('Not able to get the selected terms and condition value!');

            }
        });
    }

    //=============End==============

    //=====================Onchange of Indent description===========================
    function SelectedIndexChangedInquiry(id) {
        debugger
        //Check whether the currency dropdown is selected or not

        var CurrencyIDCheck = $('#CurrencyID').val();
        if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
            $('#CurrencyID').focus();
            document.getElementById('InquiryID').selectedIndex = 0;
            return;
        }
        else {
            $("#tempCurrencyID").val(CurrencyIDCheck);
            $("#CurrencyID").prop("disabled", "true");
        }

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        var InquiryNumber = $("#InquiryID option:selected").text();
        $('#InquiryNumber').val(InquiryNumber);
        var CurrencyName = $("#CurrencyID option:selected").text();

        $.ajax({
            url: '/SalesOrder/GetInquiryDescription',
            type: "POST",
            data: { id: id, tempCurrencyId: CurrencyIDCheck },
            success: function (result) {
                if (result != null) {
                    var vendorId = result[0].VendorId;
                    var DeliveryAddress = result[0].SupplierAddress;
                    $('#ClientID').val(vendorId);
                    $('#DeliveryAddress').val(DeliveryAddress);
                    console.log(result);
                    var selectedOption, companyName;
                    selectedOption = document.getElementById("ClientID").selectedIndex;
                    companyName = document.getElementById("ClientID").options[selectedOption].innerText;
                    document.getElementById("CompanyName").value = companyName;
                    //Rahul added 'LocationId' and 'SupplierAddress' 29-05-23 start.
                    var locationId = result[0].LocationId;
                    var SupplierAddress = result[0].DeliveryAddress;
                    $('#LocationId').val(locationId);
                    $('#SupplierAddress').val(SupplierAddress);

                    var selectedOptionLocation, locationName;
                    selectedOptionLocation = document.getElementById("LocationId").selectedIndex;
                    locationName = document.getElementById("LocationId").options[selectedOptionLocation].innerText;
                    document.getElementById("LocationName").value = locationName;
                    //debugger
                    var DeliveryDates = result[0].DeliveryDates;
                    $('#DeliveryDate').val(DeliveryDates);
                    //Rahul added 'LocationId' and 'SupplierAddress', 'DeliveryDates' 29-05-23 end.
                }

                var table = document.getElementById('submissionTable');
                for (var j = 0; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);

                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);

                        if (i == 0) {
                            cell.innerHTML = result[j].Item_Code;
                            cell.setAttribute("id", "ItemCode_" + j);
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_ID;
                            cell.setAttribute("class", "d-none");
                            cell.setAttribute("id", "ItemID_" + j);
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemName;
                            cell.setAttribute("id", "ItemName_" + j);

                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemQuantity + " " + result[j].ItemUnit;
                            cell.setAttribute("id", "ItemQuantity_" + j);

                        }
                        else if (i == 4) {
                            var t4 = document.createElement("input");
                            t4.id = "ItemUnitPrice_" + j;
                            t4.setAttribute("value", result[j].ItemUnitPrice);
                            t4.setAttribute("class", "form-control form-control-sm");
                            t4.setAttribute("maxlength", "8");
                            t4.setAttribute("onchange", "OnChangeUnitPrice($(this).val(),id)");
                            cell.appendChild(t4);
                        }

                        else if (i == 5) {
                            cell.innerHTML = CurrencyName
                            cell.setAttribute("id", "CurrencyName_" + j);
                        }
                        else if (i == 6) {
                            cell.innerHTML = result[j].ItemTaxValue + " %";
                            cell.setAttribute("id", "ItemTax_" + j);
                        }
                        else if (i == 7) {
                            var t4 = document.createElement("input");
                            t4.id = "TotalItemCost_" + j;
                            t4.setAttribute("value", result[j].TotalItemCost);
                            t4.setAttribute("class", "form-control form-control-sm");
                            t4.setAttribute("readonly", "readonly");
                            cell.appendChild(t4);
                        }
                        //else if (i == 8) {
                        //    cell.innerHTML = result[j].BalanceQuantity;
                        //    cell.setAttribute("class", "d-none");
                        //    cell.setAttribute("id", "ActualBalanceQuantity_" + j);
                        //}
                    }

                }
                CalculateTotalBeforeTax();
            },
            error: function (err) {
                alert('Not able to fetch indent item details!');

            }
        });
    }

    //=============End==============

    var TxtItemDetails = "";


    function OnChangeUnitPrice(value, id) {
        var rowNo = id.split('_')[1];
        if (value == '')
            value = 0;

        var UnitPrice = parseFloat(value);
        if (UnitPrice <= 0 || value == null || value == '') {
            alert("Price cannot be negative, null or zero!");
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {

            //Set total price in item grid.
            var quantity = (document.getElementById("ItemQuantity_" + rowNo).innerHTML).split(' ')[0];
            var totalPrice = quantity * UnitPrice;
            totalPrice = Math.round(totalPrice);
            $("#TotalItemCost_" + rowNo).val(totalPrice);
            CalculateTotalBeforeTax();
            document.getElementById(id).setAttribute("style", "none");
        }
    }

    function SelectedIndexChanged(id) {
        var selectedOption, companyName;
        selectedOption = document.getElementById("ClientID").selectedIndex;
        companyName = document.getElementById("ClientID").options[selectedOption].innerText;
        document.getElementById("CompanyName").value = companyName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindCompanyAddress?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var suplierAdd = result[0].SupplierAddress;
                $("#DeliveryAddress").val(suplierAdd);

                //Added the below code for disappearing the validation msg
                var DeliveryAddress = $('#DeliveryAddress').val();
                if (DeliveryAddress != '' || DeliveryAddress != null) {
                    $('#DeliveryAddressErr').hide();
                }
            }
        });
    }

    function SelectedIndexChangedLocation(id) {
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;

        $.ajax({
            type: "POST",
            url: `/PurchaseOrder/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var deliveryAdd = result[0].DeliveryAddress;
                $("#SupplierAddress").val(deliveryAdd);

                //Added the below code for disappearing the validation msg
                var SupplierAddress = $('#SupplierAddress').val();
                if (SupplierAddress != '' || SupplierAddress != null) {
                    $('#SupplierAddressErr').hide();
                }

            }
        });
    }

    function CalculateTotalBeforeTax() {
        //debugger
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 2;
        var total = 0;
        var totalTax = 0;
        totalTax = Math.round(totalTax);

        var OtherTax = document.getElementById("OtherTax").value;

        if (OtherTax == '')
            OtherTax = 0;

        OtherTax = parseFloat(OtherTax);
         //Rahul added 'DiscountVal' for 'VAN-1203' 18-05-2023.
        var DiscountVal = document.getElementById("DiscountPercentage").value;

        if (DiscountVal == '')
            DiscountVal = 0;

        DiscountVal = parseFloat(DiscountVal);

        var i = 0;
        while (i <= length) {
            var temp = document.getElementById("TotalItemCost_" + i).value;
            //Rahul added 'temp' for 'VAN-1203' 18-05-2023.
            if (temp == '' || temp == null) {
                temp = 0;
            }
            else {
                temp = parseFloat(temp);
            }

            var tempTotalTax = ((document.getElementById("ItemTax_" + i)).innerHTML).split(" %")[0];
            total = parseFloat(temp) + total;
            //Rahul added 'tempTotalTax' for 'VAN-1203' 18-05-2023.
            if (tempTotalTax == '' || tempTotalTax == null) {
                tempTotalTax = 0;
            }
            else {
                tempTotalTax = parseFloat(tempTotalTax);
            }

            tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
            totalTax = parseFloat(tempTotalTax) + totalTax;

            i++;
        }
        //Rahul added 'DiscountVal' for 'VAN-1203' 18-05-2023.
        var tempDiscountVal = total * (DiscountVal / 100);

        $('#TotalBeforeTax').val(total.toFixed(2));
        $('#TotalTax').val(totalTax.toFixed(2));
        //Rahul added 'DiscountVal' for 'VAN-1203' 18-05-2023.
        total = total - tempDiscountVal;
        var tempGrandTotal = total + totalTax + OtherTax;
        tempGrandTotal = Math.round(tempGrandTotal);
        //var tempGrandTotal = total + totalTax;
        $('#TotalAfterTax').val(tempGrandTotal);
        $('#GrandTotal').val(tempGrandTotal);

        createJson();
    }

    function createJson() {

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 0;
        TxtItemDetails = "[";
        for (i = 0; i < rowCount - 1; i++) {
            var ItemCode = (document.getElementById("ItemCode_" + i)).innerHTML;
            var ItemID = (document.getElementById("ItemID_" + i)).innerHTML;
            var ItemName = (document.getElementById("ItemName_" + i)).innerHTML;
            var OrderQty = ((document.getElementById("ItemQuantity_" + i)).innerHTML).split(' ')[0];
            var Unit = ((document.getElementById("ItemQuantity_" + i)).innerHTML).split(' ')[1];
            OrderQty = (OrderQty == null || OrderQty == '') ? 0 : OrderQty;
            var PricePerUnit = $("#ItemUnitPrice_" + i).val();
            PricePerUnit = (PricePerUnit == null || PricePerUnit == '') ? 0 : PricePerUnit;

            var Tax = (document.getElementById("ItemTax_" + i)).innerHTML.split(" ")[0];
            var TotalItemCost = $("#TotalItemCost_" + i).val();
            TotalItemCost = (TotalItemCost == null || TotalItemCost == '') ? 0 : TotalItemCost;

            TxtItemDetails = TxtItemDetails + "{\"Item_Code\":\"" + ItemCode + "\", \"ItemId\":" + ItemID +
                ", \"ItemName\": \"" + ItemName + "\", \"OrderQty\": " + OrderQty
                + ", \"ItemUnit\": \"" + Unit + "\", \"ItemUnitPrice\": " + PricePerUnit + ",\"ItemTaxValue\": " + Tax +
                ", \"TotalItemCost\": " + TotalItemCost;

            if (i == (rowCount - 2))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]";
        $('#txtItemDetails').val(TxtItemDetails);
    }

    function ValidateAdvancePayment(value, id) {
        var GrandTotal = parseFloat($("#GrandTotal").val());
        value = parseFloat(value);
        if (value > GrandTotal) {
            $("#ValMsgAdvancePayment").text("Advance payment cannot be greater than Grand total!");
            $('#ValMsgAdvancePayment').show();
            document.getElementById(id).focus();
            return;
        }
        else
            $('#ValMsgAdvancePayment').hide();

    }

    $("#btn_SaveDraft").click(function () {
        var CurrencyName = $("#CurrencyID option:selected").text();
        $("#CurrencyName").val(CurrencyName);
        $("#DraftFlag").val('true');
        createJson();
    });

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }
        //Rahul added 'isNumberKey' for 'DiscountVal' for 'VAN-1203' 18-05-2023.
    function isNumberKey(evt, id) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
        //Rahul added 'minmax' for 'DiscountVal' for 'VAN-1203' 18-05-2023.
    function minmax(value, min, max) {
        //value = Math.round((value + Number.EPSILON) * 100) / 100;
        min = parseFloat(min);
        max = parseFloat(max);
        if (parseFloat(value) < min || isNaN(parseFloat(value)))
            return min;
        else if (parseFloat(value) > max)
            return min;
        else {
            return value;
        }
    }
</script>