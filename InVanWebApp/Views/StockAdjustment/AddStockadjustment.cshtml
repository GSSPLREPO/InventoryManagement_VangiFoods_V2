@model InVanWebApp_BO.StockAdjustmentBO
@{
    ViewBag.Title = "AddStockadjustment";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}


@using (Html.BeginForm("AddStockadjustment", "Stockadjustment"))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Adjust Stock</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Document Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DocumentNo, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.DocumentNo, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DocumentDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.DocumentDate, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationList"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation(id)" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model => model.LocationName)
                </div>
            </div>
            <br />
            <hr />
            <div class="row">
                <h4 style="color:darkcyan">Item Details</h4>
            </div>
            <hr />

            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">Sr. No.</th>
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle d-n d-none">Item Id</th>
                                                <th class="sortStyle">UOM</th>
                                                <th class="sortStyle">Price (Per Unit)</th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">Available Stock</th>
                                                <th class="sortStyle">Physical Stock</th>
                                                <th class="sortStyle">Difference</th>
                                                <th class="sortStyle">Transfer Price</th>
                                                <th class="sortStyle">Remarks</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <br />
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <hr />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "StockAdjustment")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.TxtItemDetails)
        </div>
    </div>
}
@Html.Raw(TempData["Success"])
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script type="text/javascript">
    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        createJson();
    };
    //==========end===============

    //=====================Onchange of PO===========================
    function SelectedIndexChangedLocation(id) {

        $('#btnSave').prop('disabled', false);

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        var Location_ID = $("#LocationId").val();

        $.ajax({
            url: '/StockAdjustment/GetLocationStocksDetails',
            type: "POST",
            data: { id: Location_ID },
            success: function (result) {

                var table = document.getElementById('submissionTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);

                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);

                        if (i == 0) {
                            cell.innerHTML = result[j].Item_Code;
                            cell.setAttribute("id", "ItemCode_" + j);
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_ID;
                            cell.setAttribute("class", "d-none");
                            cell.setAttribute("id", "ItemID_" + j);
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemName;
                            cell.setAttribute("id", "ItemName_" + j);

                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemQuantity + " " + result[j].ItemUnit;
                            cell.setAttribute("id", "POQty_" + j);

                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].RejectedQuantity;
                            cell.setAttribute("id", "RejectedQuantity_" + j);
                        }
                        else if (i == 5) {
                            cell.innerHTML = result[j].ItemUnit;
                            cell.setAttribute("id", "ItemUnit_" + j);
                        }
                        else if (i == 6) {
                            cell.innerHTML = result[j].ItemUnitPrice + " " + result[j].CurrencyName;
                            cell.setAttribute("id", "ItemUnitPrice_" + j);
                        }
                        else if (i == 7) {
                            cell.innerHTML = result[j].CurrencyName
                            cell.setAttribute("id", "CurrencyName_" + j);
                        }
                        else if (i == 8) {
                            cell.innerHTML = result[j].ItemTaxValue + " %";
                            cell.setAttribute("id", "ItemTax_" + j);
                        }
                        else if (i == 9) {
                            cell.innerHTML = result[j].TotalItemCost + " " + result[j].CurrencyName;
                            cell.setAttribute("id", "TotalItemCost_" + j);
                        }
                        else if (i == 10) {
                            cell.innerHTML = result[j].Remarks;
                            cell.setAttribute("id", "Remarks_" + j);
                        }
                    }

                }

                CalculateTotalBeforeTax();
                var grandTotal = $('#GrandTotal').val()
                grandTotal = parseFloat(grandTotal);
                if (grandTotal == 0) {
                    alert('Wastage of all listed items are zero, Cannot create its credit note!');
                    $('#btnSave').prop('disabled', true);
                }
                else {
                    $('#btnSave').prop('disabled', false);
                }
            },
            error: function (err) {
                alert('Not able to fetch indent item details!');

            }

        });
    }
    //=============End==============

    var TxtItemDetails = "";

    function CalculateTotalBeforeTax() {
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        var total = 0;
        var totalTax = 0;
        var otherTax = ((document.getElementById("OtherTax").value).split(" %")[0]);
        otherTax = parseFloat(otherTax);
        totalTax = Math.round(totalTax);

        var i = 1;
        while (i <= length) {
            var temp = ((document.getElementById("TotalItemCost_" + i)).innerHTML).split(" ")[0];
            var tempTotalTax = ((document.getElementById("ItemTax_" + i)).innerHTML).split(" %")[0];
            total = parseFloat(temp) + total;

            tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
            totalTax = parseFloat(tempTotalTax) + totalTax;

            i++;
        }
        otherTax = ((otherTax / 100) * total);
        totalTax = totalTax + otherTax;

        $('#TotalBeforeTax').val(total.toFixed(2));
        $('#TotalTax').val(totalTax.toFixed(2));
        var tempGrandTotal = total + totalTax;
        $('#GrandTotal').val(tempGrandTotal.toFixed(2));

        createJson();
    }

    function createJson() {

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 1;
        TxtItemDetails = "[";
        for (i = 1; i <= rowCount - 1; i++) {
            var ItemCode = (document.getElementById("ItemCode_" + i)).innerHTML;
            var ItemID = (document.getElementById("ItemID_" + i)).innerHTML;
            var ItemName = (document.getElementById("ItemName_" + i)).innerHTML;
            var POQty = (document.getElementById("POQty_" + i)).innerHTML.split(" ")[0];
            var RejectedQty = (document.getElementById("RejectedQuantity_" + i)).innerHTML;
            var Unit = (document.getElementById("ItemUnit_" + i)).innerHTML;

            var PricePerUnit = (document.getElementById("ItemUnitPrice_" + i)).innerHTML.split(" ")[0];
            PricePerUnit = (PricePerUnit == null || PricePerUnit == '') ? 0 : PricePerUnit;

            var CurrencyName = (document.getElementById("CurrencyName_" + i)).innerHTML;
            var Tax = (document.getElementById("ItemTax_" + i)).innerHTML.split(" ")[0];
            var TotalItemCost = (document.getElementById("TotalItemCost_" + i)).innerHTML.split(" ")[0];
            TotalItemCost = (TotalItemCost == null || TotalItemCost == '') ? 0 : TotalItemCost;
            var Remarks = (document.getElementById("Remarks_" + i)).innerHTML;

            TxtItemDetails = TxtItemDetails + "{\"Item_Code\":\"" + ItemCode + "\", \"ItemId\":" + ItemID +
                ", \"ItemName\": \"" + ItemName + "\", \"POQty\": " + POQty + ", \"RejectedQty\": " + RejectedQty +
                ", \"ItemUnit\": \"" + Unit + "\", \"ItemUnitPrice\": " + PricePerUnit + ", \"CurrencyName\": \"" + CurrencyName + "\",\"ItemTaxValue\": " + Tax +
                ", \"TotalItemCost\": " + TotalItemCost + ",\"Remarks\": \"" + Remarks + "\"";

            if (i == (rowCount - 1))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]"
        $('#TxtItemDetails').val(TxtItemDetails);
    }
</script>