
@model InVanWebApp_BO.StockTransferBO

@{
    ViewBag.Title = "Add Stock Transfer";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddStockTransfer", "StockTransfer", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Stock Transfer</h4>
            <hr />
            @Html.ValidationSummary(true)
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("From Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.FromLocationId, (IEnumerable<SelectListItem>)ViewData["FromLocationName"], "---Select---", new { @class = "form-control form-control-sm DropdownRegular", onchange = "SelectedIndexChangedFromLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.FromLocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.FromLocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.FromLocationName, "", new { @class = "error mt-2 text-danger" })
                </div>
                <br />
                <div class="col-md-2">
                    @Html.Label("To Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ToLocationId, (IEnumerable<SelectListItem>)ViewData["ToLocationName"], "---Select---", new { @class = "form-control form-control-sm DropdownRegular", onchange = "SelectedIndexChangedToLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.ToLocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.ToLocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                    @*@Html.ValidationMessageFor(model => model.ToLocationName, "", new { @class = "error mt-2 text-danger" })*@
                </div>

            </div>
            <br />
            <br />
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item details")
                </div>
            </div>
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group mb-0">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-hover" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">Item Code<span style="color:red">*</span></th>
                                                <th class="sortStyle d-none">Selected Item Code</th>
                                                <th class="sortStyle d-none">Inward Item Date</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">Current Quantity</th>
                                                <th class="sortStyle">Units</th>
                                                <th class="sortStyle">Unit Price</th>
                                                <th class="sortStyle">Transfer Quantity</th>  @*Rahul updated Current to Transfer Qty 14-02-23.*@
                                                <th class="sortStyle">Final Quantity</th>
                                                <th class="sortStyle">
                                                    Remarks <span style="color:red">*</span>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            <tr id="tablerow">
                                                <td>
                                                    @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new
                                                    {
                                                        @class = "form-control form-control-sm",
                                                        style = "height:30px;width:270px;",
                                                        onchange = "SelectedIndexChangedItemList($(this).val())"@*onmouseleave = "ValMsgItemList($(this).val(),id)"*@})
                                                    <span id="ValMsgItemList" style="display:none; color:red"></span>
                                                    @*@Html.ValidationMessageFor(model => model.ItemId, "", new { @class = "error mt-2 text-danger" }) Rahul removed ValidationMessageFor ItemId and added ValMsgItemList in span tag onchange SelectedIndexChangedItemList 09-02-23. *@
                                                </td>
                                                <td class="d-none">
                                                    @Html.TextBoxFor(model => model.Item_Code, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly", style = "height:30px;width:auto;" })
                                                </td>
                                                <td class="d-none">
                                                    @Html.TextBoxFor(model => model.InwardDateOfItem, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly", style = "height:30px;width:auto;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("Item_Name", "", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.RequiredQuantity, new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnit", "", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnitPrice", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.TransferQuantity, new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8", onchange = "OnChangeQuantityForFirstRow($(this).val(),id)" })
                                                    @*@Html.ValidationMessageFor(model => model.TransferQuantity, "", new { id = "transferQuantityErr", @class = "error mt-2 text-danger" })*@
                                                    <span id="transferQuantityErr" style="display:none;"></span>
                                                </td>
                                                <td>
                                                    @Html.TextBox("FinalQuantity", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:80px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.Remarks, "", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;" })
                                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-primary btn-sm w-auto" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(0);" disabled>Delete</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                @*<button type="button" class="btn btn-info shadow" id="AddItem">
                                        + Add Item
                                    </button>*@
                                <button type="button" class="btn btn-primary btn-sm shadow w-auto" id="AddItem" style="background: linear-gradient(85deg, #392c70, #6a005b); margin-left: 1rem;">
                                    + Add Item
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                            @*@Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:block" })*@
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <!-- Rahul updated class col 30-12-2022. -->
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col mb-1"><button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2 float-right" style="background: linear-gradient(85deg, #392c70, #6a005b);" formaction="AddStockTransfer" onclick="OnBtnSave()">Submit</button></div>
                    <div class="col p-0">
                        <a href="@Url.Action("Index", "StockTransfer")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>


}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<link href="~/Theme/MainContent/css/CustomDropdown.css" rel="stylesheet" />

<script type="text/javascript">

    //Vedant added 'function createCustomDropdown()' 04-07-2023. start
    $(document).ready(function () {
        createCustomDropdown_Item_ID("Item_ID");
    });

    function createCustomDropdown_Item_ID(id) {
        $('select#' + id).each(function (i, select) {
            if (!$(this).next().hasClass('dropdown-select')) {
                $('#' + id).removeClass('form-control');
                $('#' + id).removeClass('form-control-sm');
                $(this).after('<div id="div' + id + '" class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#div' + id + '.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValue' + id + '" autocomplete="off" onkeyup="filterItem_ID(id)" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterItem_ID(id) {
        //debugger
        var valThis = $('#' + id + '').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    // Event listeners

    // Open/close
    $(document).on('click', '.dropdown-select', function (event) {
        if ($(event.target).hasClass('dd-searchbox')) {
            return;
        }
        $('.dropdown-select').not($(this)).removeClass('open');
        $(this).toggleClass('open');
        if ($(this).hasClass('open')) {
            $(this).find('.option').attr('tabindex', 0);
            $(this).find('.selected').focus();
        } else {
            $(this).find('.option').removeAttr('tabindex');
            $(this).focus();
        }
    });
    // Close when clicking outside
    $(document).on('click', function (event) {
        if ($(event.target).closest('.dropdown-select').length === 0) {
            $('.dropdown-select').removeClass('open');
            $('.dropdown-select .option').removeAttr('tabindex');
        }
        event.stopPropagation();
    });
    // Option click
    $(document).on('click', '.dropdown-select .option', function (event) {
        $(this).closest('.list').find('.selected').removeClass('selected');
        $(this).addClass('selected');
        var text = $(this).data('display-text') || $(this).text();
        $(this).closest('.dropdown-select').find('.current').text(text);
        $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
    });

    // Keyboard events
    $(document).on('keydown', '.dropdown-select', function (event) {
        var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
        // Space or Enter
        //if (event.keyCode == 32 || event.keyCode == 13) {
        if (event.keyCode == 13) {
            if ($(this).hasClass('open')) {
                focused_option.trigger('click');
            } else {
                $(this).trigger('click');
            }
            return false;
            // Down
        } else if (event.keyCode == 40) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                focused_option.next().focus();
            }
            return false;
            // Up
        } else if (event.keyCode == 38) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
                focused_option.prev().focus();
            }
            return false;
            // Esc
        } else if (event.keyCode == 27) {
            if ($(this).hasClass('open')) {
                $(this).trigger('click');
            }
            return false;
        }
    });
            //Vedant added 'function createCustomDropdown()' 04-07-2023. end


    function OnBtnSave() {
        var tableLength = document.getElementById('submissionTable').rows.length;
        var flag = 0, i = 1;

        if (tableLength > 1) {
            var TransQty = document.getElementById("TransferQuantity").value;
            var CurrentQty = document.getElementById("RequiredQuantity").value;
            CurrentQty = parseFloat(CurrentQty);
            TransQty = (TransQty == null || TransQty == "") ? parseFloat(0) : parseFloat(TransQty);

            if (TransQty == 0) {
                alert("Transfer quantity is zero or null! Cannot perform stock transfer!");
                $('#btnSave').prop('disabled', true);
                return;
            }
            else {
                if (TransQty > CurrentQty) {
                    alert("Transfer quantity is greater than the current quantity! Cannot perform stock transfer!");
                    $('#btnSave').prop('disabled', true);
                    return;
                }
                else
                    flag = 0;
            }

            while (i < tableLength-1) {
                TransQty = document.getElementById("transferQuantity_" + i).value;
                TransQty = (TransQty == null || TransQty == "") ? parseFloat(0) : parseFloat(TransQty);

                CurrentQty = document.getElementById("itemQuantity_"+i).value;
                CurrentQty = parseFloat(CurrentQty);

                if (TransQty == 0) {
                    flag = 1;
                    break;
                }
                else if (TransQty > CurrentQty) {
                    flag = 1;
                    break;
                }
                else
                    flag = 0;

                i++;

            }
            if (flag == 1) {
                alert("Transfer quantity is zero or null or greater than the current quantity! Cannot perform stock transfer!");
                $('#btnSave').prop('disabled', true);
                return;
            }
            else
                $('#btnSave').prop('disabled', false);
        }


        createJson();
    }

    var flag = 0; //This flag is for checking whether the add Item details or not.
    function SelectedIndexChangedFromLocation(id) {
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("FromLocationId").selectedIndex;
        locationName = document.getElementById("FromLocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("FromLocationName").value = locationName;
         ///Rahul added 15/02/2023 start.
        var FromLocationCheck = $('#FromLocationId').val();
        var ToLocationCheck = $('#ToLocationId').val();

        if (FromLocationCheck == '' || FromLocationCheck == null) {
            if (ToLocationCheck == '' || ToLocationCheck == null) {
                alert('Select From Location!');
                $('#FromLocationId').focus();
            }
            else
                alert('Select From Location');

            document.getElementById('Item_ID').selectedIndex = 0;
            $('#FromLocationId').focus();
            flag = 1;
            return;
        }
        else if (FromLocationCheck == ToLocationCheck) {
            if (ToLocationCheck != '' || ToLocationCheck != null) {
                alert('Select Different From Location');
            }
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#FromLocationId').focus();
            flag = 1;
            return;
        }
        else {
            $('#ToLocationId').focus();
            //$('#Item_ID').focus();
            var selectedOptionItems, itemCode;
            selectedOptionItems = document.getElementById("Item_ID").selectedIndex;
            itemCode = document.getElementById("Item_ID").options[selectedOptionItems].innerText;
            document.getElementById("Item_Code").value = itemCode;
            flag = 0;
        }
        ///Rahul added 15/02/2023 end.

        $.ajax({
                type: 'POST',
                url: '@Url.Action("BindLocationWiseItemCode")', // we are calling json method

                dataType: 'json',

                data: {locationId: $("#FromLocationId").val() },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

            success: function (itemDescription) {
                var itemSelect = $('#Item_ID');
                    if (itemDescription != null && !jQuery.isEmptyObject(itemDescription)) {
                        $("#Item_ID option").remove();
                        itemSelect.append($('<option/>', {
                            value: 0,
                            text: "--Select--"
                        }));
                        $.each(itemDescription, function (index, region) {
                            itemSelect.append($('<option/>', {
                                value: region.ID,
                                text: region.Item_Code
                            }));
                        });
                };
                //For deleting the rows of Item table if exist.

                var table = document.getElementById('submissionTable');
                var rowCount = table.rows.length;
                while (rowCount != '2') {
                    var row = table.deleteRow(rowCount - 1);
                    rowCount--;
                }
                $('#Item_Name').val('');
                $('#RequiredQuantity').val('');
                $('#ItemUnit').val('');
                $('#ItemUnitPrice').val('');
                $('#TransferQuantity').val('');
                $('#FinalQuantity').val('');
                $('#Remarks').val('');
                   },
                failure: function () {
                alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                alert('Failed to retrieve Item description.' + ex);
                }
                });

    }

    var flag = 0; //This flag is for checking whether the add Item details or not.
    function SelectedIndexChangedToLocation(id) {
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("ToLocationId").selectedIndex;
        locationName = document.getElementById("ToLocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("ToLocationName").value = locationName;

        var FromLocationCheck = $('#FromLocationId').val();
        var ToLocationCheck = $('#ToLocationId').val();

        //if (FromLocationCheck == '' || FromLocationCheck == null) {

        //    alert('Select Different FromLocation');
        //    document.getElementById('Item_ID').selectedIndex = 0;
        //    $('#FromLocationId').focus();
        //    flag = 1;
        //    return;
        //}
        //else if (ToLocationCheck == '' || ToLocationCheck == null) {

        if (ToLocationCheck == '' || ToLocationCheck == null) {

            if (FromLocationCheck == '' || FromLocationCheck == null) {
                alert('Select From Location!');
                $('#FromLocationId').focus();
            }
            else
                alert('Select To Location');

            document.getElementById('Item_ID').selectedIndex = 0;
            $('#ToLocationId').focus();
            flag = 1;
            return;
        }
        else if (FromLocationCheck == ToLocationCheck) {
            if (FromLocationCheck != '' || FromLocationCheck != null) {
                alert('Select Different To Location');
            }
            //alert('Select Different ToLocation');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#ToLocationId').focus();
            flag = 1;
            return;
        }
        //else if (ToLocationCheck == FromLocationCheck) {

        //    alert('Select Different FromLocation');
        //    document.getElementById('Item_ID').selectedIndex = 0;
        //    $('#FromLocationId').focus();
        //    flag = 1;
        //    return;
        //}
        else {
            $('#FromLocationId').focus();
            $('#Item_ID').focus();
            var selectedOptionItems, itemCode;
            selectedOptionItems = document.getElementById("Item_ID").selectedIndex;
            itemCode = document.getElementById("Item_ID").options[selectedOptionItems].innerText;
            document.getElementById("Item_Code").value = itemCode;
            flag = 0;
        }
    }

    ///---Rahul added onmouseleave event ValMsgItemList(value, id) strart 09-02-2023.//
    ///This function is not calling right now (22 Feb'23)
    function ValMsgItemList(value, id) {
        //debugger
        var rowNo = id.split('_')[1]; //ItemID_1
        $("#Item_ID_" + rowNo).val();
        var ItemList = $("#Item_ID option:selected").val();
        if (ItemList == '' || ItemList == 0) {
            $("#ValMsgItemList").text("Please select Inward QC number!");
            $("#ValMsgItemList").show();
            document.getElementById(id).focus();
            return
        }
        else {
            $("#ValMsgItemList").hide();
        }
    }

    //Rahul added function DynValMsgItemList(value, id) 14-02-2023.
     ///This function is not calling right now (22 Feb'23)
    function DynValMsgItemList(value, id) {
        //debugger
        var rowNo = id.split('_')[1]; //ItemID_1
        $("#ItemID_" + rowNo).val();
        var ItemList = $("#ItemID_" + rowNo).val();

        if (ItemList == '' || ItemList == 0) {
            document.getElementById("DynValMsgItemList_" + rowNo).setAttribute("style", "color:red;");
            $("#DynValMsgItemList_" + rowNo).text("Please select Inward QC number!");
            $("#DynValMsgItemList_" + rowNo).show();
            document.getElementById(id).focus();
            return
        }
        else {
            $("#DynValMsgItemList_" + rowNo).hide();
            //document.getElementById("DynValMsgItemList_" + rowNo).setAttribute("style", "");
        }
    }


    ///---Rahul added onmouseleave event ValMsgItemList(value, id) end.

    var flag = 0; //This flag is for checking whether the add Item details or not.
    function SelectedIndexChangedItemList(id) {
        $("#ValMsgItemList").hide();

        //debugger
        var FromLocationCheck = $('#FromLocationId').val();
        var ToLocationCheck = $('#ToLocationId').val();

        if (FromLocationCheck == '' || FromLocationCheck == null) {

            alert('Select Different From Location and To Location');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#FromLocationId').focus();
            flag = 1;
            return;
        }
        else if (ToLocationCheck == '' || ToLocationCheck == null) {

            alert('Select Different To Location and From Location');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#ToLocationId').focus();
            flag = 1;
            return;
        }
        ///Rahul added 09/12/2022.
        else if (FromLocationCheck == ToLocationCheck) {
            alert('Select Different To Location and From Location');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#ToLocationId').focus();
            flag = 1;
            return;
        }///Rahul added 09/12/2022.
        else if (ToLocationCheck == FromLocationCheck) {

            alert('Select Different From Location and To Location');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#FromLocationId').focus();
            flag = 1;
            return;
        }
        else {
            var selectedOptionItems, itemCode; ///updated
            selectedOptionItems = document.getElementById("Item_ID").selectedIndex;
            itemCode = document.getElementById("Item_ID").options[selectedOptionItems].innerText;
            document.getElementById("Item_Code").value = itemCode;
            flag = 0;
        }
    }

    $("#Item_ID").change(function () {
        $("#ValMsgItemList").hide();
        //debugger
        var FromLocationCheck = $('#FromLocationId').val();
        var ToLocationCheck = $('#ToLocationId').val();

        if (FromLocationCheck == '' || FromLocationCheck == null) {
            //debugger
            alert('Select Different From Location and To Location');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#FromLocationId').focus();
            return;
        }
        else if (ToLocationCheck == '' || ToLocationCheck == null) {
            //debugger
            alert('Select Different To Location and From Location');
            document.getElementById('Item_ID').selectedIndex = 0;
            $('#ToLocationId').focus();
            return;
        } else { getitemDetails();}

    });

    //Dropdownlist Selectedchange event
    function getitemDetails() {
        $("#f").empty();

        var selectedOptionItem_Id, item_Code;
        selectedOptionItem_Id = document.getElementById("Item_ID").selectedIndex;
        item_Code = document.getElementById("Item_ID").options[selectedOptionItem_Id].innerText;

        var tempDate = item_Code.split(' (');
        document.getElementById("Item_Code").value = tempDate[0];
        var tempCreatedDate = tempDate[1].split(')');
        var CreatedDate = tempCreatedDate[0];
        document.getElementById("InwardDateOfItem").value = CreatedDate;

        $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',

            data: { id: $("#Item_ID").val(), locationId: $("#FromLocationId").val(), CreatedDate: CreatedDate  },

                // here we are get value of selected item and passing same value
                //as input to json method GetitemDetails.

            success: function (itemDescription) {
                // states contains the JSON formatted list
                // of states passed from the controller
                    var description = JSON.stringify(itemDescription);
                    $("#Item_Name").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#RequiredQuantity").val(itemDescription.RequiredQuantity);
                    $("#ItemUnitPrice").val(itemDescription.UnitPrice); //Rahul added 06-02-23
                    var RQty = $("#RequiredQuantity").val();
                    if (RQty == 0) {
                        alert('Current quantity are 0 for the selected item!');
                        $('#btnSave').prop('disabled', 'true');
                    }
                    else {
                        $('#btnSave').prop('disabled', false);
                    }

                    $("#TransferQuantity").val('0');
                    $("#FinalQuantity").val('0');
                },
                failure: function () {
                alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                alert('Failed to retrieve Item description.' + ex);
                }
                });
    }

    function OnChangeQuantityForFirstRow(value, id) {

        var itemId = $("#Item_ID").val();
        if (itemId == '' || itemId == null) {
            $("#Item_ID").focus();
            $("#TransferQuantity").val(0);
            return;
        }

        var requiredQuantity = $("#RequiredQuantity").val();
        requiredQuantity = parseFloat(requiredQuantity);

        //Set current quantity in item grid.
        var TransferQuantity = parseFloat(value);
        var finalQuantity = requiredQuantity - TransferQuantity;

        if (TransferQuantity <= 0 || value == null || value == '') {
            //alert("Quantity cannot be negative, null or zero!"); //rahul removed alert on 04-02-23
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            $("#transferQuantityErr").show();
            document.getElementById("transferQuantityErr").setAttribute("style", "color:red;");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            $("#transferQuantityErr").text("Enter Transfer Quantity!");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            return;
        }
        else if (finalQuantity < (TransferQuantity - requiredQuantity)) {
            $("#transferQuantityErr").text("Transfer quantity cannot be greater then Current quantity!");
            $("#transferQuantityErr").show();
            document.getElementById("transferQuantityErr").setAttribute("style", "color:red;");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            document.getElementById("transferQuantityErr").setAttribute("class", "text-wrap");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            //alert("Transfer quantity cannot be greater then Current quantity!");
            $("#TransferQuantity").focus();
            $("#FinalQuantity").val(0);
            $('#btnSave').prop('disabled', 'true');
            document.getElementById("TransferQuantity").setAttribute("style", "border-color:red;");
            $("#transferQuantityErr").show();
        }
        else {
            //Set transfer Quantity in item grid.
            $("#transferQuantityErr").hide();//Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            document.getElementById(id).setAttribute("style", "");
            $("#FinalQuantity").val(finalQuantity);
            $('#btnSave').prop('disabled', false);
        }
    }

    function OnChangeQuantity(value, id) {

        var rowNo = id.split('_')[1];
        var currentQty = $('#itemQuantity_' + rowNo).val();
        currentQty = parseFloat(currentQty);
        var itemId = $("#ItemID_"+rowNo).val();
        if (itemId == '' || itemId == null) {
            $("#ItemID_" + rowNo).focus;
            $("#transferQuantity_"+rowNo).val(0);
            return;
        }

        var TransferQuantity = parseFloat(value);
        if (TransferQuantity <= 0 || value == null || value == '') {
            //alert("Quantity cannot be negative, null or zero!"); //rahul removed alert on 04-02-23
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            $("#transferQuantityErr_" + rowNo).show();
            document.getElementById("transferQuantityErr_" + rowNo).setAttribute("style", "color:red;");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            $("#transferQuantityErr_" + rowNo).text("Enter Transfer Quantity!");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            return;
        }
        else if (TransferQuantity > currentQty) {
            document.getElementById("transferQuantityErr_" + rowNo).setAttribute("style", "color:red;");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            document.getElementById("transferQuantityErr_" + rowNo).setAttribute("class", "text-wrap");    //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            $("#transferQuantityErr_" + rowNo).text("Transfer quantity cannot be greater then Current quantity!");
           // alert("Transfer quantity cannot be greater then Current quantity!");
            $('#' + id).focus();
            $("#transferQuantityErr_" + rowNo).show();
            $('#finalQuantity_' + rowNo).val(0);
            $('#btnSave').prop('disabled', 'true');
            document.getElementById(id).setAttribute("style", "border-color:red;");
        }

        else {
            //Set transfer Quantity in item grid.
            $("#transferQuantityErr_" + rowNo).hide();//Rahul added for span tag 'transferQuantityErr_' 14-02-23.
            document.getElementById(id).setAttribute("style", "");
            var diffQty = (currentQty - TransferQuantity);
            $('#finalQuantity_' + rowNo).val(diffQty);
            $('#btnSave').prop('disabled', false);

        }
    }
    //---OnChangeQuantity end ------

    var counter = 1;

    $("#AddItem").click(function () {
        if ($('#FromLocationId').val() == '' || $('#ToLocationId').val() == '') {
            ($('#FromLocationId').val() == '') ? ($('#FromLocationId').focus()) : ($('#ToLocationId').focus());
            return;
        }
        var itemId = "ItemID_" + counter;
        var dynValMsgItemList = "DynValMsgItemList_" + counter; //Rahul added for span tag 'DynValMsgItemList_' 14-02-23.
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var itemQuantity = "itemQuantity_" + counter;
        var itemUnit = "itemUnit_" + counter;
        var itemPrice = "itemPrice_" + counter;//added
        var transferQuantity = "transferQuantity_" + counter;
        var transferQtyErrMsg = "transferQuantityErr_" + counter; //Rahul added for span tag 'transferQuantityErr_' 14-02-23.
        var finalQuantity = "finalQuantity_" + counter;
        var remarks = "remarks_" + counter;
        var dynValMsgRemarks = "dynValMsgRemarks_" + counter;
        var inwardDateOfItem = "InwardDateOfItem_" + counter;
        $('<tr id="tablerow' + counter + '">' + '<td>' +
            /*'<select id="' + itemId + '" onmouseleave = "DynValMsgItemList($(this).val(),id)"; onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:30px;width:270px;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +*/
            '<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:30px;width:270px;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +
            '<span id="' + dynValMsgItemList + '">' +
            '</td>' +
            '<td class="d-none">' +
            '<input type="text" id="' + itemCode + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + itemCode + '" value="" required="required" readonly="readonly" />' +
            '</td>' +
            '<td class="d-none">' +
            '<input type="text" id="' + inwardDateOfItem + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + inwardDateOfItem + '" value="" required="required" readonly="readonly" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemDescription + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + itemDescription + '" value="" required="required" readonly="readonly"/>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="" required="required" readonly="readonly"/>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + itemUnit + '" value="" required="required" readonly="readonly"/>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemPrice + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + itemPrice + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /*'<input type="text" id="' + transferQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + transferQuantity + '" value="" required="required" />' +*/
            '<input type="text" id="' + transferQuantity + '" class="form-control form-control-sm text-right valid" style = "height:30px;width:100px;" name="' + transferQuantity + '" value="0" maxlength="8" onkeypress="return isNumberKey(event)" onchange= "OnChangeQuantity($(this).val(),id)" required="required" />' +
            '<span id="' + transferQtyErrMsg + '">' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + finalQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;width:80px;" name="' + finalQuantity + ' " value="0" required="required" readonly="readonly"/>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + remarks + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + remarks + '" onkeyup="DynValMsgRemark($(this).val(),id)" required="required" />' +
            '<span id="' + dynValMsgRemarks + '">' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-primary btn-sm" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');
        var id = $('#FromLocationId').val();
       // SelectedIndexChangedFromLocation(id);
        counter++;
        return false;
    });

    function CalItemTotalPrice(value, id) {
        //debugger
        //alert(value + " " + id);
        var temp_rowNo = id.split('_');
        var rowNo = temp_rowNo[1];
        value = parseFloat(value);
        if (value != 0) {
            var transferQuantity = $("#transferQuantity_" + rowNo).val();
            transferQuantity = parseFloat(transferQuantity);
            var requiredQuantity = $("#itemQuantity_" + rowNo).val();
            requiredQuantity = parseFloat(requiredQuantity);
            var finalQuantity = requiredQuantity - transferQuantity;
            $("#finalQuantity_" + rowNo).val(finalQuantity);
        }
        createJson();
    }

    var TxtItemDetails = "";

    //Rahul implemented 'res' condition for ValMsgItemList span tag message on click Save button 15-02-23.
    function createJson() {

        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));

        if ((res[0].Item_ID == null || res[0].Item_ID == '' || res[0].Item_ID == 'undefined') &&
            (document.getElementById('FromLocationId').selectedIndex == 0))
        {
            $('#FromLocationId').focus();
            //alert('Select Different FromLocation and ToLocation!');
        }
        else if (document.getElementById('Item_ID').selectedIndex == 0) {

            var ItemList = $("#Item_ID option:selected").val();
            if (ItemList == '' || ItemList == 0) {
                $("#ValMsgItemList").text("Please select Item!");
                $("#ValMsgItemList").show();
                document.getElementById('Item_ID').focus();
                event.preventDefault();
                return;
            }
            else {
                $("#ValMsgItemList").hide();
            }
        }
        else {
            var TxtItemDetails = JSON.stringify(res);
            //console.log(TxtItemDetails);
            $('#TxtItemDetails').val(TxtItemDetails);
        }
    }

    function getitemDetailsJSTbl(count) {
        var selectedOptionItem_Id, item_Code;
        selectedOptionItem_Id = document.getElementById("ItemID_"+count).selectedIndex;
        item_Code = document.getElementById("ItemID_" + count).options[selectedOptionItem_Id].innerText;

        var tempDate = item_Code.split(' (');
        document.getElementById("itemCode_" + count).value = tempDate[0];
        var tempCreatedDate = tempDate[1].split(')');
        var CreatedDate = tempCreatedDate[0];
        document.getElementById("InwardDateOfItem_"+count).value = CreatedDate;

    var itemId = "ItemID_" + count;
    var selectedItemId = $("#" + itemId).val();
                $.ajax({
                    type: 'POST',
                    //url: '@Url.Action("GetitemDetails?id='+${itemId}+'")', // we are calling json method
                    url: '@Url.Action("GetitemDetails")', // we are calling json method

                    dataType: 'json',
                        data: { id: selectedItemId, locationId: $("#FromLocationId").val(), CreatedDate: CreatedDate },
                    // here we are get value of selected item and passing same value
                    //as inputto json method GetitemDetails.

                    success: function (itemDescription) {

                            var description = JSON.stringify(itemDescription);

                            //$("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#itemQuantity_" + count).val(itemDescription.RequiredQuantity);
                            $("#itemPrice_" + count).val(itemDescription.UnitPrice);    ///rahul added 06-02-2023.
                            //$("#itemTax_" + count).val(itemDescription.ItemTaxValue);
                            $("#transferQuantity_" + count).val('0');
                            $("#finalQuantity_").val('0');
                            $("#remarks_").val('');

                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });

    }

    //---isNumberKey start rahul added on 04-02-23------
    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
    //---isNumberKey start rahul added on 04-02-23------

    function removeTr(index) {
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        //console.log("Length: " + length + counter);
        if (counter > 1 & length == index) {
            $('#tablerow' + index).remove();
            counter--;
        }
        else {
            $('#tablerow' + index).remove();
        }
        return false;
    }

    function DynValMsgRemark(value, id) {
        debugger
        var rowNo = id.split('_')[1];
        var rem = $("#remarks_" + rowNo).val();
        if (rem == '' || rem == null || rem == 'undefined') {
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            document.getElementById("dynValMsgRemarks_" + rowNo).setAttribute("style", "color:red;");    //Rahul added for span tag 'dynValMsgRemarks_' 14-02-23.
            $("#dynValMsgRemarks_" + rowNo).text("Enter remarks!");    //Rahul added for span tag 'dynValMsgRemarks_' 15-02-23.
            return;
        }
        else {
            //Set transfer Quantity in item grid.
            $("#dynValMsgRemarks_" + rowNo).hide();//Rahul added for span tag 'dynValMsgRemarks_' 15-02-23.
            document.getElementById(id).setAttribute("style", "");
            $("#TransferQuantity").val();
            $("#remarks_" + rowNo).val();
        }
    }
</script>
