
@model InVanWebApp_BO.StockTransferBO

@{
    ViewBag.Title = "Add Stock Transfer";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddStockTransfer", "StockTransfer"))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Stock Transfer</h4>
            <hr />
            @Html.ValidationSummary(true)
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("From Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.FromLocationId, (IEnumerable<SelectListItem>)ViewData["FromLocationName"], "---Select---", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedFromLocation($(this).val())" })
                    @*@Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })*@
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.FromLocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
                <br />
                <div class="col-md-2">
                    @Html.Label("To Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ToLocationId, (IEnumerable<SelectListItem>)ViewData["ToLocationName"], "---Select---", new { @class = "form-control form-control-sm", onchange = "SelectedIndexChangedToLocation($(this).val())" })
                    @*@Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })*@
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.ToLocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <br />
            <br />
            <div class="row">
                <div class="col-md-4">
                    @Html.Label("From Location Item Details")
                </div>
            </div>
            <hr />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group mb-0">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="ItemTable">                                        
                                            <tr>
                                                <th>Code</th>
                                                <th>Name</th>
                                                <th>Before Transfer Qty.</th>
                                                <th>Transfer Qty.</th>
                                                <th>Balance Qty.</th>
                                                <th>Units (Kg)</th>
                                                <th>Unit Price</th>
                                                <th>Tax (%)</th>
                                                <th>Remarks</th>
                                            </tr>
                                    </table>
                                    @*<table class="table table-striped" id="submissionTable">
                                            <thead>
                                                <tr>
                                                    <th class="sortStyle">
                                                        From Location Item Code
                                                        <i class="fa fa-angle-down"></i>
                                                    </th>
                                                    <th class="sortStyle d-n">
                                                        From Location Selected Item Code
                                                        <i class=""></i>
                                                    </th>
                                                    <th class="sortStyle">
                                                        From Location Item Description
                                                        <i class=""></i>
                                                    </th>
                                                    <th class="sortStyle">
                                                        From Location Before Transfer Qty
                                                        <i class=""></i>
                                                    </th>
                                                    <th class="sortStyle">
                                                        From Location Units
                                                        <i class=""></i>
                                                    </th>
                                                    <th class="sortStyle">
                                                        From Location Transfer Quantity
                                                        <i class=""></i>
                                                    </th>
                                                    <th class="sortStyle">
                                                        From Location Final Quantity
                                                        <i class=""></i>
                                                    </th>
                                                    <th class="sortStyle">
                                                        Remarks
                                                        <span style="color:red">*</span>
                                                        <i class=""></i>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody id="myTableBody">
                                                <tr id="tablerow">
                                                    <td>
                                                        @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control form-control-sm", style = "height:30px;width:100px;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                    </td>
                                                    <td class="col-2">
                                                        @Html.TextBoxFor(model => model.Item_Code, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("Item_Name", "", new { @class = "form-control form-control-sm", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.FromLocation_BeforeTransferQty, new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("UnitID", "", new { @class = "form-control form-control-sm", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.TransferQuantity, new { @class = "form-control form-control-sm text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event)" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBox("FinalQuantity", "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:80px;", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.Remarks, "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:200px;" })
                                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-primary btn-sm" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(0);" disabled>Delete</button>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>*@
                                </div>
                            </div>
                            <!--<br />
                            <div class="row">-->
                            @*<button type="button" class="btn btn-info shadow" id="AddItem">
                                    + Add Item
                                </button>*@
                            <!--<button type="button" class="btn btn-primary btn-sm shadow" id="AddItem" style="background: linear-gradient(85deg, #392c70, #6a005b); margin-left: 1rem;">
                                    + Add Item
                                </button>
                            </div>-->
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                            @*@Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:block" })*@
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row float-right mr-1">
                <div>
                    @*<button type="submit" id="btnSave" class="btn btn-primary mr-2 float-right" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="createJson(); SetInwardQty();">Submit</button>*@
                    <button type="submit" id="btnSave" class="btn btn-primary mr-2 float-right" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="createJson()">Submit</button>
                </div>
                <div>
                    @*<button type="button" id="btnBack" class="btn btn-primary mr-2 float-right text-white" style="background: linear-gradient(85deg, #392c70, #6a005b);">
                            @Html.ActionLink("Back to List", "Index", new { @class = "btn btn-primary mr-2 float-right font-weight-light text-white" }, new { style = "background: linear-gradient(85deg, #392c70, #6a005b); color: white;" })
                        </button>*@
                    <a href="@Url.Action("Index", "StockTransfer")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                        Back To List
                    </a>
                </div>
            </div>
            <br />

            <!--<div class="row text-right">
            <div class="col">
                <button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);">Save</button>
            </div>

            <a href="@Url.Action("Index", "PurchaseOrder")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);">Back To List</a>-->
            @*<button type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);">Submit</button>
                <a href="@Url.Action("Index", "PurchaseOrder")" class="btn btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);">
                    Back To List
                </a>*@

            <!--</div>-->

        </div>
    </div>
    @Html.TextBoxFor(model => model.QuantitiesForSorting, new { style = "display:none" })
    @Html.TextBoxFor(model => model.BalanceQuantities, new { style = "display:none" })
    @Html.TextBoxFor(model => model.RejectedQuantities, new { style = "display:none" })
    @Html.TextBoxFor(model => model.WastageQuantities, new { style = "display:none" })
    @Html.TextBoxFor(model => model.ReasonsForRejection, new { style = "display:none" })

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">
    var QuantitiesForSorting = "";
    var BalanceQuantities = "";
    var RejectedQuantities = "";
    var WastagePercentages = "";
    var Reasons = "";
    function SelectedIndexChangedFromLocation(id) {
        //alert(id);
        debugger
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("FromLocationId").selectedIndex;
        locationName = document.getElementById("FromLocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("FromLocationName").value = locationName;

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }
        $.ajax({
            type: "POST",
            url: `/StockTransfer/BindFromLocationMaster?id=` + id,
            data: "{ }",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                //console.log(result);

                var ColCount = result.length

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            cell.innerHTML = result[j].Item_Code;                           
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_Name;
                        }
                        else if (i == 2) {                            
                            cell.innerHTML = result[j].Quantity + " Kg";
                            cell.setAttribute("id", "ItemQty" + j);
                        }
                        else if (i == 3) {

                            //cell.innerHTML = result[j].TransferQuantity + " Kg";
                            //cell.setAttribute("id", "TransferQty" + j);
                            var t3 = document.createElement("input");
                            t3.id = "TransferQty" + j;

                            var cellData = document.getElementById("ItemQty" + j);
                            var temp_itemQty = cellData.innerHTML.split(' ');
                            var deliveredQty = parseFloat(temp_itemQty[0]);

                            if (result[j].TransferQuantity == deliveredQty) {
                                t3.setAttribute("disabled", "true");
                            }
                            else {
                                t3.removeAttribute("disabled", "false");
                                t3.removeAttribute("disabled", "true");
                                //t3.setAttribute("onclick", "createJson()");
                               // t3.setAttribute("onkeyup", "OnKeyTransferQty($(this).val())");
                                t3.setAttribute("onchange", "OnChangeQCQty($(this).val(),id)");
                            }
                            t3.setAttribute("type", "number");
                            cell.appendChild(t3);

                        }
                        else if (i == 4) {

                            //cell.innerHTML = result[j].FinalQuantity + " Kg";
                            //cell.setAttribute("id", "FinalQty" + j);

                            var t4 = document.createElement("input");
                            t4.id = "FinalQty" + j;
                            t4.setAttribute("disabled", "true");
                            if (result[j].QuantityTookForSorting == deliveredQty) {
                                t4.setAttribute("value", result[j].WastageQuantityInPercentage != 0 ? result[j].WastageQuantityInPercentage : '0');
                            }
                            cell.appendChild(t4);
                        }
                        else if (i == 5) {
                            cell.innerHTML = result[j].UnitCode;
                            cell.setAttribute("id", "UnitCode");
                        }
                        else if (i == 6) {
                            cell.innerHTML = result[j].UnitPrice;
                            cell.setAttribute("id", "UnitPrice" + j);
                        }
                        else if (i == 7) {
                            cell.innerHTML = result[j].ItemTaxValue;
                            cell.setAttribute("id", "ItemTaxValue" + j);
                        }
                        else if (i == 8) {
                            var t8 = document.createElement("input");
                            t8.id = "txtRemarks_" + j;
                            if (result[j].QuantityTookForSorting == deliveredQty) {
                                t8.setAttribute("value", result[j].Remarks);
                                t8.setAttribute("disabled", "true");
                            }
                            else {
                                //t8.removeAttribute("disabled", "false");
                                t8.removeAttribute("disabled", "true");
                                t8.setAttribute("onkeyup", "OnKeyRemark($(this).val(),id)");
                                t8.setAttribute("onchange", "OnChangeRemarkQty($(this).val(),id)");
                            }
                            cell.appendChild(t8);
                        }

                    }

                }
            }
        });

       // getitemDetails();
        //$.ajax({
        //    type: "POST",
        //    url: `/StockTransfer/BindFromLocationMaster?id=` + id,
        //    data: "{}",
        //    contentType: "application/json; charset=utf-8",
        //    dataType: "json",
        //    success: function (result) {
        //        debugger;
        //        console.log(result);

        //        //var requiredQuantity = result[0].Quantity;
        //        //$("#RequiredQuantity").val(requiredQuantity);
        //        //var itemQty = result[0].Quantity;
        //        //var tempCount = counter;
        //        //$("#itemQuantity_" + counter).val(itemQty);
        //        //if (counter == 2) {
        //        //    tempCount--;
        //        //    $("#itemQuantity_" + tempCount).val(itemQty);
        //        //} else {
        //        //    tempCount = counter;
        //        //    tempCount--;
        //        //    $("#itemQuantity_" + tempCount).val(itemQty);
        //        //}
        //    }
        //});
    }

    function OnChangeRemarkQty(value, id) {
        Reasons = Reasons + id + "*" + value + ",";
    }

    function OnKeyRemark(value, id) {

        var RemarkLen = value.length;
        var rowNo = id.split('_');
        rowNo = rowNo[1];

        var RejQty = $("#txtRejectedQty" + rowNo).val();
        if (RejQty != null && RejQty != 0 && RejQty != '') {
            if (RemarkLen <= 0) {
                alert("Remarks cannot be empty!");
                document.getElementById(id).focus();
                //return false;
            }

        }
        if (RemarkLen > 150)
            alert("Exceeding the remark length!");
        createJson();
    }


    function OnChangeQCQty(value, id) {
        debugger
        OnKeyTransferQty();
        var rowNo = id.split('y')[1];
        var cell = document.getElementById("ItemQty" + rowNo);
        var temp_itemQty = cell.innerHTML.split(' ');
        var InwQty = parseFloat(temp_itemQty[0]);
        value = parseFloat(value);

        if (value > InwQty) {
            alert("QC quantity cannot be greater then Inward quantity!");
            document.getElementById(id).focus();
            document.getElementById(id).setAttribute("style", "border-color:red;");
            return;
        }
        else {
            var tempInwQty = document.getElementById("TransferQty" + rowNo).value;
            //console.log(tempInwQty + " " + InwQty);
            document.getElementById("FinalQty" + rowNo).value = ((parseFloat(temp_itemQty[0])) - parseFloat(tempInwQty));
            QuantitiesForSorting = QuantitiesForSorting + "TransferQty" + rowNo + "*" + value + ",";

            var BalQty = document.getElementById("FinalQty" + rowNo).value;
            BalanceQuantities = BalanceQuantities + "FinalQty" + rowNo + "*" + BalQty + ",";
            document.getElementById(id).setAttribute("style", "border-color:none;");
        }
        //onkeyup();
        //createJson();
        
    }


    function SelectedIndexChangedToLocation(id) {
        //alert(id);
        debugger
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("ToLocationId").selectedIndex;
        locationName = document.getElementById("ToLocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("ToLocationName").value = locationName;

        //$.ajax({
        //    type: "POST",
        //    url: `/PurchaseOrder/BindLocationMaster?id=` + id,
        //    data: "{}",
        //    contentType: "application/json; charset=utf-8",
        //    dataType: "json",
        //    success: function (result) {
        //        debugger;
        //        //console.log(result);
        //        var requiredQuantity = result[0].RequiredQuantity;
        //        $("#RequiredQuantity").val(requiredQuantity);
        //    }
        //});
    }

    //function SelectedIndexChangedItemList(id) {
    //    debugger
    //    var FromLocationCheck = $('#FromLocationId').val();
    //    var ToLocationCheck = $('#ToLocationId').val();

    //    if (FromLocationCheck == '' || FromLocationCheck == null) {
    //        debugger
    //        $('#FromLocationId').focus();
    //        document.getElementById('Item_ID').selectedIndex = 0;
    //        return;
    //    }
    //    else if (ToLocationCheck == '' || ToLocationCheck == null) {
    //        debugger
    //        $('#ToLocationId').focus();
    //        document.getElementById('Item_ID').selectedIndex = 0;
    //        return;
    //    }
    //    else {
    //        var selectedOptionTerms, itemCode;
    //        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
    //        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
    //        document.getElementById("Item_Code").value = itemCode;
    //    }

    //}

    function OnKeyTransferQty() {
        debugger
        var FromLocationCheck = $('#FromLocationId').val();
        var ToLocationCheck = $('#ToLocationId').val();

        if (FromLocationCheck == '' || FromLocationCheck == null) {
            debugger
            $('#FromLocationId').focus();
            document.getElementById('TransferQty').selectedIndex = 0;
            return;
        }
        else if (ToLocationCheck == '' || ToLocationCheck == null) {
            debugger
            $('#ToLocationId').focus();
            document.getElementById('TransferQty').selectedIndex = 0;
            return;
        }
        else if (ToLocationCheck == FromLocationCheck) {
            debugger
            $('#ToLocationId').focus();
            document.getElementById('TransferQty').selectedIndex = 0;
            return;
        }
        //else if (ToLocationCheck != FromLocationCheck) {
        //    debugger
        //    $('#TransferQty').focus();
        //    document.getElementById('TransferQty').selectedIndex = 0;
        //    return;
        //}
    }

    function SetInwardQty() {
        $('#QuantitiesForSorting').val(QuantitiesForSorting);
        $('#BalanceQuantities').val(BalanceQuantities);
        $('#RejectedQuantities').val(RejectedQuantities);
        $('#WastageQuantities').val(WastagePercentages);
        $('#ReasonsForRejection').val(Reasons);
        console.log(QuantitiesForSorting + "_" + BalanceQuantities + "_" + RejectedQuantities + "_" + WastagePercentages + "_" + Reasons);
    }

    var TxtItemDetails = "";

    function createJson() {
        debugger        
        //let res = [...document.getElementById("ItemTable").children].map(tr =>
        //    Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
        //        [el.name, el.value])));
        let res = [...document.getElementById("ItemTable").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        console.log(res);
        var TxtItemDetails = JSON.stringify(res);
        console.log(TxtItemDetails);
        $('#TxtItemDetails').val(TxtItemDetails);
    }

    @*$("#Item_ID").change(function () {
        debugger
        var FromLocationCheck = $('#FromLocationId').val();
        var ToLocationCheck = $('#ToLocationId').val();

        if (FromLocationCheck == '' || FromLocationCheck == null) {
            debugger
            $('#FromLocationId').focus();
            document.getElementById('Item_ID').selectedIndex = 0;
            return;
        }
        else if (ToLocationCheck == '' || ToLocationCheck == null) {
            debugger
            $('#ToLocationId').focus();
            document.getElementById('Item_ID').selectedIndex = 0;
            return;
        } else { getitemDetails();}

    });
    //Dropdownlist Selectedchange event
    function getitemDetails() {
                    $("#f").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',

                data: { id: $("#Item_ID").val(), locationId: $("#FromLocationId").val() },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                success: function (itemDescription) {
                debugger
                // states contains the JSON formatted list
                // of states passed from the controller
                    var description = JSON.stringify(itemDescription);
                    $("#Item_Name").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#RequiredQuantity").val(itemDescription.RequiredQuantity);
                    $("#TransferQuantity").val('0');
                    $("#FinalQuantity").val('0');
                },
                failure: function () {
                alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                alert('Failed to retrieve Item description.' + ex);
                }
                });
    }

    $("#TransferQuantity").change(function () {
        debugger
        var transferQuantity = $("#TransferQuantity").val();
        var requiredQuantity = $("#RequiredQuantity").val();

        //Set total price in item grid.
        var finalQuantity = requiredQuantity - transferQuantity;
        $("#FinalQuantity").val(finalQuantity);
    });

    var counter = 1;

    $("#AddItem").click(function () {
        debugger
        //'<select id="ItemID" class="form-control form-control-sm" name="ItemID[' + counter + ']" required="required" /><optio >--Select Item--</option></select>' +
        //var nameItem = "Item_ID['" + counter + "']";
        var itemId = "ItemID_" + counter;
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var itemQuantity = "itemQuantity_" + counter;
        var itemUnit = "itemUnit_" + counter;
        var transferQuantity = "transferQuantity_" + counter;
        var finalQuantity = "finalQuantity_" + counter;
        var remarks = "remarks_" + counter;
        $('<tr id="tablerow' + counter + '">' + '<td>' +
            //'<select id="ItemID" class="form-control form-control-sm" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" required="required" /></select>' +
            //'<input type="text" id="ItemID" class="form-control form-control-sm" style = "height:30px;width:100px;" name="ItemID[' + counter + ']" value="" required="required" />' +
            '<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:30px;width:100px;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemCode + '" class="form-control form-control-sm" style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemDescription + '" class="form-control form-control-sm" style = "height:30px;width:200px;" name="' + itemDescription + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /*'<input type="text" id="' + itemQuantity + '" onkeyup="calcTax(' + counter + ',' + this.value + ')"; class="form-control form-control-sm" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +*/
        /*'<input type="text" id="' + itemQuantity + '" onchange="CalItemTotalPrice($(this).val(),id)"; class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="0"     required="required" />' +*/
            '<input type="text" id="' + itemQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + itemQuantity + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control form-control-sm" style = "height:30px;width:100px;" name="' + itemUnit + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            /*'<input type="text" id="' + transferQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + transferQuantity + '" value="" required="required" />' +*/
            '<input type="text" id="' + transferQuantity + '" onchange="CalItemTotalPrice($(this).val(),id)"; class="form-control form-control-sm text-right" style = "height:30px;width:100px;" name="' + transferQuantity + '" value="0"     required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + finalQuantity + '" class="form-control form-control-sm text-right" style = "height:30px;width:80px;" name="' + finalQuantity + ' " value="0" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + remarks + '" class="form-control form-control-sm text-right" style = "height:30px;width:200px;" name="' + remarks + '" value="ok" required="required" />' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-primary btn-sm" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');
        var id = $('#FromLocationId').val();
        SelectedIndexChangedFromLocation(id);
        counter++;
        return false;
    });

    function CalItemTotalPrice(value, id) {
        debugger
        //alert(value + " " + id);
        var temp_rowNo = id.split('_');
        var rowNo = temp_rowNo[1];
        value = parseFloat(value);
        if (value != 0) {
            var transferQuantity = $("#transferQuantity_" + rowNo).val();
            transferQuantity = parseFloat(transferQuantity);
            var requiredQuantity = $("#itemQuantity_" + rowNo).val();
            requiredQuantity = parseFloat(requiredQuantity);
            var finalQuantity = requiredQuantity - transferQuantity;
            $("#finalQuantity_" + rowNo).val(finalQuantity);
        }
        createJson();
    }

    var TxtItemDetails = "";

    function createJson() {
        debugger
        //var table = $('#submissionTable').tableToJSON();
        ////table = { "myrows": table };//make myrows the parent object
        //alert(JSON.stringify(table));
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        console.log(res);
        var TxtItemDetails = JSON.stringify(res);
        console.log(TxtItemDetails);
        $('#TxtItemDetails').val(TxtItemDetails);
    }

        function getitemDetailsJSTbl(count) {
        debugger
        console.log(count);
        var itemId = "ItemID_" + count;
        var selectedItemId = $("#" + itemId).val();
                    $.ajax({
                type: 'POST',
                //url: '@Url.Action("GetitemDetails?id='+${itemId}+'")', // we are calling json method
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',
                        data: { id: selectedItemId, locationId: $("#FromLocationId").val() },
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                        success: function (itemDescription) {
                    debugger
                    // states contains the JSON formatted list
                    // of states passed from the controller

                            var description = JSON.stringify(itemDescription);
                            console.log(description);
                    // var item = description.split("#");
                            //alert('hh' + itemDescription.Item_Name + "  " +itemDescription.UnitName+" "+itemDescription.Price);
                            $("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#itemQuantity_" + count).val(itemDescription.RequiredQuantity);
                            //$("#itemTax_" + count).val(itemDescription.ItemTaxValue);
                            $("#transferQuantity_" + count).val('0');
                            $("#finalQuantity_").val('0');
                            $("#remarks_").val('ok');
                            //$("#totalItemCost_" + count).val('0');

                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


       // $("#itemDescription" + count).val(count.Item_Name);

    }


    function removeTr(index) {
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        //console.log("Length: " + length + counter);
        if (counter > 1 & length == index) {
            $('#tablerow' + index).remove();
            counter--;
        }
        else {
            $('#tablerow' + index).remove();
        }
        return false;
    }*@

</script>
@Html.Raw(TempData["Success"])
