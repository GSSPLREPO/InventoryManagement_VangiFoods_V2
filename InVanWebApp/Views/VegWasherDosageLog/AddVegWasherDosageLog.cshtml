@model InVanWebApp_BO.VegWasherDosageLogBO

@{
    ViewBag.Title = "AddVegWasherDosageLog";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}
@using (Html.BeginForm("AddVegWasherDosageLog", "VegWasherDosageLog", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-body">
            <h4>Add Veg Washer Dosage Log</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("User")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VerifyByName, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.VerifyByName, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <hr />
            <div class="row">
                <h4 style="color:darkcyan">Veg Washer-1</h4>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Solution-A (ml)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VegWasher1SolutionAMl, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return isNumberKey(event);" })
                    @Html.ValidationMessageFor(model => model.VegWasher1SolutionAMl, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Solution-B (ml)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VegWasher1SolutionBMl, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return isNumberKey(event);" })
                    @Html.ValidationMessageFor(model => model.VegWasher1SolutionBMl, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Name of Item")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.NameOfItem1, new { @class = "form-control form-control-sm", maxlength = "30", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.NameOfItem1, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Washing Time")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WashingTime1, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericRound(event);" })
                    @Html.ValidationMessageFor(model => model.WashingTime1, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PPM")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Ppm1, new { @class = "form-control form-control-sm", maxlength = "20" })
                    @Html.ValidationMessageFor(model => model.Ppm1, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <hr />
            <div class="row">
                <h4 style="color:darkcyan">Veg Washer-2</h4>
            </div>
            <br />


            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Solution-A ml")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VegWasher2SolutionAMl, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return isNumberKey(event);" })
                    @Html.ValidationMessageFor(model => model.VegWasher2SolutionAMl, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Solution-B (ml)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VegWasher2SolutionBMl, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return isNumberKey(event);" })
                    @Html.ValidationMessageFor(model => model.VegWasher2SolutionBMl, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Name of Item")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.NameOfItem2, new { @class = "form-control form-control-sm", maxlength = "30", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.NameOfItem2, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Washing Time")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WashingTime2, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericRound(event);" })
                    @Html.ValidationMessageFor(model => model.WashingTime2, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PPM")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Ppm2, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.Ppm2, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remark, new { @class = "form-control form-control-sm", maxlength = "100", title = "Maximum length for remakrs are 100 characters" })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <br />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "VegWasherDosageLog")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script type="text/javascript">

    //Custom validation for only numeric, decimal and NA/na character.
    function customValidation(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57)
            || unicode == 46) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, alphabets, underscore and NA/na character.
    function IsAlphaNumeric(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57)
            || unicode == 95 || unicode == 32 || unicode == 45 || unicode == 46 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }
    //Custom validation for only numeric, alphabets, underscore and NA/na character.
    function IsAlphaNumericRound(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57)
            || unicode == 95 || unicode == 32 || unicode == 45 || unicode == 46 || unicode == 40 || unicode == 41 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }
    //Custom validation for only numeric, decimal.
    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }


</script>