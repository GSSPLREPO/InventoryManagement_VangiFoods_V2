@model InVanWebApp_BO.GRN_BO
@{
    ViewBag.Title = "AddGRN";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddGRN", "GRN"))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Goods Received Note</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("GRN Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.GRNCode, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.GRNCode, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("GRN Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.GRNDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date",@readonly="readonly" })
                    @Html.ValidationMessageFor(model => model.GRNDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Inward QC Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.InwardQCId, (IEnumerable<SelectListItem>)ViewData["InwardNumber"], "--Select--",
                   new { @class = "form-control", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.InwardQCId, "", new { id = "InwardQCIdErr", @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PONumber, new { @class = "form-control form-control-sm", @readonly="readonly" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { id = "PONumberErr", @class = "error mt-2 text-danger" })
                </div>
                @Html.HiddenFor(model => model.PO_ID)
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "--Select--",
                  new { @class = "form-control", onchange = "LocationChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { id = "LocationIdErr", @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Shipping Details")
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model=>model.DeliveryAddress, new { @class = "form-control form-control-sm" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Supplier Details")
                </div>
                <div class="col-md-4">
                    @Html.TextArea("SupplierDetails", new { @class = "form-control form-control-sm", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item details")
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-striped" id="ItemTable">
                        <tr>
                            <th>Item</th>
                            <th>Code</th>
                            <th>Unit</th>
                            <th>Unit Price</th>
                            <th>Total Quantity</th>
                            <th>Inward Quantity</th>
                            <th>Received Quantity</th>
                        </tr>
                    </table>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remark, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <a href="@Url.Action("Index", "GRN")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button type="submit" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right;">Save</button>
        </div>
    </div>
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<link href="~/Theme/MainContent/css/CustomDropdown.css" rel="stylesheet" />

<script type="text/javascript">

    //Vedant added 'function createCustomDropdown()' 30/06/23. start

    $(document).ready(function () {
        createCustomDropdown_InwardQCId();
        createCustomDropdown_LocationId();
    });

    function createCustomDropdown_InwardQCId() {
        $('select#InwardQCId').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#InwardQCId').removeClass('form-control');
                $(this).after('<div id="divInwardQCId" class="dropdown-select wide d-flex align-items-center' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divInwardQCId.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueInwardQCId" autocomplete="off" onkeyup="filterInwardQCId()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');

    }
    function filterInwardQCId() {
        var valThis = $('#txtSearchValueInwardQCId').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    function createCustomDropdown_LocationId() {
        $('select#LocationId').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#LocationId').removeClass('form-control');
                $(this).after('<div id="divLocationId" class="dropdown-select wide d-flex align-items-center' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divLocationId.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueLocationId" autocomplete="off" onkeyup="filterLocationId()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');

    }
    function filterLocationId() {
        var valThis = $('#txtSearchValueLocationId').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    // Event listeners

    // Open/close
    $(document).on('click', '.dropdown-select', function (event) {
        if ($(event.target).hasClass('dd-searchbox')) {
            return;
        }
        $('.dropdown-select').not($(this)).removeClass('open');
        $(this).toggleClass('open');
        if ($(this).hasClass('open')) {
            $(this).find('.option').attr('tabindex', 0);
            $(this).find('.selected').focus();
        } else {
            $(this).find('.option').removeAttr('tabindex');
            $(this).focus();
        }
    });
    // Close when clicking outside
    $(document).on('click', function (event) {
        if ($(event.target).closest('.dropdown-select').length === 0) {
            $('.dropdown-select').removeClass('open');
            $('.dropdown-select .option').removeAttr('tabindex');
        }
        event.stopPropagation();
    });
    // Option click
    $(document).on('click', '.dropdown-select .option', function (event) {
        $(this).closest('.list').find('.selected').removeClass('selected');
        $(this).addClass('selected');
        var text = $(this).data('display-text') || $(this).text();
        $(this).closest('.dropdown-select').find('.current').text(text);
        $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
    });

    // Keyboard events
    $(document).on('keydown', '.dropdown-select', function (event) {
        var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
        // Space or Enter
        //if (event.keyCode == 32 || event.keyCode == 13) {
        if (event.keyCode == 13) {
            if ($(this).hasClass('open')) {
                focused_option.trigger('click');
            } else {
                $(this).trigger('click');
            }
            return false;
            // Down
        } else if (event.keyCode == 40) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                focused_option.next().focus();
            }
            return false;
            // Up
        } else if (event.keyCode == 38) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
                focused_option.prev().focus();
            }
            return false;
            // Esc
        } else if (event.keyCode == 27) {
            if ($(this).hasClass('open')) {
                $(this).trigger('click');
            }
            return false;
        }
    });

    //Vedant added 'function createCustomDropdown()' 30/06/23. end


    function SelectedIndexChanged(id) {

        $('#InwardQCIdErr').hide();
        //For deleting the rows of Item table if exist.

        var table = document.getElementById('ItemTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        //Clearing the address textarea
        $('#DeliveryAddress').val(' ');
        $('#SupplierDetails').val(' ');

        $.ajax({
            type: "POST",
            url: `/GRN/BindInwardDetails?id=` + id,
            data: "{ }",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                $('#PONumberErr').hide();
                $('#LocationIdErr').hide();

                $('#PO_ID').val(result[0].PO_Id);
                $('#PONumber').val(result[0].PONumber);
                $('#LocationId').val(result[0].LocationStockID);
                $('#DeliveryAddress').val(result[0].DeliveryAddress);
                $('#SupplierDetails').val(result[0].SupplierAddress);

                var ColCount = result.length

                //===================Create dynamic table for binding Item details====================//
                var table = document.getElementById('ItemTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);
                        if (i == 0) {
                            cell.innerHTML = result[j].Item_Name;
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_Code;
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemUnit;
                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemUnitPrice + " " + result[j].CurrencyName ;
                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].TotalQuantity + " KG";
                        }
                        else if (i == 5) {
                            cell.innerHTML = result[j].InwardQuantity +" KG";
                        }
                        else if (i == 6) {
                            cell.innerHTML = result[j].ReceivedQty +" KG";
                        }
                    }

                }
            }
        });
    }

    function LocationChanged(id) {
        $('#LocationIdErr').hide();

        $.ajax({
            type: "POST",
            url: `/GRN/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }

</script>

@Html.Raw(TempData["Success"])

