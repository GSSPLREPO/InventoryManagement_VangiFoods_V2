@model InVanWebApp_BO.OutwardNoteBO
@{
    ViewBag.Title = "AddOutwardNote";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddOutwardNote", "OutwardNote", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Gate Pass</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Gate Pass Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.OutwardNumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.OutwardNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.OutwardDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.OutwardDate, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Is Returnable")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.IsReturnable, new List<SelectListItem>{
                    new SelectListItem{ Text="Non-Returnable", Value = "false" },
                    new SelectListItem{ Text="Returnable", Value = "true" }
                    }, new { @class = "form-control DropdownRegular" })

                    @Html.ValidationMessageFor(model => model.IsReturnable, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Verified By")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.VerifiedBy, (IEnumerable<SelectListItem>)ViewData["EmployeeName"], "---Select---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.VerifiedBy, "", new { @class = "error mt-2 text-danger" })
                </div>
                @Html.HiddenFor(model => model.VerifiedByName)
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.DropDownListFor(model => model.LocationID, (IEnumerable<SelectListItem>)ViewData["LocationList"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.HiddenFor(model => model.LocationName)
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Location Address
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.LocationAddress, new { @class = "form-control", placeholder = "Supplier address", style = "height:100px", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.LocationAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Address
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Dispatch Through")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DispatchThrough, new { @class = "form-control form-control-sm", onkeypress = "return isAlphabetic(event,2)", maxlength = "30" })
                    @Html.ValidationMessageFor(model => model.DispatchThrough, "", new { id = "valDispatchThrough", @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Docket/LR Number")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DocketNumber, new { @class = "form-control form-control-sm", maxlength = "30", onkeypress = "return isAlphaNumeric(event)" })
                    <span id="valDocketNumber" style="display:none;"></span>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Contact Person")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ContactPerson, new { @class = "form-control form-control-sm", onkeypress = "return isAlphabetic(event,1)", maxlength = "25" })
                    @Html.ValidationMessageFor(model => model.ContactPerson, "", new { id = "valContactPerson", @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Contact Number")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ContactInformation, new { @class = "form-control form-control-sm", maxlength = "10" })
                    @Html.ValidationMessageFor(model => model.ContactInformation, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Vehicle No")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VehicleNo, new { @class = "form-control form-control-sm", maxlength = "11", onkeypress = "return isAlphaNumericForVehicleNo(event)" })
                    @Html.ValidationMessageFor(model => model.VehicleNo, "", new { id = "valVehicleNumber", @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("Purpose/Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <hr />
            <div class="row">
                <h4 style="color:darkcyan">Item Details</h4>
            </div>
            <hr />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr style="background-color:rgba(0, 0, 0, 0.10);">
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle d-n d-none">Item Id</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">Shipping Quantity</th>
                                                <th class="sortStyle">Units</th>
                                                <th class="sortStyle">Comments</th>
                                                <th class="sortStyle"></th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            <tr id="tablerow">
                                                <td>
                                                    @*@Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;" })*@
                                                    @*Rahul updated 'DropDownList Item_ID' '---------- Select Item ----------' 16-08-23.*@
                                                    @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "-------------------- Select Item --------------------", new { @class = "form-control form-control-sm @*DropdownRegular*@", style = "height:30px;width:auto;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                </td>
                                                <td class="col-md-4 d-none">
                                                    @Html.TextBoxFor(model => model.ItemCode, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemName", "", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.ShippedQuantity, new { @class = "form-control form-control-sm", style = "height:30px;", value = "0", onkeypress = "return isNumberKey(event)", MaxLength = "8", onchange = "onShippedQtyChange()" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnit", "", new { @class = "form-control form-control-sm", style = "height:30px;width:auto;", @readonly = "readonly" })
                                                </td>

                                                <td>
                                                    @Html.TextBoxFor(model => model.Comments, new { @class = "form-control form-control-sm", style = "height:30px;width:auto;", maxLength = "95" })
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" enable="true" disabled>Delete</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <br /><br /><br /><br />
                                    <button type="button" class="btn btn-sm btn-primary shadow" style="background: linear-gradient(85deg, #392c70, #6a005b);" id="AddItem">
                                        + Add Item
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            @*<label style="color:red;font-size:12px; float:left;">(Note: Only .png,.jpeg and jpg are allowed!)</label>*@
                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />
                                <!-- Image preview -->
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                        <label style="color:red;font-size:12px; float:left;">(Note: Only .png,.jpeg and jpg are allowed!)</label>

                    </div>
                </div>
                <br />
            </div>
            <br />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "OutwardNote")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.txtItemDetails)
        </div>
    </div>
}
@Html.Raw(TempData["Success"])
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
@*<script src="~/Scripts/Script/AddOutwardNote.js"></script>*@
<link href="~/Theme/MainContent/css/CustomDropdown.css" rel="stylesheet" />

<script type="text/javascript">

    // Vedant added function SelectedIndexChangedItemList(id) 06/07/23
    function SelectedIndexChangedItemList(id) {

        $('#btnSave').prop('disabled', false);
        getitemDetails();

        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        itemCode = itemCode.split(' (')[0];
        document.getElementById("ItemCode").value = itemCode;
    }

    //Vedant added 'function createCustomDropdown()' 05/07/23. start

    $(document).ready(function () {
        createCustomDropdown_VerifiedBy();
        createCustomDropdown_LocationID();
        createCustomDropdown_Item_ID("Item_ID");
    });

    function createCustomDropdown_VerifiedBy() {
        $('select#VerifiedBy').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#VerifiedBy').removeClass('form-control');
                $(this).after('<div id="divVerifiedBy" class="dropdown-select wide d-flex align-items-center' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divVerifiedBy.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueVerifiedBy" autocomplete="off" onkeyup="filterVerifiedBy()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');

    }
    function filterVerifiedBy() {
        var valThis = $('#txtSearchValueVerifiedBy').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    function createCustomDropdown_LocationID() {
        $('select#LocationID').each(function (i, select) {

            if (!$(this).next().hasClass('dropdown-select')) {

                $('#LocationID').removeClass('form-control');
                $(this).after('<div id="divLocationID" class="dropdown-select wide d-flex align-items-center' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#divLocationID.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValueLocationID" autocomplete="off" onkeyup="filterLocationID()" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');

    }
    function filterLocationID() {
        var valThis = $('#txtSearchValueLocationID').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    function createCustomDropdown_Item_ID(id) {
        $('select#' + id).each(function (i, select) {
            if (!$(this).next().hasClass('dropdown-select')) {
                $('#' + id).removeClass('form-control');
                $('#' + id).removeClass('form-control-sm');
                $(this).after('<div id="div' + id + '" class="dropdown-select wide d-flex align-items-center' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
                var dropdown = $(this).next();
                var options = $(select).find('option');
                var selected = $(this).find('option:selected');
                dropdown.find('.current').html(selected.data('display-text') || selected.text());
                options.each(function (j, o) {
                    var display = $(o).data('display-text') || '';
                    dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                });
            }
        });
        $('#div' + id + '.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValue' + id + '" autocomplete="off" onkeyup="filterItem_ID(id)" class="dd-searchbox" type="text" placeholder="Search for list" ><br />&nbsp;<span id="faSearch"><i class="fas fa-search"></i></span></div>');
    }
    function filterItem_ID(id) {
        //debugger
        var valThis = $('#' + id + '').val();
        $('.dropdown-select ul > li').each(function () {
            var text = $(this).text();
            (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
        });
    };

    // Event listeners

    // Open/close
    $(document).on('click', '.dropdown-select', function (event) {
        if ($(event.target).hasClass('dd-searchbox')) {
            return;
        }
        $('.dropdown-select').not($(this)).removeClass('open');
        $(this).toggleClass('open');
        if ($(this).hasClass('open')) {
            $(this).find('.option').attr('tabindex', 0);
            $(this).find('.selected').focus();
        } else {
            $(this).find('.option').removeAttr('tabindex');
            $(this).focus();
        }
    });
    // Close when clicking outside
    $(document).on('click', function (event) {
        if ($(event.target).closest('.dropdown-select').length === 0) {
            $('.dropdown-select').removeClass('open');
            $('.dropdown-select .option').removeAttr('tabindex');
        }
        event.stopPropagation();
    });
    // Option click
    $(document).on('click', '.dropdown-select .option', function (event) {
        $(this).closest('.list').find('.selected').removeClass('selected');
        $(this).addClass('selected');
        var text = $(this).data('display-text') || $(this).text();
        $(this).closest('.dropdown-select').find('.current').text(text);
        $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
    });

    // Keyboard events
    $(document).on('keydown', '.dropdown-select', function (event) {
        var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
        // Space or Enter
        //if (event.keyCode == 32 || event.keyCode == 13) {
        if (event.keyCode == 13) {
            if ($(this).hasClass('open')) {
                focused_option.trigger('click');
            } else {
                $(this).trigger('click');
            }
            return false;
            // Down
        } else if (event.keyCode == 40) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                focused_option.next().focus();
            }
            return false;
            // Up
        } else if (event.keyCode == 38) {
            if (!$(this).hasClass('open')) {
                $(this).trigger('click');
            } else {
                var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
                focused_option.prev().focus();
            }
            return false;
            // Esc
        } else if (event.keyCode == 27) {
            if ($(this).hasClass('open')) {
                $(this).trigger('click');
            }
            return false;
        }
    });

    //Vedant added 'function createCustomDropdown()' 05/07/23. end

    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        var VerifiedName = $("#VerifiedBy option:selected").text();
        $("#VerifiedByName").val(VerifiedName);

        var LocaitonName = $("#LocationID option:selected").text();
        $("#LocationName").val(LocaitonName);

        var tableLength = document.getElementById('submissionTable').rows.length;
        var flag = 0, i = 1, verifiedByFlag=0;

        var VerifiedBy = $('#VerifiedBy').val();
        if (VerifiedBy == '' || VerifiedBy == null) {
            verifiedByFlag = 1;
        }

        if (tableLength > 1) {
        var PhyQty = document.getElementById("ShippedQuantity").value;
        if (PhyQty == '')
            flag = 1;
        else
            PhyQty = parseFloat(PhyQty);

        if (PhyQty == 0) {
            flag = 1;
        }

        while (i <= tableLength - 2) {
            if (document.getElementById("shippedQuantity_" + i) == null) {
                    i++;
            }
            else {
                PhyQty = document.getElementById("shippedQuantity_" + i).value;
                if (PhyQty == '')
                    flag = 1;
                else
                    PhyQty = parseFloat(PhyQty);

                if (PhyQty == 0)
                    flag = 1;

                i++;
            }
        }

            if (verifiedByFlag == 1) {
                //event.preventDefault();
                return;
            }
        else if (flag == 1) {
            alert("No item shipped or Added items shipped quantity is zero, Cannot generate gate pass!");
            $('#btnSave').prop('disabled', true);
            return;
        }

        else
            $('#btnSave').prop('disabled', false);
    }

        createJson();
    };
    //==========end===============

    function onShippedQtyChange() {
        $('#btnSave').prop('disabled', false);
    }

    //==========================On location change==================================
    function SelectedIndexChangedLocation(id) {
    $('#btnSave').prop('disabled', false);

    var selectedOptionLocationName, locationName;
    selectedOptionLocationName = document.getElementById("LocationID").selectedIndex;
    locationName = document.getElementById("LocationID").options[selectedOptionLocationName].innerText;
    document.getElementById("LocationName").value = locationName;

    $.ajax({
        type: "POST",
        url: `/PurchaseOrder/BindLocationMaster?id=` + id,
        data: "{}",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (result) {
            ////debugger;
            //console.log(result);
            var deliveryAdd = result[0].DeliveryAddress;
            $("#LocationAddress").val(deliveryAdd);
        }
    });
}
    //===========================end=================================

    $("#Item_ID").change(function () {
    $('#btnSave').prop('disabled', false);
    getitemDetails();
});

    function getitemDetails() {
    $("#f").empty();
    $.ajax({
        type: 'POST',
        url: '@Url.Action("GetitemDetails","PurchaseOrder")', // we are calling json method

        dataType: 'json',

        data: { id: $("#Item_ID").val(), currencyId: '0' },
        // here we are get value of selected item and passing same value
        //as inputto json method GetitemDetails.

        success: function (itemDescription) {

            var description = JSON.stringify(itemDescription);
            $("#ItemName").val(itemDescription.Item_Name);
            $("#ItemCode").val(itemDescription.Item_Code);
            $("#ItemUnit").val(itemDescription.UnitCode);
            $("#ShippedQuantity").val('0');
        },
        failure: function () {
            alert('Failed to retrieved item detals!');
        },
        error: function (ex) {
            alert('Failed to retrieve Item description.' + ex);
        }
    });


}

    function getitemDetailsJSTbl(count) {
    var itemId = "ItemID_" + count;
    var selectedItemId = $("#" + itemId).val();
    $.ajax({
        type: 'POST',
        url: '@Url.Action("GetitemDetails","PurchaseOrder")', // we are calling json method

        dataType: 'json',
        data: { id: selectedItemId, currencyId: '0' },

        success: function (itemDescription) {
            var description = JSON.stringify(itemDescription);
            $("#itemCode_" + count).val(itemDescription.Item_Code);
            $("#itemDescription_" + count).val(itemDescription.Item_Name);
            $("#itemUnit_" + count).val(itemDescription.UnitCode);
            $("#shippedQuantity_" + count).val('0');
        },
        failure: function () {
            alert('Failed to retrieved item detals!');
        },
        error: function (ex) {
            alert('Failed to retrieve Item description.' + ex);
        }
    });
}

    var counter = 1;
    $("#AddItem").click(function () {
    var itemId = "ItemID_" + counter;
    var itemCode = "itemCode_" + counter;
    var itemDescription = "itemDescription_" + counter;
    var itemQuantity = "shippedQuantity_" + counter;
    var itemUnit = "itemUnit_" + counter;
    var comment = "comments_" + counter;
    $('<tr id="tablerow' + counter + '">' + '<td>' +
        '<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter + ')"; class="form-control form-control-sm" data-val="true" data-val-number="The field Item_ID must be a number." name="' + itemId + ' " style="height:30px;width:auto;" aria-describedby="Item_ID-error" aria-invalid="false">' + $('#Item_ID').html() + '</select>' +
        '</td>' +
        '<td class="d-none">' +
        '<input type="text" id="' + itemCode + '" class="form-control form-control-sm" style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
        '</td>' +
        '<td>' +
        '<input type="text" id="' + itemDescription + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + itemDescription + '"readonly = "readonly" value="" required="required" />' +
        '</td>' +
        '<td>' +
        '<input type="text" id="' + itemQuantity + '" class="form-control form-control-sm" style = "height:30px;" name="' + itemQuantity + '" value="0" onkeypress = "return isNumberKey(event)" required="required" maxlength="8", onchange="onShippedQtyChange()" />' +
        '</td>' +
        '<td>' +
        '<input type="text" id="' + itemUnit + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + itemUnit + '"readonly = "readonly" value="" required="required" />' +
        '</td>' +
        '<td>' +
        '<input type="text" id="' + comment + '" class="form-control form-control-sm" style = "height:30px;width:auto;" name="' + comment + '"value="" maxLength = "95" />' +
        '</td>' +
        '<td>' +
        '<button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
        '</td>' +
        '</tr>').appendTo('#submissionTable');
        createCustomDropdown_Item_ID(itemId); 
    counter++;
    return false;
});

    function removeTr(index) {
    var length = document.getElementById("submissionTable").rows.length;
    length = parseFloat(length) - 1;
    if (counter > 1 & length == index) {
        $('#tablerow' + index).remove();
        counter--;
    }
    else {
        $('#tablerow' + index).remove();
    }
    return false;
}

    var TxtItemDetails = "";

    function createJson() {
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));
        var TxtItemDetails = JSON.stringify(res);
        $('#txtItemDetails').val(TxtItemDetails);
}

    function isNumberKey(evt) {
    var keycode = (evt.which) ? evt.which : evt.keyCode;
    if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
        return false;
    }
    else {
        var parts = evt.srcElement.value.split('.');
        if (parts.length > 1 && keycode == 46)
            return false;
        else
            return true;
    }
    return true;
}

    function fileValidation() {
    var fileInput =
        document.getElementById('file');

    var filePath = fileInput.value;

    // Allowing file type
    var allowedExtensions =
        /(\.jpg|\.jpeg|\.png)$/i;

    if (!allowedExtensions.exec(filePath)) {
        alert('Invalid file type');
        fileInput.value = '';
        return false;
    }
    else {

        // Image preview
        if (fileInput.files && fileInput.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById(
                    'imagePreview').innerHTML =
                    '<img src="' + e.target.result
                    + '" style="height:10%;width:20%" />';
            };

            reader.readAsDataURL(fileInput.files[0]);
        }
    }
}


    function isAlphaNumeric(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!((keycode > 46 && keycode < 58) || (keycode > 64 && keycode < 91) || (keycode > 96 && keycode < 123) || (keycode == 45) || (keycode == 95) || (keycode == 32))) {
            var valMsg = 'Only \"/, -,_\" are allowed!';

            $('#valDocketNumber').text(valMsg);
            $('#valDocketNumber').css('display', 'contents');
            $('#valDocketNumber').css('color', 'red');
            return false;
        }
        else {
            $('#valDocketNumber').css('display', 'none');
            return true;
        }
    }

    function isAlphaNumericForVehicleNo(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!((keycode > 46 && keycode < 58) || (keycode > 64 && keycode < 91) || (keycode > 96 && keycode < 123))) {
            var valMsg = 'Only alphanumeric value is allowed!';

            $('#valVehicleNumber').text(valMsg);
            $('#valVehicleNumber').css('display', 'contents');
            $('#valVehicleNumber').css('color', 'red');
            return false;
        }
        else {
            $('#valVehicleNumber').css('display', 'none');
            return true;
        }
    }

    function isAlphabetic(evt, Id) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!((keycode > 64 && keycode < 91) || (keycode > 96 && keycode < 123) || keycode == 32)) {
            var valMsg = 'Only alphabets are allowed!';
            if (Id == 1) {
                $('#valContactPerson').text(valMsg);
                $('#valContactPerson').css('display', 'contents');
                $('#valContactPerson').css('color', 'red');
            }
            else if (Id == 2) {
                $('#valDispatchThrough').text(valMsg);
                $('#valDispatchThrough').css('display', 'contents');
                $('#valDispatchThrough').css('color', 'red');
            }
            return false;
        }
        else {
            if (Id==1)
                $('#valContactPerson').css('display', 'none');
            else if (Id==2)
                $('#valDispatchThrough').css('display', 'none');
            return true;
        }
    }
</script>