@model InVanWebApp_BO.DeliveryChallanBO
@{
    ViewBag.Title = "AddDeliveryChallan";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddDeliveryChallan", "DeliveryChallan", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Delivery Challan</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Delivery Challan Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DeliveryChallanNumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.DeliveryChallanNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Delivery Challan Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DeliveryChallanDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.DeliveryChallanDate, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Is Returnable")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.IsReturnable, new List<SelectListItem>{
                    new SelectListItem{ Text="Not-Returnable", Value = "false" },
                    new SelectListItem{ Text="Returnable", Value = "true" }
                    }, new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.IsReturnable, "", new { @class = "error mt-2 text-danger" })

                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("SO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.SO_Id, (IEnumerable<SelectListItem>)ViewData["SONumberList"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedSO(id)" })
                    @Html.ValidationMessageFor(model => model.SO_Id, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model => model.SONumber)
                </div>
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.HiddenFor(model => model.CurrencyID)
                    @Html.TextBoxFor(model => model.CurrencyName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.CurrencyName, "", new { @class = "error mt-2 text-danger" })

                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.LocationName, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.HiddenFor(model => model.LocationId)
                </div>
                <div class="col-md-2">
                    @Html.Label("Client Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.HiddenFor(model => model.VendorsID)
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Supplier Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.SupplierAddress, new { @class = "form-control", placeholder = "Supplier address", style = "height:100px", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.ShippingAddress, new { @class = "form-control", placeholder = "Delivery address", style = "height:100px", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.ShippingAddress, "", new { @class = "error mt-2 text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <div class="row">
                <h4 style="color:darkcyan">Item Details</h4>
            </div>
            <hr />

            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr style="background-color:rgba(0, 0, 0, 0.10);">
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle d-n d-none">Item Id</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">SO Quantity</th>
                                                <th class="sortStyle">Balance Quantity</th>
                                                <th class="sortStyle">Units</th>
                                                <th class="sortStyle">Shipping Quantity</th>
                                                <th class="sortStyle">Price (Per Unit)</th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">Item Tax</th>
                                                <th class="sortStyle">Total Item Price</th>
                                                <th class="sortStyle d-n d-none">BalanceQty</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <br />
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <hr />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-50 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            <label style="color:red;font-size:12px; float:right;">(Note: Only .png,.jpeg and jpg are allowed!)</label>
                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />
                                <!-- Image preview -->
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                    </div>
                    <div class="card" h-50>
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Terms and Conditions<span style="color:red"> * </span></h4>
                            <hr />
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.Label("Term Description")
                                </div>
                                <div class="col-md-9">
                                    @Html.TextAreaFor(model => model.Terms, new { @class = "form-control", placeholder = "Term Description", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.Terms, "", new { @class = "error mt-2 text-danger" })
                                    @Html.HiddenFor(model => model.TermsAndCondition_ID)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Payment Details</h4>
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax"><b>Total (before tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalBeforeTax" name="TotalBeforeTax" value="" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Other Tax: </b></label>
                                    <input class="form-control text-right form-control-sm" id="OtherTax" maxlength="8" name="OtherTax" value="0" onkeypress="return isNumberKey(event,id)" onchange="CalculateTotalBeforeTax()" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total tax (on items): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalTax" name="TotalTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total (after tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalAfterTax" name="TotalAfterTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total: </b></label>
                                    <input class="form-control text-right form-control-sm" id="GrandTotal" name="GrandTotal" readonly="readonly" />
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "DeliveryChallan")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.txtItemDetails)
        </div>
    </div>
}
@Html.Raw(TempData["Success"])
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}


<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script type="text/javascript">
    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    function SaveBtnClick() {
        var SONumber = $("#SO_Id option:selected").text();
        $("#SONumber").val(SONumber);

        var tableLength = document.getElementById('submissionTable').rows.length;
        var flag = 0, i = 1, balQtyFlag = 0;
        if (tableLength > 1) {
            while (i <= tableLength - 1) {
                var PhyQty = document.getElementById("txtShippingQty_" + i).value;
                PhyQty = parseFloat(PhyQty);

                var BalQty = document.getElementById("txtBalQty_" + i).value;
                BalQty = parseFloat(BalQty);

                if (BalQty == 0)
                    balQtyFlag = 1;

                if (PhyQty != 0) {
                    flag = 1;
                }

                i++;
            }

            if (balQtyFlag == 1) {
                alert("All items shipped, Cannot create its outward note!");
                $('#btnSave').prop('disabled', true);
                return;
            }
            else
                $('#btnSave').prop('disabled', false);

            if (flag != 1) {
                alert("No item shipped, Cannot create outward note!");
                $('#btnSave').prop('disabled', true);
                return;
            }
            else
                $('#btnSave').prop('disabled', false);
        }


        createJson();
    };
    //==========end===============

    //=====================Onchange of SO===========================
    function SelectedIndexChangedSO(id) {

        $('#btnSave').prop('disabled', false);

        //For deleting the rows of Item table if exist.

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        while (rowCount != '1') {
            var row = table.deleteRow(rowCount - 1);
            rowCount--;
        }

        var SO_Id = $("#SO_Id").val();

        $.ajax({
            url: '/DeliveryChallan/GetSODetails',
            type: "POST",
            data: { id: SO_Id },
            success: function (result) {
                $("#SONumber").val(result[0].SONo);
                $("#CurrencyID").val(result[0].CurrencyID);
                $("#CurrencyName").val(result[0].CurrencyName);
                $("#CurrencyPrice").val(result[0].CurrencyPrice);
                $("#LocationId").val(result[0].LocationId);
                $("#LocationName").val(result[0].LocationName);
                $("#VendorsID").val(result[0].ClientID);
                $("#CompanyName").val(result[0].CompanyName);
                $('#ShippingAddress').val(result[0].DeliveryAddress);
                $('#SupplierAddress').val(result[0].SupplierAddress);
                $('#TermsAndCondition_ID').val(result[0].TermsAndConditionID);
                $('#Terms').val(result[0].Terms);

                var table = document.getElementById('submissionTable');
                for (var j = 1; j < result.length; j++) {
                    var rowCount = table.rows.length;
                    var cellCount = table.rows[0].cells.length;
                    var row = table.insertRow(rowCount);
                    if (j % 2 == 0) {
                        row.setAttribute("style", "background-color:rgba(0, 0, 0, 0.05);");
                    }

                    for (var i = 0; i < cellCount; i++) {
                        var cell = 'cell' + i;
                        cell = row.insertCell(i);

                        if (i == 0) {
                            cell.innerHTML = result[j].Item_Code;
                            cell.setAttribute("id", "ItemCode_" + j);
                        }
                        else if (i == 1) {
                            cell.innerHTML = result[j].Item_ID;
                            cell.setAttribute("class", "d-none");
                            cell.setAttribute("id", "ItemID_" + j);
                        }
                        else if (i == 2) {
                            cell.innerHTML = result[j].ItemName;
                            cell.setAttribute("id", "ItemName_" + j);
                        }
                        else if (i == 3) {
                            cell.innerHTML = result[j].ItemQuantity;
                            cell.setAttribute("id", "SOQty_" + j);

                        }
                        else if (i == 4) {
                            cell.innerHTML = result[j].BalanceQuantity;
                            cell.setAttribute("id", "BalQty_" + j);
                        }
                        else if (i == 5) {
                            cell.innerHTML = result[j].ItemUnit;
                            cell.setAttribute("id", "ItemUnit_" + j);
                        }
                        else if (i == 6) {
                            var t5 = document.createElement("input");
                            t5.id = "txtShippingQty_" + j;
                            t5.setAttribute("value", "0");
                            t5.setAttribute("type", "number");
                            t5.setAttribute("onkeypress", "return isNumberKey(event,id)");
                            t5.setAttribute("onchange", "OnChangeQty($(this).val(),id)");
                            t5.setAttribute("class", "form-control form-control-sm");
                            if (result[j].BalanceQuantity == 0)
                                t5.setAttribute("readonly", "readonly");

                            cell.appendChild(t5);
                            var t6 = document.createElement('span');
                            t6.id = "spanShippingQty_" + j;
                            t6.setAttribute("class", "text-wrap");
                            cell.appendChild(t6);

                        }
                        else if (i == 7) {
                            cell.innerHTML = result[j].ItemUnitPrice;
                            cell.setAttribute("id", "ItemUnitPrice_" + j);
                        }
                        else if (i == 8) {
                            cell.innerHTML = result[j].CurrencyName
                            cell.setAttribute("id", "CurrencyName_" + j);
                        }
                        else if (i == 9) {
                            cell.innerHTML = result[j].ItemTaxValue + " %";
                            cell.setAttribute("id", "ItemTaxValue_" + j);
                        }
                        else if (i == 10) {
                            var t5 = document.createElement("input");
                            t5.id = "txtTotalItemCost_" + j;
                            t5.setAttribute("class", "form-control form-control-sm text-wrap");
                            t5.setAttribute("readonly", "readonly");
                            t5.setAttribute("value", "0");
                            cell.appendChild(t5);
                        }
                        else if (i == 11) {
                            var t5 = document.createElement("input");
                            t5.id = "txtBalQty_" + j;
                            t5.setAttribute("class", "d-none");
                            t5.setAttribute("value", result[j].BalanceQuantity);
                            cell.appendChild(t5);
                            cell.setAttribute("style", "display:none;");
                        }
                    }

                }

            },
            error: function (err) {
                alert('Not able to fetch SO item details!');

            }

        });
    }
    //=============End==============

    function OnChangeQty(value, id) {
        debugger;
        $('#btnSave').prop('disabled', false);
        $('#spanShippingQty_' + rowNo).text('');
        var rowNo = id.split('_')[1];
        var BalQty = document.getElementById("txtBalQty_" + rowNo).value;
        BalQty = parseFloat(BalQty);
        var unitPrice = document.getElementById("ItemUnitPrice_" + rowNo).innerHTML;
        unitPrice = parseFloat(unitPrice);

        var SOQty = document.getElementById("SOQty_" + rowNo).innerHTML;
        SOQty = parseFloat(SOQty);

        var OutwardQty = parseFloat(value);

        var DiffQty = 0;

        if (OutwardQty > BalQty) {
            $('#spanShippingQty_' + rowNo).text('Outward quantity cannot be greater than balance quantity!');
            document.getElementById('spanShippingQty_' + rowNo).setAttribute('style', 'color:red;');
            document.getElementById(id).focus();
            return;
        }
        else {
            $('#spanShippingQty_' + rowNo).text('');
            DiffQty = BalQty - OutwardQty;
            DiffQty = parseFloat(DiffQty);
            document.getElementById("BalQty_" + rowNo).innerHTML = DiffQty;

            document.getElementById("txtTotalItemCost_" + rowNo).value = Math.round(OutwardQty * unitPrice);

        }
        CalculateTotalBeforeTax();

    }

    function CalculateTotalBeforeTax() {
        debugger;
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        var total = 0;
        var totalTax = 0;
        var OtherTax = document.getElementById("OtherTax").value;
        OtherTax = parseFloat(OtherTax);
        var i = 1;
        while (i <= length) {
            var temp = document.getElementById("txtTotalItemCost_" + i).value;
            var tempTotalTax = ((document.getElementById("ItemTaxValue_" + i)).innerHTML).split(" %")[0];
            total = parseFloat(temp) + total;

            tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
            totalTax = parseFloat(tempTotalTax) + totalTax;

            i++;
        }

        $('#TotalBeforeTax').val(total.toFixed(2));
        $('#TotalTax').val(totalTax.toFixed(2));
        var tempGrandTotal = total + totalTax + OtherTax;
        tempGrandTotal = Math.round(tempGrandTotal);
        $('#TotalAfterTax').val(tempGrandTotal);
        $('#GrandTotal').val(tempGrandTotal);

    }

    var TxtItemDetails = "";

    function createJson() {

        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 1;
        TxtItemDetails = "[";
        for (i = 1; i <= rowCount - 1; i++) {
            var ItemCode = (document.getElementById("ItemCode_" + i)).innerHTML;
            var ItemID = (document.getElementById("ItemID_" + i)).innerHTML;
            var ItemName = (document.getElementById("ItemName_" + i)).innerHTML;
            var SOQty = (document.getElementById("SOQty_" + i)).innerHTML;
            var BalQty = (document.getElementById("BalQty_" + i)).innerHTML;
            var Unit = (document.getElementById("ItemUnit_" + i)).innerHTML;
            var OutwardQty = document.getElementById("txtShippingQty_" + i).value;

            var PricePerUnit = (document.getElementById("ItemUnitPrice_" + i)).innerHTML;
            PricePerUnit = (PricePerUnit == null || PricePerUnit == '') ? 0 : PricePerUnit;

            var CurrencyName = (document.getElementById("CurrencyName_" + i)).innerHTML;
            var Tax = (document.getElementById("ItemTaxValue_" + i)).innerHTML.split(" %")[0];

            var TotalItemCost = (document.getElementById("txtTotalItemCost_" + i)).value;
            TotalItemCost = (TotalItemCost == null || TotalItemCost == '') ? 0 : TotalItemCost;

            TxtItemDetails = TxtItemDetails + "{\"Item_Code\":\"" + ItemCode + "\", \"ItemId\":" + ItemID +
                ", \"ItemName\": \"" + ItemName + "\", \"SOQty\": " + SOQty + ", \"BalQty\": " + BalQty +
                ", \"OutwardQty\": " + OutwardQty +
                ", \"ItemUnit\": \"" + Unit + "\", \"ItemUnitPrice\": " + PricePerUnit + ", \"CurrencyName\": \""
                + CurrencyName + "\",\"ItemTaxValue\": " + Tax + ", \"TotalItemCost\": " + TotalItemCost;

            if (i == (rowCount - 1))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]"
        $('#txtItemDetails').val(TxtItemDetails);
    }

    function isNumberKey(evt, id) {
        var len = $('#' + id).val().length;
        len = parseFloat(len);
        if (len > 8)
            return false;
        else
            return true;

        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;

        }
        return true;
    }

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }
</script>
