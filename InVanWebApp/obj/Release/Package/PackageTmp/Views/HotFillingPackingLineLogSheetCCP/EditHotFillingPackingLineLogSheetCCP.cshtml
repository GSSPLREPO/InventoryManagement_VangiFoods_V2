@model InVanWebApp_BO.HotFillingPackingLineLogSheetCCPBO

@{
    ViewBag.Title = "EditHotFillingPackingLineLogSheetCCP";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="card">
    <div class="card-body">
        <h4>Edit Stage-3 Packing CCP</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="row">
            @*Date should be auto*@
            <div class="col-md-2">
                @Html.Label("Date")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
            </div>

            <div class="col-md-2">
                @Html.Label("Item Name")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ItemName, new { @class = "form-control form-control-sm", maxlength = "100", @onkeypress = "return IsAlphabets(event);" })
                @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Release Time From SILO")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ReleaseTime, new { @class = "form-control form-control-sm", @readonly = "readonly", })
                @Html.ValidationMessageFor(model => model.ReleaseTime, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Hot Line Temperature(°C)")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.HotLineTemp, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNumericDash(event);" })
                @Html.ValidationMessageFor(model => model.HotLineTemp, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Product Temperature(°C)")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ProductTemp, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsNumericDash(event);" })
                @Html.ValidationMessageFor(model => model.ProductTemp, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Cleaning & Hygine Checks")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.CleaningHygine, new List<SelectListItem>{
                    new SelectListItem{ Text="Yes", Value = "Yes" },
                    new SelectListItem{ Text="No", Value = "No" }
                    }, "---Select---", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CleaningHygine, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Random Weight(KG)")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.RandomWeight, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return isNumberKeyDecimal(event);" })
                @Html.ValidationMessageFor(model => model.RandomWeight, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Monitoring Parameters")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.MonitoringParameters, new List<SelectListItem>{
                    new SelectListItem{ Text="Ok", Value = "Ok" },
                    new SelectListItem{ Text="Not Ok", Value = "Not Ok" }
                    }, "---Select---", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MonitoringParameters, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Monitoring Filling Temp(°C)")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.MonitoringFilling, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsNumericDash(event);" })
                @Html.ValidationMessageFor(model => model.MonitoringFilling, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("No of Pouches")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.NoOfPouches, new { @class = "form-control form-control-sm", maxlength = "6", @onkeypress = "return isNumberKeyDecimal(event);" })
                @Html.ValidationMessageFor(model => model.NoOfPouches, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                @Html.Label("Remarks")
                <span style="color:red"></span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", maxlength = "100", @onkeypress = "return IsAlphaNumeric(event);" })
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
            </div>

            <div class="col-md-2">
                @Html.Label("Corrective Actions")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.CorrectiveActions, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumeric(event)" })
                @Html.ValidationMessageFor(model => model.CorrectiveActions, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>
        <br />
        <div class="col d-flex justify-content-end" style="margin-left: auto;">
            <div class="row">
                <div class="col">
                    <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;">Update</button>
                </div>
                <div class="col">
                    <a href="@Url.Action("Index", "HotFillingPackingLineLogSheetCCP")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                        Back To List
                    </a>
                </div>
            </div>
        </div>

    </div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<script type="text/javascript">

    //Custom validation for only numeric, -,
    function IsNumericDash(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32
            || unicode == 45) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, alphabets.
    function IsAlphaNumeric(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32
            || unicode == 45 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only alphabets.
    function IsAlphabets(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32
            || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, decimal.
    function isNumberKeyDecimal(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
</script>