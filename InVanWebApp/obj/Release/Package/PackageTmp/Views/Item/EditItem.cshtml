@model InVanWebApp_BO.ItemBO
@{
    ViewBag.Title = "Edit item";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Edit Item</h4>
            <hr />
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.ID)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item Type")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("ItemTypeID", (IEnumerable<SelectListItem>)ViewData["ItemType"], "--Select Type--",
                   new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ItemTypeID, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Item Category")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownList("ItemCategory_ID", (IEnumerable<SelectListItem>)ViewData["ItemCategory"], "--Select Category--",
                   new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ItemCategory_ID, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Item_Name, new { @class = "form-control form-control-sm", maxlength = "40" })
                    @Html.ValidationMessageFor(model => model.Item_Name, "", new { @class = "error mt-2 text-danger", id = "validationMsgName" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Item Code")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Item_Code, new { @class = "form-control form-control-sm", maxlength = "20" })
                    @Html.ValidationMessageFor(model => model.Item_Code, "", new { @class = "error mt-2 text-danger", id = "validationMsgCode" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("UOM")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.UnitOfMeasurement_ID, (IEnumerable<SelectListItem>)ViewData["UOM"], "---Select unit---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UnitOfMeasurement_ID, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Minimum Stock")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.MinStock, new { @class = "form-control form-control-sm", onkeypress = "return isNumberKey(event)", maxlength ="9" })
                    @Html.ValidationMessageFor(model => model.MinStock, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Price Per Unit (Rs)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.UnitPrice, new { @class = "form-control form-control-sm", onkeypress = "return isNumberKey(event)", maxlength = "8" })
                    @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Tax")
                </div>
                <div class="col-md-2">
                    @Html.DropDownListFor(model => model.TaxId, (IEnumerable<SelectListItem>)ViewData["Tax"], "---Select---", new { @class = "form-control", onchange = "TaxOnchangeEvent()" })
                    @Html.ValidationMessageFor(model => model.TaxId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.TextBox("ItemTaxVal", "", new { @class = "form-control form-control-sm", @readonly = "readonly", id = "ItemTaxVal" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("HSN Code")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.HSN_Code, new { @class = "form-control form-control-sm", maxlength = "10" })
                    @Html.ValidationMessageFor(model => model.HSN_Code, "", new { @class = "error mt-2 text-danger", id = "validationMsgHSN" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Description")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Description, new { @class = "form-control form-control-sm", maxlength = "150" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <a href="@Url.Action("Index", "Item")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>
            <button id="btnSave" type="submit" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b);float:right;">Update</button>

        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<script type="text/javascript">

    $('#btnSave').click(function () {
        var value = $('#TaxId').val();
        if (value == '') {
            $('#TaxId').val(0);
        }
    });

    //Validation for special characters.
    $('#Item_Name').on("keydown keyup change", function () {
        var maxLength = 40;
        var $th = $(this);
        $th.val($th.val().replace(/[^a-zA-Z0-9\d\-_\s]/g,
            function (str) {
                $('#validationMsgName').text('Special caracters not allowed!');
                $('#validationMsgName').show();
                return '';
            }));

        if (($('#Item_Name').val().length) > maxLength) {
            $('#validationMsgName').show();
            $('#validationMsgName').text('Length is exceeding!');
            //return false;
        }
        else
            $('#validationMsgName').hide();
    });

    //Validation for special characters.
    $('#Item_Code').on("keydown keyup change", function () {
        var maxLength = 20;
        var $th = $(this);
        $th.val($th.val().replace(/[^a-zA-Z0-9\d\-_\s]/g,
            function (str) {
                $('#validationMsgCode').text('Special caracters not allowed!');
                $('#validationMsgCode').show();
                return '';
            }));

        if (($('#Item_Code').val().length) > maxLength) {
            $('#validationMsgCode').show();
            $('#validationMsgCode').text('Length is exceeding!');
            //return false;
        }
        else
            $('#validationMsgCode').hide();
    });

    //Validation for special characters.
    $('#HSN_Code').on("keydown keyup change", function () {
        var maxLength = 10;
        var $th = $(this);
        $th.val($th.val().replace(/[^a-zA-Z0-9]/g,
            function (str) {
                $('#validationMsgHSN').text('Special caracters not allowed!');
                $('#validationMsgHSN').show();
                return '';
            }));

        if (($('#HSN_Code').val().length) > maxLength) {
            $('#validationMsgHSN').show();
            $('#validationMsgHSN').text('Length is exceeding!');
            //return false;
        }
        else
            $('#validationMsgHSN').hide();
    });

    $(document).ready(function () {
        document.getElementById('TaxId').removeAttribute("data-val", "true");
        TaxOnchangeEvent();
        var taxValue = $('#ItemTaxVal').val();
        if(taxValue!=null & taxValue!='')
            taxValue = taxValue + " %";
        $('#ItemTaxVal').val(taxValue);
    });

    function TaxOnchangeEvent() {
        var TaxId = $('#TaxId').val();
        if (TaxId != null & TaxId != 0 & TaxId != '') {
            $.ajax({
            url: '/Item/GetTaxValue',
            type: "POST",
            data: { id: TaxId },
            success: function (result) {
                $('#ItemTaxVal').val(result.TaxValue+" %");
            },
            error: function (err) {
                alert('Not able to get the selected tax value!');

            }
        });
        }
        else
            $('#ItemTaxVal').val('');
    }

    function isNumberKey(evt) {
        //comparing pressed keycodes
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
</script>
