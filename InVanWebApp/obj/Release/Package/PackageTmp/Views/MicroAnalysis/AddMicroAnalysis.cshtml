@model InVanWebApp_BO.MicroAnalysisBO

@{
    ViewBag.Title = "AddMicroAnalysis";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddMicroAnalysis", "MicroAnalysis", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Micro Analysis</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Source")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Source, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlpha(event);" })
                    @Html.ValidationMessageFor(model => model.Source, "", new { @class = "error mt-2 text-danger" })
                </div>

                @*Date should be auto*@
                <div class="col-md-2">
                    @Html.Label("Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("WO/PO")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WOPO, new { @class = "form-control form-control-sm", maxlength = "8", @onkeypress = "return IsBatchNo(event);" })
                    @Html.ValidationMessageFor(model => model.WOPO, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Product Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control form-control-sm", maxlength = "100", @onkeypress = "return IsAlpha(event);" })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Batch No")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.BatchNo, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsBatchNo(event);" })
                    @Html.ValidationMessageFor(model => model.BatchNo, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Packing Size")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PackingSize, new { @class = "form-control form-control-sm", maxlength = "15", @onkeypress = "return IsAlphaNumeric(event);" })
                    @Html.ValidationMessageFor(model => model.PackingSize, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Best Before")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.BestBeforeDate, "{0:yyyy-MM-dd}", new
                    {
                        @class = "form-control form-control-sm",
                        type = "date",@*@readonly = "readonly",*@ @min = DateTime.Now.ToString("yyyy-MM-dd")
                    })
                    @Html.ValidationMessageFor(model => model.BestBeforeDate, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Clostridium Perfringens")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ClostridiumPerfringens, new List<SelectListItem>{
                    new SelectListItem{ Text="Absent", Value = "Absent" },
                    new SelectListItem{ Text="<10", Value = "<10" }
                    }, "---Select---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ClostridiumPerfringens, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Escherichia Coli")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.EscherichiaColi, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericGretareThenLessThen(event);" })
                    @Html.ValidationMessageFor(model => model.EscherichiaColi, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Salmonella")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Salmonella, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericGretareThenLessThen(event);" })
                    @Html.ValidationMessageFor(model => model.Salmonella, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Total Plate Count")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.TotalPlateCountNumber, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsNumericGretareThenLessThen(event);" })
                    @Html.ValidationMessageFor(model => model.TotalPlateCountNumber, "", new { @class = "error mt-2 text-danger" })
                </div>
                @*<div class="col-md-2">
                        @Html.Label("Total Plate Count Special")
                        <span style="color:red">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TotalPlateCountSpecial, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return IsNumericGretareThenLessThen(event);" })
                        @Html.ValidationMessageFor(model => model.TotalPlateCountSpecial, "", new { @class = "error mt-2 text-danger" })
                    </div>*@
            </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Yeast and Mould")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.YeastandMould, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericGretareThenLessThen(event);" })
                    @Html.ValidationMessageFor(model => model.YeastandMould, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Coliform")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Coliform, new { @class = "form-control form-control-sm", maxlength = "20", @onkeypress = "return IsAlphaNumericGretareThenLessThen(event)" })
                    @Html.ValidationMessageFor(model => model.Coliform, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Verify By Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.VerifyByName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.VerifyByName, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "MicroAnalysis")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>

        </div>
    </div>
}




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<script type="text/javascript">

    //Custom validation for only numeric, alphabets,<,>.
    function IsAlphaNumericGretareThenLessThen(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32 || unicode == 60
            || unicode == 62 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, alphabets.
    function IsAlphaNumeric(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32 || unicode == 95
            || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric, alphabets.
    function IsBatchNo(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32 || unicode == 95
            || unicode == 47 || unicode == 92 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric
    function IsNumeric(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57) || unicode == 32 || unicode == 95
        ) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only  alphabets
    function IsAlpha(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32
            || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only numeric,<,>.
    function IsNumericGretareThenLessThen(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32 || (unicode >= 48 && unicode <= 57) || unicode == 60
            || unicode == 61 || unicode == 251
            || unicode == 252 || unicode == 253 || unicode == 62) {
            return true;
        }
        else {
            return false;

        }
    }
</script>