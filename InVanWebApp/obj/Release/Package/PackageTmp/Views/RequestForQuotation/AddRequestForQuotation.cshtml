@model InVanWebApp_BO.RequestForQuotationBO

@{
    ViewBag.Title = "AddRequestForQuotation";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddRequestForQuotation", "RequestForQuotation", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Add Request For Quotation</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("RFQ Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.RFQNO, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.RFQNO, "", new { @class = "error mt-2 text-danger" })
                </div>
                <br />

                <div class="col-md-2">
                    @Html.Label("Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @id = "Date", @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4 form-group">
                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "DeliveryDate", @class = "form-control form-control-sm date1", type = "date" })
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @*@Html.Label("Currency")
                <span style="color:red">*</span>*@
                </div>
                <div class="col-md-4 form-group">
                    @*@Html.DropDownListFor(model => model.CurrencyID, (IEnumerable<SelectListItem>)ViewData["CurrencyName"], "---Select---", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })*@
                </div>
                <div class="col-md-4 d-none">
                    @*@Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control", Value = "", @readonly = "readonly" })*@
                </div>
            </div>
            <br />

            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Bidding Start Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4 form-group">
                    @Html.TextBoxFor(model => model.BiddingStartDate, "{0:yyyy-MM-dd}", new { @id = "BiddingStartDate", @class = "form-control form-control-sm date1", type = "date" })
                    @Html.ValidationMessageFor(model => model.BiddingStartDate, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Bidding End Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.BiddingEndDate, "{0:yyyy-MM-dd}", new { @id = "BiddingEndDate", @class = "form-control form-control-sm date1", type = "date" })
                    @Html.ValidationMessageFor(model => model.BiddingEndDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

            <br />
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.LocationId, (IEnumerable<SelectListItem>)ViewData["LocationName"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedLocation($(this).val())" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-4 d-none">
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", Value = "", @readonly = "readonly" })
                </div>
                <br />
                <!--<div class="col-md-2">-->
                    @*@Html.Label("Vendor Name")*@
                    <!--<span style="color:red">*</span>
                </div>
                <div class="col-md-4">-->
                    @*@Html.DropDownListFor(model => model.VendorsID, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control js-example-basic-multiple", multiple = "multiple", onchange = "SelectedIndexChanged($(this).val())" })
                    @Html.ValidationMessageFor(model => model.VendorsID, "", new { @class = "error mt-2 text-danger" })*@ 
                <!--</div>
                <div class="col-md-4 d-none">-->
                    @*@Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", Value = "", @readonly = "readonly" })*@
                <!--</div>-->
            </div>
            <br />

            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                @*Supplier Details*@
                                @Html.Label("Vendor Name")
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @*@Html.TextAreaFor(model => model.SupplierAddress, new { id = "SupplierAddress", @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "error mt-2 text-danger" })*@
                                <div class="col-md-5">
                                    @*@Html.DropDownListFor(model => model.VendorIDs, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control js-example-basic-multiple", multiple = "multiple", onchange = "SelectVendorIDs()" })*@
                                    @Html.DropDownListFor(model => model.CompanyName, (IEnumerable<SelectListItem>)ViewData["CompanyName"], "---Select---", new { @class = "form-control js-example-basic-multiple", multiple = "multiple", onchange = "SelectedIndexChanged($(this).val())" })
                                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "error mt-2 text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @*@Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", Value = "", @readonly = "readonly" })*@
                                    @Html.TextBoxFor(model => model.VendorIDs, new { style = "display:none" })
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>
            <div class="row">
                <div class="col-md-2 mb-1">
                    @*@Html.Label("Suppliers")
                <span style="color:red">*</span>*@
                </div>
                <div class="col-md-4">

                </div>

            </div>
            <br />

            <div class="row">
                <div class="col-md-2 mb-1">
                    @*@Html.Label("Remarks")*@
                </div>
                <div class="col-md-4">
                    @*@Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })*@
                </div>
            </div>
            <br />
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">
                                                    Item Code
                                                </th>
                                                <th class="sortStyle d-n d-none">
                                                    Selected Item Code
                                                </th>
                                                <th class="sortStyle">
                                                    Item
                                                </th>
                                                <th class="sortStyle">
                                                    Quantity
                                                </th>
                                                <th class="sortStyle">
                                                    Units
                                                </th>
                                                <th class="sortStyle">
                                                    Delivery Date
                                                </th>
                                                <th class="sortStyle">
                                                    HSN Code
                                                </th>
                                                <th class="sortStyle">
                                                    Remarks
                                                    <span style="color:red">*</span>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            <tr id="tablerow">
                                                <td>
                                                    @Html.DropDownList("Item_ID", (IEnumerable<SelectListItem>)ViewData["itemListForDD"], "--Select Item--", new { @class = "form-control", style = "height:30px;width:100px;", onchange = "SelectedIndexChangedItemList($(this).val())" })
                                                </td>
                                                <td class="col-md-4 d-none">
                                                    @Html.TextBoxFor(model => model.Item_Code, new { @class = "form-control", Value = "", @readonly = "readonly", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemName", "", new { @class = "form-control", style = "height:30px;width:200px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.Quantity, new { @class = "form-control text-right", style = "height:30px;width:100px;", value = "0", onkeypress = "return isNumberKey(event);", MaxLength = "8" })
                                                </td>
                                                <td>
                                                    @Html.TextBox("ItemUnit", "", new { @class = "form-control", style = "height:30px;width:100px;", @readonly = "readonly" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "DeliveryDate", @class = "form-control form-control-sm date1", type = "date" })
                                                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.HSN_Code, new { @class = "form-control", Value = "", style = "height:30px;width:200px;" })
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(model => model.Remarks, "", new { @class = "form-control form-control-sm text-right", style = "height:30px;width:200px;", onkeypress = "createJson();" })
                                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b);" enable="true" disabled>Delete</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>

                                    <br />
                                    <button type="button" class="btn btn-primary btn-sm shadow" style="background: linear-gradient(85deg, #392c70, #6a005b);" id="AddItem">
                                        + Add Item
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-100 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature<span style="color:red"> * </span></h4>

                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />

                                <!-- Image preview -->
                                @*<span style="color:green">@ViewBag.Message</span>*@
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                    </div>
                    <br /><br />


                </div>
                <br />
                <br />

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card h-100">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach File<span style="color:red"> * </span></h4>

                            <hr />
                            <div class="form-group">
                                <input type="file" name="Attachment" id="fileattach" class="file-drop-zone" required>
                                <span id="sfileupload" class="text-danger"></span>
                                <br /><br />
                                @*<button type="submit" class="btn btn-primary mr-2" id="attachfile" style="display: none; background: linear-gradient(85deg, #392c70, #6a005b);"> Upload</button>
                            <input type="hidden" id="hdnExcelRecord" name="hdnExcelRecord" />*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <a href="@Url.Action("Index", "RequestForQuotation")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                Back To List
            </a>

            @*<button id="btnSave" type="submit" class="btn btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right; onclick=" onclick="location.href='@Url.Action("AddRequestForQuotation", "RequestForQuotation")'">Save</button>*@
            <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;">Save</button>
            
        </div>
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>


<script type="text/javascript">

    $(document).ready(function () {
        //alert('multiple called!') 
        $('.js-example-basic-multiple').select2();
    });

    //function SelectVendorIDs(){
    //    var vi = document.getElementById("VendorIDs").selectedOptions
    //    for (var i = 0; i < vi.length; i++) {
    //        alert("Multiple Selection: " + vi[i].innerHTML)
    //        result = vi[i].innerHTML;
    //        console.log("result: " + result); 
    //        //$("#VendorIDs").val(result);
    //        //var VendorIDs = JSON.stringify(result);
    //        //console.log("VendorIDs: " +VendorIDs) 
    //        //$("#VendorIDs").val(VendorIDs);
    //    }
    //}

    //$(document).ready(function () {
    //    $("#DeliveryDate").datepicker({
    //        minDate: 0,
    //        onSelect: function (date) {
    //            $("#Date").datepicker('option', 'minDate', date);
    //        }
    //    });
    //    ///Rahul added for dynamic rows 16-12-2022.
    //    $("#deliveryDate").datepicker({
    //        minDate: 0,
    //        onSelect: function (date) {
    //            $("#Date").datepicker('option', 'minDate', date);
    //        }
    //    });
    //});
    //==================Set value in txtItemDetails onCick of Save/Update button======--------
    //    function SaveBtnClick() {
    //       // alert("createJson() function called!")
    //    createJson();
    //};
    //==========end===============

    //========adding the below document.ready code for disabling the previous dates in both PO date and
    //delivery date.

    //$(document).ready(function () {
    //    alert("enter");
    //    $("#PODate").datepicker({
    //        dateFormat: "dd-mm-yy",
    //        minDate: -0,
    //        maxDate: "+0M +4D"

    //    });
    //});
    
    var TxtItemDetails = "";

    $('#uploadexcel').show();
    $('#uploadexcel').attr("disabled", true);

    $('#uploadexcel').click(function () {

        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {


            var fileUpload = $("#fileupload").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object
            //fileData.append('username', ‘Manas’);

            $.ajax({
                url: '/RequestForQuotation/UploadSignature',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (result) {
                    alert(result);
                    window.location.href = "/RequestForQuotation/AddRequestForQuotation";
                },
                error: function (err) {
                    alert('Format of data uploaded is incorrect.');

                }
            });
        } else {
            alert("FormData is not supported.");
        }
    });

    $('#fileupload').change(function () {
        var fileExtension = ['jpg', 'jpeg', 'png'];
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            // $('#uploadexcel').attr("disabled", true);
            alert("Only '.jpg','.jpeg','png' formats are allowed.");
            $('#fileupload').val('');
            //$('#<%= myLabel.ClientID %>').html("Only '.jpeg','.jpg' formats are allowed.");
        }
        else {
            $('#uploadexcel').attr("disabled", false);
        }
    });

    //fileattach
    $('#attachfile').show();
    $('#attachfile').attr("disabled", true);

    //$('#attachfile').click(function () {

    //    // Checking whether FormData is available in browser
    //    if (window.FormData !== undefined) {


    //        var fileattach = $("#fileattach").get(0);
    //        var files = fileattach.files;

    //        // Create FormData object
    //        var fileData = new FormData();

    //        // Looping over all files and add it to FormData object
    //        for (var i = 0; i < files.length; i++) {
    //            fileData.append(files[i].name, files[i]);
    //        }

    //        // Adding one more key to FormData object
    //        //fileData.append('username', ‘Manas’);

    //        $.ajax({
    //            url: '/PurchaseOrder/FileAttachment',
    //            type: "POST",
    //            contentType: false, // Not to set any content header
    //            processData: false, // Not to process data
    //            data: fileData,
    //            success: function (result) {
    //                alert(result);
    //                window.location.href = "/PurchaseOrder/AddPurchaseOrder";
    //            },
    //            error: function (err) {
    //                alert('Format of data uploaded is incorrect.');

    //            }
    //        });
    //    } else {
    //        alert("Form data is not supported.");
    //    }
    //});

    $('#fileattach').change(function () {
        debugger
        var fileExtension = ['xls', 'xlsx', 'doc', 'docx', 'pdf'];
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            // $('#attachfile').attr("disabled", true);
            alert("Only '.xls', '.xlsx', '.doc', '.docx', '.pdf' formats are allowed.");
            $('#fileattach').val('');
            //$('#<%= myLabel.ClientID %>').html("Only '.jpeg','.jpg' formats are allowed.");
        }
                // Checking whether FormData is available in browser
        else if (window.FormData !== undefined) {


            var fileattach = $("#fileattach").get(0);
            var files = fileattach.files;

            // Create FormData object
            var fileData = new FormData();
            var fileattachment = files[0].name;
            console.log(fileattachment)
            $("#fileattach").val(fileattachment);

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

        } else
            {
            alert("Form data is not supported.");
            }
        //else {
        //    //$('#attachfile').attr("disabled", false);
        //    var fileattachment = $('#fileattach').val();
        //    console.log(fileattachment)
        //    $("#fileattach").val(fileattachment);
        //}
    });


       /*Rahul : Add Javascript validation on 06 Dec 2022.*/
    //$('#DeliveryDate').datepicker({
    //        //format: "yyyy-MM-dd",
    //        //clearBtn: true,
    //        //autoclose: true,
    //        //todayHighlight: true,
    //        minDate: 0,
    //        //endDate: "today"
    //    });

    //onchange = "SelectedIndexChanged($(this).val())"

    function SelectedIndexChangedItemList(id) {
        ////debugger
        var selectedOptionTerms, itemCode;
        selectedOptionTerms = document.getElementById("Item_ID").selectedIndex;
        itemCode = document.getElementById("Item_ID").options[selectedOptionTerms].innerText;
        document.getElementById("Item_Code").value = itemCode;
    }

    function SelectedIndexChangedTerms(id) {
        ////debugger
        //var selectedOptionTerms, termsName;
        //selectedOptionTerms = document.getElementById("TermsAndConditionID").selectedIndex;
        //termsName = document.getElementById("TermsAndConditionID").options[selectedOptionTerms].innerText;
        //document.getElementById("Terms").value = termsName;
        $.ajax({
            url: '/RequestForQuotation/GetTermsDescription',
            type: "POST",
            data: { id: id },
            success: function (result) {
                $('#TermDescription').val(result.TermDescription);
            },
            error: function (err) {
                alert('Not able to get the selected terms and condition value!');

            }
        });
    }

    function SelectedIndexChanged(id) {
        //alert(id);
        debugger
        var selectedOption,companyName;
        selectedOption = document.getElementById("CompanyName").selectedIndex;
        document.getElementById("VendorIDs").value = id;
        //console.log(id);   

    }

    function SelectedIndexChangedLocation(id) {
        //alert(id);
        //debugger
        var selectedOptionLocationName, locationName;
        selectedOptionLocationName = document.getElementById("LocationId").selectedIndex;
        locationName = document.getElementById("LocationId").options[selectedOptionLocationName].innerText;
        document.getElementById("LocationName").value = locationName;

        $.ajax({
            type: "POST",
            url: `/RequestForQuotation/BindLocationMaster?id=` + id,
            data: "{}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                ////debugger;
                //console.log(result);
                var deliveryAdd = result[0].DeliveryAddress;
                $("#DeliveryAddress").val(deliveryAdd);
            }
        });
    }

    ///Dropdownlist Selectedchange event
    function getitemDetails() {
                    $("#f").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', /// we are calling json method

                dataType: 'json',

                data: { id: $("#Item_ID").val()},
                ///data: { id: $("#Item_ID").val(), currencyId: $("#CurrencyID").val() },
                /// here we are get value of selected item and passing same value
                ///as inputto json method GetitemDetails.

                success: function (itemDescription) {
                    debugger
                    /// states contains the JSON formatted list
                    /// of states passed from the controller

                    var description = JSON.stringify(itemDescription);
                    $("#ItemName").val(itemDescription.Item_Name);
                    $("#ItemUnit").val(itemDescription.UnitCode);
                    $("#Quantity").val('0');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });


    }

    //onchange = "SelectedIndexChangedCurrencyValue($(this).val())"

    //function SelectedIndexChangedCurrencyValue(id) {
    //    //alert(id);
    //    debugger
    //    var selectedOptionCurrencyName, currencyName;
    //    selectedOptionCurrencyName = document.getElementById("CurrencyID").selectedIndex;
    //    currencyName = document.getElementById("CurrencyID").options[selectedOptionCurrencyName].innerText;
    //    document.getElementById("IndianCurrencyValue").value = currencyName;
    //}


    $("#Item_ID").change(function () {
       // //debugger
        getitemDetails();
        //debugger
        //var CurrencyIDCheck = $('#CurrencyID').val();

        //if (CurrencyIDCheck == '' || CurrencyIDCheck == null) {
        //    debugger
        //    $('#CurrencyID').focus();
        //    alert("Select Currency!")
        //    document.getElementById('Item_ID').selectedIndex = 0;
        //    return;
        //}
        // else { getitemDetails(); }

    });

    function getitemDetailsJSTbl(count) {
        debugger
        console.log(count);
        //SelectedIndexChangedItemList();
       // var itemId = "ItemID['" + counter + "']";
        //var itemId = "Item_ID['" + counter + "']";
        var itemId = "ItemID_" + count;
        var currencyID = $('#CurrencyID').val();
        //console.log("currencyID" + currencyID);
        var selectedItemId = $("#" + itemId).val();
                    $.ajax({
                type: 'POST',
                url: '@Url.Action("GetitemDetails")', // we are calling json method

                dataType: 'json',
                data: { id: selectedItemId, currencyId: currencyID }, //Rahul 'currencyId' added from controller
                // here we are get value of selected item and passing same value
                //as inputto json method GetitemDetails.

                success: function (itemDescription) {
                    debugger
                    // states contains the JSON formatted list
                    // of states passed from the controller

                            var description = JSON.stringify(itemDescription);
                            console.log(description);

                            $("#itemCode_" + count).val(itemDescription.Item_Code);
                            $("#itemDescription_" + count).val(itemDescription.Item_Name);
                            $("#itemUnit_" + count).val(itemDescription.UnitCode);
                            $("#quantity_" + count).val('0');
                },
                failure: function () {
                    alert('Failed to retrieved item detals!');
                },
                error: function (ex) {
                    alert('Failed to retrieve Item description.' + ex);
                }
            });
    }

    var counter = 1;

    $("#AddItem").click(function () {
        ////debugger
        var itemId = "ItemID_"+counter;
        var itemCode = "itemCode_" + counter;
        var itemDescription = "itemDescription_" + counter;
        var quantity = "quantity_" + counter;
        var itemUnit = "itemUnit_" + counter;
        var deliveryDate = "deliveryDate_" + counter;
        var hsnCode = "hsnCode_" + counter;
        var remarks = "remarks_" + counter;
        ///Rahul updated 16-12-2022.
        $('<tr id="tablerow' + counter + '">' + '<td>' +
            '<select id="' + itemId + '" onchange="getitemDetailsJSTbl(' + counter +')"; class="form-control form-control-sm " data-val="true" data-val-number="The field Item_ID must be a number." name="'+itemId+' " style="height:30px;width:100px;" aria-describedby="Item_ID-error" aria-invalid="false">'+$('#Item_ID').html()+'</select>' +
            '</td>' +
            '<td class="d-none">' +
            '<input type="text" id="' + itemCode + '" class="form-control form-control-sm " style = "height:30px;width:200px;" name="' + itemCode + '" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemDescription + '" class="form-control form-control-sm " style = "height:30px;width:200px;" name="' + itemDescription + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + quantity + '" class="form-control  form-control-sm  text-right" style = "height:30px;width:100px;" name="' + quantity + '" value="0"     required="required" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + itemUnit + '" class="form-control" style = "height:30px;width:100px;" name="' + itemUnit + '"readonly = "readonly" value="" required="required" />' +
            '</td>' +
            '<td>' +
            //Rahul added 16/12/2022.
            '<input type="date" id="' + deliveryDate + '" class="form-control form-control-sm date1" style = "height:30px;width:100%;" name="' + deliveryDate + '" />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + hsnCode + '" class="form-control form-control-sm " style = "height:30px;width:200px;" name="' + hsnCode + '"  />' +
            '</td>' +
            '<td>' +
            '<input type="text" id="' + remarks + '" onchange="createJson()"; class="form-control form-control-sm  text-right" style = "height:30px;width:200px;" name="' + remarks+ '"  />' +
            '</td>' +
            '<td>' +
            '<button type="button" class="btn btn-primary btn-sm" style="background: linear-gradient(85deg, #392c70, #6a005b);" onclick="removeTr(' + counter + ');">Delete</button>' +
            '</td>' +
            '</tr>').appendTo('#submissionTable');

        counter++;
        return false;
    });

    function createJson() {
        ////debugger
        let res = [...document.getElementById("myTableBody").children].map(tr =>
            Object.fromEntries([...tr.querySelectorAll("input,select")].map(el =>
                [el.name, el.value])));

        var TxtItemDetails = JSON.stringify(res);
        console.log("result: " +TxtItemDetails);
        $('#TxtItemDetails').val(TxtItemDetails);
    }


    function removeTr(index) {
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length) - 1;
        //console.log("Length: " + length + counter);
        if (counter > 1 & length == index) {
            $('#tablerow' + index).remove();
            counter--;
        }
        else {
            $('#tablerow' + index).remove();
        }
        CalculateTotalBeforeTax();
        return false;
    }

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }


    /*Rahul : Add Javascript validation on 12 Oct 2022.*/
        function isNumberKey(evt) {
            //var charCode = (evt.which) ? evt.which : evt.keyCode;
            //if (charCode > 31 && (charCode < 48 || charCode > 57))
            //    return false;
            //return true;
            var keycode = (evt.which) ? evt.which : evt.keyCode;
            if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
                return false;
            }
            else {
                var parts = evt.srcElement.value.split('.');
                if (parts.length > 1 && keycode == 46)
                    return false;
                else
                    return true;
            }
            return true;
        }


</script>
