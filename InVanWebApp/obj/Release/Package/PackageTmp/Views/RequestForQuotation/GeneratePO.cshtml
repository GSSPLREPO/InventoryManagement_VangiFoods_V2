@model InVanWebApp_BO.RFQ_VendorDetailsBO
@{
    ViewBag.Title = "GeneratePO";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddPurchaseOrder", "RequestForQuotation", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4>Generate Purchase Order</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Tittle")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Tittle, new { @class = "form-control form-control-sm", type = "text" })
                    @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "error mt-2 text-danger"})
                    <span id="valMsgTitle"></span>
                </div>
                <div class="col-md-2">
                    @Html.Label("PO Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PONumber, new { @class = "form-control form-control-sm", Value = ViewData["DocumentNo"], @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("PO Document Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.PODate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model=>model.Date)
                </div>
                <div class="col-md-2">
                    @Html.Label("Delivery Date")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date"})
                    @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Currency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.HiddenFor(model => model.CurrencyID, new { id = "tempCurrencyID" })
                    @*@Html.DisplayFor(model => model.CurrencyName)*@
                    @Html.TextBoxFor(model => model.CurrencyName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.CurrencyName)
                    @Html.ValidationMessageFor(model => model.CurrencyID, "", new { @class = "error mt-2 text-danger" })

                </div>
                <div class="col-md-4 d-none">
                    @*@Html.TextBox("CurrencyID","1",new { id= "CurrencyID" })*@
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Indent Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.HiddenFor(model => model.IndentID)
                    @*@Html.DisplayFor(model => model.IndentNumber)*@
                    @Html.TextBoxFor(model => model.IndentNumber, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.IndentNumber)
                    @Html.ValidationMessageFor(model => model.IndentNumber, "", new { @class = "error mt-2 text-danger" })

                </div>
                <div class="col-md-4 d-none">
                    @*@Html.TextBox("CurrencyID","1",new { id= "CurrencyID" })*@
                    @Html.TextBoxFor(model => model.CurrencyPrice, new { @class = "form-control form-control-sm", Value = "", @readonly = "readonly" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Location Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @*@Html.DisplayFor(model => model.LocationName)*@
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.LocationName)
                    @Html.HiddenFor(model => model.LocationId)
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Vendor Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @*@Html.DisplayFor(model => model.CompanyName)*@
                    @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.CompanyName)
                    @Html.HiddenFor(model => model.VendorsID)
                    @Html.ValidationMessageFor(model => model.VendorsID, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Delivery Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.DeliveryAddress, new { id = "DeliveryAddress", @class = "form-control", placeholder = "Delivery address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.DeliveryAddress, "", new { @class = "error mt-2 text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">
                                Supplier Details
                                <span style="color:red">*</span>
                            </h4>
                            <hr />
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.Address, new { id = "SupplierAddress", @class = "form-control", placeholder = "Supplier address", style = "height:100px" })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "error mt-2 text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Amendment Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(model => model.Amendment, new { @class = "form-control form-control-sm", Value = "0", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Amendment, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2 mb-1">
                    @Html.Label("RFQ Number")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @*@Html.DisplayFor(model => model.RFQNO, new { @class = "form-control form-control-sm" })*@
                    @Html.TextBoxFor(model => model.RFQNO, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.RFQNO)
                    @Html.ValidationMessageFor(model => model.RFQNO, "", new { @class = "error mt-2 text-danger" })
                    @Html.HiddenFor(model => model.RequestForQuotationId)
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-md-2 mb-1">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <br />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="table-sorter-wrapper col-lg-12 table-responsive">
                                    <table class="table table-striped" id="submissionTable">
                                        <thead>
                                            <tr>
                                                <th class="sortStyle">Sr. No.</th>
                                                <th class="sortStyle d-none">ItemID</th>
                                                <th class="sortStyle">Item Code</th>
                                                <th class="sortStyle">Item</th>
                                                <th class="sortStyle">Quantity</th> @*Required Qty, Ordered Qty, Bal Qty*@
                                                <th class="sortStyle">Units</th>
                                                <th class="sortStyle">Price</th>
                                                <th class="sortStyle">Currency</th>
                                                <th class="sortStyle">Item Tax</th>
                                                <th class="sortStyle">Total before tax</th>
                                            </tr>
                                        </thead>
                                        <tbody id="myTableBody">
                                            @{ int c = 1;
                                                foreach (var item in Model.rfqVendorItemDetails)
                                                {
                                                    <tr id="tablerow_@c">
                                                        <td>
                                                            <label>@c.</label>
                                                        </td>
                                                        <td class="d-none">@Html.HiddenFor(x => item.Item_ID, new { id = "ItemID_" + c })</td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.Item_Code, new { id = "ItemCode_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.ItemName, new { id = "ItemName_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.ItemQuantity, new { id = "ItemQuantity_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.ItemUnit, new { id = "ItemUnit_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.ItemUnitPrice, new { id = "ItemUnitPrice_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.CurrencyName, new { id = "CurrencyName_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.ItemTaxValue, new { id = "itemTax_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => item.TotalItemCost, new { id = "totalItemCost_" + c, style = "border:none;background: none;", @readonly = "readonly" })
                                                        </td>
                                                    </tr>
                                                    { c++; }
                                                }

                                            }

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.TxtItemDetails, new { style = "display:none" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <hr />
            <div class="col-md-12 grid-margin stretch-card">
                <div class="col-md-6 grid-margin stretch-card flex-wrap">
                    <div class="card h-50 mb-2">
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Attach Signature</h4>
                            <hr />
                            <div class="form-group">
                                <input type="file" id="file" name="Signature"
                                       onchange="return fileValidation()" />


                                <!-- Image preview -->
                                <br />
                                <br />
                                <center>
                                    <div id="imagePreview"></div>
                                </center>
                            </div>
                        </div>
                        <p style="padding-left: 5%;color:red;">(Note: Only .png,.jpeg and jpg are allowed!)</p>
                    </div>
                    <div class="card" h-50>
                        <div class="card-body">
                            <h4 class="card-title" style="color:darkcyan">Terms and Conditions<span style="color:red"> * </span></h4>
                            <hr />
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("T & C")
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.TermsAndConditionID, (IEnumerable<SelectListItem>)ViewData["TermsAndConditionID"], "---Select---", new { @class = "form-control", onchange = "SelectedIndexChangedTerms($(this).val())" })
                                    @Html.ValidationMessageFor(model => model.TermsAndConditionID, "", new { @class = "error mt-2 text-danger" })
                                    <span id="valTermMsg"></span>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.Label("Terms Description")
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.Terms, new { @class = "form-control", placeholder = "Term Description", style = "height:100px" })
                                    @Html.ValidationMessageFor(model => model.Terms, "", new { id="valTermMsg",@class = "error mt-2 text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <hr />
                            <div class="form-group">
                                <div class="row mb-2">
                                    <label id="lblTotalBeforeTax"><b>Total (before tax): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalBeforeTax" name="TotalItemCost" value="" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total tax (on items): </b></label>
                                    <input class="form-control text-right form-control-sm" id="TotalTax" name="TotalTax" readonly="readonly" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Other Tax: </b></label>
                                    <input class="form-control text-right form-control-sm" id="OtherTax" maxlength="8" name="OtherTax" value="0" onkeypress="return isNumberKey(event)" onchange="CalculateTotalBeforeTax()" />
                                </div>
                                <div class="row mb-2">
                                    <label><b>Total (after tax): </b></label>
                                    @Html.TextBoxFor(model => model.TotalAfterTax, new { @class = "form-control text-right form-control-sm", @readonly = "readonly" })
                                </div>
                                <div class="row mb-2">
                                    <label><b>Grand Total: </b></label>
                                    @Html.TextBoxFor(model => model.GrandTotal, new { @class = "form-control text-right form-control-sm", @readonly = "readonly" })
                                </div>
                                <div class="row mb-2">
                                    <label><b>Advanced To Pay: </b></label>
                                    @Html.TextBoxFor(model => model.AdvancedPayment, new { @class = "form-control text-right form-control-sm", maxlength = "8", onkeyup = "ValidateAdvancePayment($(this).val(),id)", onkeypress = "return isNumberKey(event)" })
                                    <span id="ValMsgAdvancePayment" style="display:none; color:red"></span>
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </div>
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "RequestForQuotation")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@Html.Raw(TempData["Success"])
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>*@
}

<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>
<script type="text/javascript">
    $(document).ready(function () {
        CalculateTotalBeforeTax();
        deliveryDate();
    });

    //---BiddingStartDate todaysDate start ------
    function deliveryDate() {
        const d = new Date();
        d.setYear(d.getFullYear());
        var id = "DeliveryDate";
        var tempDate = d.toISOString().split("T")[0];
        $("#" + id).val(tempDate);
        document.getElementById(id).setAttribute("min", tempDate.toString());
    }
    //---DeliveryDate todaysDate end ------

    function SaveBtnClick() {
        var terms = $('#TermsAndConditionID').val();
        if (terms == '' || terms == null) {
            $('#TermsAndConditionID').focus();
            document.getElementById('valTermMsg').innerHTML = 'Select terms and condition';
            document.getElementById('valTermMsg').setAttribute('style','color:red');
            event.preventDefault();
            return;
        }
        else
            document.getElementById('valTermMsg').innerHTML = '';

        var title = $('#Tittle').val();
        if (title == '' || title == null) {
            $('#Tittle').focus();
            document.getElementById('valMsgTitle').innerHTML = 'Enter tittle!';
            document.getElementById('valMsgTitle').setAttribute('style','color:red');
            event.preventDefault();
            return;
        }
        else
            document.getElementById('valMsgTitle').innerHTML = '';


        createJson();
    };

    //=====================Onchange of Terms and Condition===========================
    function SelectedIndexChangedTerms(id) {
        document.getElementById('valTermMsg').innerHTML = '';
        $.ajax({
            url: '/PurchaseOrder/GetTermsDescription',
            type: "POST",
            data: { id: id },
            success: function (result) {
                $('#Terms').val(result.TermDescription);
            },
            error: function (err) {
                alert('Not able to get the selected terms and condition value!');

            }
        });
    }

    //=============End==============
    var TxtItemDetails = "";

    function CalculateTotalBeforeTax() {
        $('#TotalBeforeTax').val('');
        $('#TotalTax').val('');
        var length = document.getElementById("submissionTable").rows.length;
        length = parseFloat(length);
        var total = 0;
        var totalTax = 0;
        totalTax = Math.round(totalTax);

        var OtherTax = document.getElementById("OtherTax").value;

        if (OtherTax == '')
            OtherTax = 0;

        OtherTax = parseFloat(OtherTax);

        var i = 1;
        while (i < length) {
            var temp = document.getElementById("totalItemCost_" + i).value;
            var tempTotalTax = ((document.getElementById("itemTax_" + i)).value);
            total = parseFloat(temp) + total;

            tempTotalTax = (parseFloat(tempTotalTax) / 100) * parseFloat(temp);
            totalTax = parseFloat(tempTotalTax) + totalTax;

            i++;
        }

        $('#TotalBeforeTax').val(total.toFixed(2));
        $('#TotalTax').val(totalTax.toFixed(2));
        var tempGrandTotal = total + totalTax + OtherTax;
        tempGrandTotal = Math.round(tempGrandTotal);
        //var tempGrandTotal = total + totalTax;
        $('#TotalAfterTax').val(tempGrandTotal);
        $('#GrandTotal').val(tempGrandTotal);

    }

    function ValidateAdvancePayment(value, id) {
        var GrandTotal = parseFloat($("#GrandTotal").val());
        value = parseFloat(value);
        if (value > GrandTotal) {
            $("#ValMsgAdvancePayment").text("Advance payment cannot be greater than Grand total!");
            $('#ValMsgAdvancePayment').show();
            document.getElementById(id).focus();
            return;
        }
        else
            $('#ValMsgAdvancePayment').hide();

    }

    function createJson() {
        var table = document.getElementById('submissionTable');
        var rowCount = table.rows.length;
        var i = 0;
        TxtItemDetails = "[";
        for (i = 1; i < rowCount ; i++) {
            var ItemCode = (document.getElementById("ItemCode_" + i)).value;
            var ItemID = (document.getElementById("ItemID_" + i)).value;
            var ItemName = (document.getElementById("ItemName_" + i)).value;
            var RequiredQty = (document.getElementById("ItemQuantity_" + i)).value;
            RequiredQty = (RequiredQty == null || RequiredQty == '') ? 0 : RequiredQty ;
            var Unit = (document.getElementById("ItemUnit_" + i)).value;
            var PricePerUnit = $("#ItemUnitPrice_" + i).val();
            var CurrencyName = $("#CurrencyName_" + i).val();
            var Tax = (document.getElementById("itemTax_" + i)).value;
            var TotalItemCost = $("#totalItemCost_" + i).val();

            TxtItemDetails = TxtItemDetails + "{\"Item_Code\":\"" + ItemCode + "\", \"ItemId\":" + ItemID +
                ", \"ItemName\": \"" + ItemName + "\", \"ItemQuantity\": " + RequiredQty
                + ", \"ItemUnit\": \"" + Unit + "\", \"ItemUnitPrice\": " + PricePerUnit + ", \"CurrencyName\": \""
                + CurrencyName + "\",\"ItemTaxValue\": " + Tax +
                ", \"TotalItemCost\": " + TotalItemCost;

            if (i == (rowCount - 1))
                TxtItemDetails = TxtItemDetails + "}";
            else
                TxtItemDetails = TxtItemDetails + "},";
        }
        TxtItemDetails = TxtItemDetails + "]";
        $('#TxtItemDetails').val(TxtItemDetails);
    }

    function fileValidation() {
        var fileInput =
            document.getElementById('file');

        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png)$/i;

        if (!allowedExtensions.exec(filePath)) {
            alert('Invalid file type');
            fileInput.value = '';
            return false;
        }
        else {

            // Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(
                        'imagePreview').innerHTML =
                        '<img src="' + e.target.result
                        + '" style="height:10%;width:20%" />';
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }
    }

    function isNumberKey(evt) {
        var keycode = (evt.which) ? evt.which : evt.keyCode;
        if (!(keycode == 8 || keycode == 46) && (keycode < 48 || keycode > 57)) {
            return false;
        }
        else {
            var parts = evt.srcElement.value.split('.');
            if (parts.length > 1 && keycode == 46)
                return false;
            else
                return true;
        }
        return true;
    }
</script>