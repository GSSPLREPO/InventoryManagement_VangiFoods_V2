@model InVanWebApp_BO.SILOCCPBO

@{
    ViewBag.Title = "AddSILOCCP";
    Layout = "~/Views/Shared/MainMaster.cshtml";
}

@using (Html.BeginForm("AddSILOCCP", "SILOCCP", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-body">
            <h4>Add SILO CCP</h4>
            <hr />
            @Html.ValidationSummary(true)

        <div class="row">
            @*<div class="col-md-2">
                @Html.Label("User")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Verification, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Verification, "", new { @class = "error mt-2 text-danger" })
            </div>*@
            <div class="col-md-2">
                @Html.Label("Date")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4" @*id="datetimepicker"*@>

                @Html.TextBoxFor(model => model.Date, "{0:yyyy-MM-dd}", new { @class = "form-control form-control-sm", type = "date", @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "error mt-2 text-danger" })
            </div>
            <div class="col-md-2">
                @Html.Label("Transefered Time From RQS")
                <span style="color:red">*</span>
            </div>
            <div class="col-md-4">
               
                @Html.TextBoxFor(model => model.TranseferedTimeFromRQS, new { @class = "form-control form-control-sm",type="time"})
                @Html.ValidationMessageFor(model => model.TranseferedTimeFromRQS, "", new { @class = "error mt-2 text-danger" })
            </div>
        </div>

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Item Name")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ItemName, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "error mt-2 text-danger", id = "validationMgsPAPH" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Activity")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Activity, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.Activity, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Monitoring Parameter")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.MonitoringParameter, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.MonitoringParameter, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2 mb-1">
                    @Html.Label("Time")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Time, new { @class = "form-control form-control-sm" , @readonly = "readonly", @max = DateTime.Now.ToString("yyyy-MM-dd") })
                    @Html.ValidationMessageFor(model => model.Time, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>

          
            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Mandatory Range(°C)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.MandatoryRange, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return customValidation(event);" })
                    @Html.ValidationMessageFor(model => model.MandatoryRange, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Frequency")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Frequency, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.Frequency, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Weight Of Holding(Kg)")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.WeightOfHoldingMaterial, new { @class = "form-control form-control-sm", maxlength = "10", @onkeypress = "return customValidation(event);" })
                    @Html.ValidationMessageFor(model => model.WeightOfHoldingMaterial, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Corrective Actions")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.CorrectiveActions, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.CorrectiveActions, "", new { @class = "error mt-2 text-danger" })
                </div>
            </div>


            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Responsibility")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Responsibility, new { @class = "form-control form-control-sm", maxlength = "50", @onkeypress = "return IsAlphabate(event);" })
                    @Html.ValidationMessageFor(model => model.Responsibility, "", new { @class = "error mt-2 text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Remarks")
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control form-control-sm", maxlength = "100", Title = "Remarks Will be Allow 100 Charachter" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "error mt-2 text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.Label("Verification")
                    <span style="color:red">*</span>
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Verification, new { @class = "form-control form-control-sm"})
                    @Html.ValidationMessageFor(model => model.Verification, "", new { @class = "error mt-2 text-danger" })
                </div>

            </div>
            <br />
            <div class="col d-flex justify-content-end" style="margin-left: auto;">
                <div class="row">
                    <div class="col">
                        <button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;" onclick="SaveBtnClick()">Save</button>
                        @*<button type="submit" id="btnSave" class="btn btn-sm btn-primary mr-2" style="background: linear-gradient(85deg, #392c70, #6a005b); float:right;">Save</button>*@
                    </div>
                    <div class="col">
                        <a href="@Url.Action("Index", "SILOCCP")" class="btn btn-sm btn-primary" style="background: linear-gradient(85deg, #392c70, #6a005b); float: right;">
                            Back To List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

@*<script src="jquery.min.js"></script>
<script src="jquery-ui.min.js"></script>
<script src="jquery-ui-timepicker-addon.js"></script>*@


<script type="text/javascript">
    //Custom validation for only numeric NA/na character.
    function customValidation(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || (unicode >= 48 && unicode <= 57))
        {
            return true;
        }
        else {
            return false;
        }
    }

    //Custom validation for only  alphabets, underscore and NA/na character.
    function IsAlphabate(e) {
        var unicode = e.charCode ? e.charCode : e.keyCode;
        if (unicode == 8 || unicode == 9 || unicode == 32
            || unicode == 95 || (unicode >= 65 && unicode <= 90) || (unicode >= 97 && unicode <= 122)) {
            return true;
        }
        else {
            return false;
        }
    }
</script>